/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var __accessCheck = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateGet = (obj, member, getter) => {
  __accessCheck(obj, member, "read from private field");
  return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};

// node_modules/universalify/index.js
var require_universalify = __commonJS({
  "node_modules/universalify/index.js"(exports) {
    "use strict";
    exports.fromCallback = function(fn) {
      return Object.defineProperty(function(...args) {
        if (typeof args[args.length - 1] === "function")
          fn.apply(this, args);
        else {
          return new Promise((resolve, reject) => {
            fn.call(this, ...args, (err, res) => err != null ? reject(err) : resolve(res));
          });
        }
      }, "name", { value: fn.name });
    };
    exports.fromPromise = function(fn) {
      return Object.defineProperty(function(...args) {
        const cb = args[args.length - 1];
        if (typeof cb !== "function")
          return fn.apply(this, args);
        else
          fn.apply(this, args.slice(0, -1)).then((r) => cb(null, r), cb);
      }, "name", { value: fn.name });
    };
  }
});

// node_modules/graceful-fs/polyfills.js
var require_polyfills = __commonJS({
  "node_modules/graceful-fs/polyfills.js"(exports, module2) {
    var constants = require("constants");
    var origCwd = process.cwd;
    var cwd = null;
    var platform = process.env.GRACEFUL_FS_PLATFORM || process.platform;
    process.cwd = function() {
      if (!cwd)
        cwd = origCwd.call(process);
      return cwd;
    };
    try {
      process.cwd();
    } catch (er) {
    }
    if (typeof process.chdir === "function") {
      chdir = process.chdir;
      process.chdir = function(d) {
        cwd = null;
        chdir.call(process, d);
      };
      if (Object.setPrototypeOf)
        Object.setPrototypeOf(process.chdir, chdir);
    }
    var chdir;
    module2.exports = patch;
    function patch(fs) {
      if (constants.hasOwnProperty("O_SYMLINK") && process.version.match(/^v0\.6\.[0-2]|^v0\.5\./)) {
        patchLchmod(fs);
      }
      if (!fs.lutimes) {
        patchLutimes(fs);
      }
      fs.chown = chownFix(fs.chown);
      fs.fchown = chownFix(fs.fchown);
      fs.lchown = chownFix(fs.lchown);
      fs.chmod = chmodFix(fs.chmod);
      fs.fchmod = chmodFix(fs.fchmod);
      fs.lchmod = chmodFix(fs.lchmod);
      fs.chownSync = chownFixSync(fs.chownSync);
      fs.fchownSync = chownFixSync(fs.fchownSync);
      fs.lchownSync = chownFixSync(fs.lchownSync);
      fs.chmodSync = chmodFixSync(fs.chmodSync);
      fs.fchmodSync = chmodFixSync(fs.fchmodSync);
      fs.lchmodSync = chmodFixSync(fs.lchmodSync);
      fs.stat = statFix(fs.stat);
      fs.fstat = statFix(fs.fstat);
      fs.lstat = statFix(fs.lstat);
      fs.statSync = statFixSync(fs.statSync);
      fs.fstatSync = statFixSync(fs.fstatSync);
      fs.lstatSync = statFixSync(fs.lstatSync);
      if (fs.chmod && !fs.lchmod) {
        fs.lchmod = function(path, mode, cb) {
          if (cb)
            process.nextTick(cb);
        };
        fs.lchmodSync = function() {
        };
      }
      if (fs.chown && !fs.lchown) {
        fs.lchown = function(path, uid, gid, cb) {
          if (cb)
            process.nextTick(cb);
        };
        fs.lchownSync = function() {
        };
      }
      if (platform === "win32") {
        fs.rename = typeof fs.rename !== "function" ? fs.rename : function(fs$rename) {
          function rename(from, to, cb) {
            var start = Date.now();
            var backoff = 0;
            fs$rename(from, to, function CB(er) {
              if (er && (er.code === "EACCES" || er.code === "EPERM") && Date.now() - start < 6e4) {
                setTimeout(function() {
                  fs.stat(to, function(stater, st) {
                    if (stater && stater.code === "ENOENT")
                      fs$rename(from, to, CB);
                    else
                      cb(er);
                  });
                }, backoff);
                if (backoff < 100)
                  backoff += 10;
                return;
              }
              if (cb)
                cb(er);
            });
          }
          if (Object.setPrototypeOf)
            Object.setPrototypeOf(rename, fs$rename);
          return rename;
        }(fs.rename);
      }
      fs.read = typeof fs.read !== "function" ? fs.read : function(fs$read) {
        function read(fd, buffer, offset, length, position, callback_) {
          var callback;
          if (callback_ && typeof callback_ === "function") {
            var eagCounter = 0;
            callback = function(er, _, __) {
              if (er && er.code === "EAGAIN" && eagCounter < 10) {
                eagCounter++;
                return fs$read.call(fs, fd, buffer, offset, length, position, callback);
              }
              callback_.apply(this, arguments);
            };
          }
          return fs$read.call(fs, fd, buffer, offset, length, position, callback);
        }
        if (Object.setPrototypeOf)
          Object.setPrototypeOf(read, fs$read);
        return read;
      }(fs.read);
      fs.readSync = typeof fs.readSync !== "function" ? fs.readSync : function(fs$readSync) {
        return function(fd, buffer, offset, length, position) {
          var eagCounter = 0;
          while (true) {
            try {
              return fs$readSync.call(fs, fd, buffer, offset, length, position);
            } catch (er) {
              if (er.code === "EAGAIN" && eagCounter < 10) {
                eagCounter++;
                continue;
              }
              throw er;
            }
          }
        };
      }(fs.readSync);
      function patchLchmod(fs2) {
        fs2.lchmod = function(path, mode, callback) {
          fs2.open(path, constants.O_WRONLY | constants.O_SYMLINK, mode, function(err, fd) {
            if (err) {
              if (callback)
                callback(err);
              return;
            }
            fs2.fchmod(fd, mode, function(err2) {
              fs2.close(fd, function(err22) {
                if (callback)
                  callback(err2 || err22);
              });
            });
          });
        };
        fs2.lchmodSync = function(path, mode) {
          var fd = fs2.openSync(path, constants.O_WRONLY | constants.O_SYMLINK, mode);
          var threw = true;
          var ret;
          try {
            ret = fs2.fchmodSync(fd, mode);
            threw = false;
          } finally {
            if (threw) {
              try {
                fs2.closeSync(fd);
              } catch (er) {
              }
            } else {
              fs2.closeSync(fd);
            }
          }
          return ret;
        };
      }
      function patchLutimes(fs2) {
        if (constants.hasOwnProperty("O_SYMLINK") && fs2.futimes) {
          fs2.lutimes = function(path, at, mt, cb) {
            fs2.open(path, constants.O_SYMLINK, function(er, fd) {
              if (er) {
                if (cb)
                  cb(er);
                return;
              }
              fs2.futimes(fd, at, mt, function(er2) {
                fs2.close(fd, function(er22) {
                  if (cb)
                    cb(er2 || er22);
                });
              });
            });
          };
          fs2.lutimesSync = function(path, at, mt) {
            var fd = fs2.openSync(path, constants.O_SYMLINK);
            var ret;
            var threw = true;
            try {
              ret = fs2.futimesSync(fd, at, mt);
              threw = false;
            } finally {
              if (threw) {
                try {
                  fs2.closeSync(fd);
                } catch (er) {
                }
              } else {
                fs2.closeSync(fd);
              }
            }
            return ret;
          };
        } else if (fs2.futimes) {
          fs2.lutimes = function(_a, _b, _c, cb) {
            if (cb)
              process.nextTick(cb);
          };
          fs2.lutimesSync = function() {
          };
        }
      }
      function chmodFix(orig) {
        if (!orig)
          return orig;
        return function(target, mode, cb) {
          return orig.call(fs, target, mode, function(er) {
            if (chownErOk(er))
              er = null;
            if (cb)
              cb.apply(this, arguments);
          });
        };
      }
      function chmodFixSync(orig) {
        if (!orig)
          return orig;
        return function(target, mode) {
          try {
            return orig.call(fs, target, mode);
          } catch (er) {
            if (!chownErOk(er))
              throw er;
          }
        };
      }
      function chownFix(orig) {
        if (!orig)
          return orig;
        return function(target, uid, gid, cb) {
          return orig.call(fs, target, uid, gid, function(er) {
            if (chownErOk(er))
              er = null;
            if (cb)
              cb.apply(this, arguments);
          });
        };
      }
      function chownFixSync(orig) {
        if (!orig)
          return orig;
        return function(target, uid, gid) {
          try {
            return orig.call(fs, target, uid, gid);
          } catch (er) {
            if (!chownErOk(er))
              throw er;
          }
        };
      }
      function statFix(orig) {
        if (!orig)
          return orig;
        return function(target, options, cb) {
          if (typeof options === "function") {
            cb = options;
            options = null;
          }
          function callback(er, stats) {
            if (stats) {
              if (stats.uid < 0)
                stats.uid += 4294967296;
              if (stats.gid < 0)
                stats.gid += 4294967296;
            }
            if (cb)
              cb.apply(this, arguments);
          }
          return options ? orig.call(fs, target, options, callback) : orig.call(fs, target, callback);
        };
      }
      function statFixSync(orig) {
        if (!orig)
          return orig;
        return function(target, options) {
          var stats = options ? orig.call(fs, target, options) : orig.call(fs, target);
          if (stats) {
            if (stats.uid < 0)
              stats.uid += 4294967296;
            if (stats.gid < 0)
              stats.gid += 4294967296;
          }
          return stats;
        };
      }
      function chownErOk(er) {
        if (!er)
          return true;
        if (er.code === "ENOSYS")
          return true;
        var nonroot = !process.getuid || process.getuid() !== 0;
        if (nonroot) {
          if (er.code === "EINVAL" || er.code === "EPERM")
            return true;
        }
        return false;
      }
    }
  }
});

// node_modules/graceful-fs/legacy-streams.js
var require_legacy_streams = __commonJS({
  "node_modules/graceful-fs/legacy-streams.js"(exports, module2) {
    var Stream = require("stream").Stream;
    module2.exports = legacy;
    function legacy(fs) {
      return {
        ReadStream,
        WriteStream
      };
      function ReadStream(path, options) {
        if (!(this instanceof ReadStream))
          return new ReadStream(path, options);
        Stream.call(this);
        var self2 = this;
        this.path = path;
        this.fd = null;
        this.readable = true;
        this.paused = false;
        this.flags = "r";
        this.mode = 438;
        this.bufferSize = 64 * 1024;
        options = options || {};
        var keys = Object.keys(options);
        for (var index = 0, length = keys.length; index < length; index++) {
          var key = keys[index];
          this[key] = options[key];
        }
        if (this.encoding)
          this.setEncoding(this.encoding);
        if (this.start !== void 0) {
          if (typeof this.start !== "number") {
            throw TypeError("start must be a Number");
          }
          if (this.end === void 0) {
            this.end = Infinity;
          } else if (typeof this.end !== "number") {
            throw TypeError("end must be a Number");
          }
          if (this.start > this.end) {
            throw new Error("start must be <= end");
          }
          this.pos = this.start;
        }
        if (this.fd !== null) {
          process.nextTick(function() {
            self2._read();
          });
          return;
        }
        fs.open(this.path, this.flags, this.mode, function(err, fd) {
          if (err) {
            self2.emit("error", err);
            self2.readable = false;
            return;
          }
          self2.fd = fd;
          self2.emit("open", fd);
          self2._read();
        });
      }
      function WriteStream(path, options) {
        if (!(this instanceof WriteStream))
          return new WriteStream(path, options);
        Stream.call(this);
        this.path = path;
        this.fd = null;
        this.writable = true;
        this.flags = "w";
        this.encoding = "binary";
        this.mode = 438;
        this.bytesWritten = 0;
        options = options || {};
        var keys = Object.keys(options);
        for (var index = 0, length = keys.length; index < length; index++) {
          var key = keys[index];
          this[key] = options[key];
        }
        if (this.start !== void 0) {
          if (typeof this.start !== "number") {
            throw TypeError("start must be a Number");
          }
          if (this.start < 0) {
            throw new Error("start must be >= zero");
          }
          this.pos = this.start;
        }
        this.busy = false;
        this._queue = [];
        if (this.fd === null) {
          this._open = fs.open;
          this._queue.push([this._open, this.path, this.flags, this.mode, void 0]);
          this.flush();
        }
      }
    }
  }
});

// node_modules/graceful-fs/clone.js
var require_clone = __commonJS({
  "node_modules/graceful-fs/clone.js"(exports, module2) {
    "use strict";
    module2.exports = clone;
    var getPrototypeOf = Object.getPrototypeOf || function(obj) {
      return obj.__proto__;
    };
    function clone(obj) {
      if (obj === null || typeof obj !== "object")
        return obj;
      if (obj instanceof Object)
        var copy = { __proto__: getPrototypeOf(obj) };
      else
        var copy = /* @__PURE__ */ Object.create(null);
      Object.getOwnPropertyNames(obj).forEach(function(key) {
        Object.defineProperty(copy, key, Object.getOwnPropertyDescriptor(obj, key));
      });
      return copy;
    }
  }
});

// node_modules/graceful-fs/graceful-fs.js
var require_graceful_fs = __commonJS({
  "node_modules/graceful-fs/graceful-fs.js"(exports, module2) {
    var fs = require("fs");
    var polyfills = require_polyfills();
    var legacy = require_legacy_streams();
    var clone = require_clone();
    var util = require("util");
    var gracefulQueue;
    var previousSymbol;
    if (typeof Symbol === "function" && typeof Symbol.for === "function") {
      gracefulQueue = Symbol.for("graceful-fs.queue");
      previousSymbol = Symbol.for("graceful-fs.previous");
    } else {
      gracefulQueue = "___graceful-fs.queue";
      previousSymbol = "___graceful-fs.previous";
    }
    function noop() {
    }
    function publishQueue(context, queue2) {
      Object.defineProperty(context, gracefulQueue, {
        get: function() {
          return queue2;
        }
      });
    }
    var debug = noop;
    if (util.debuglog)
      debug = util.debuglog("gfs4");
    else if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || ""))
      debug = function() {
        var m = util.format.apply(util, arguments);
        m = "GFS4: " + m.split(/\n/).join("\nGFS4: ");
        console.error(m);
      };
    if (!fs[gracefulQueue]) {
      queue = global[gracefulQueue] || [];
      publishQueue(fs, queue);
      fs.close = function(fs$close) {
        function close(fd, cb) {
          return fs$close.call(fs, fd, function(err) {
            if (!err) {
              resetQueue();
            }
            if (typeof cb === "function")
              cb.apply(this, arguments);
          });
        }
        Object.defineProperty(close, previousSymbol, {
          value: fs$close
        });
        return close;
      }(fs.close);
      fs.closeSync = function(fs$closeSync) {
        function closeSync(fd) {
          fs$closeSync.apply(fs, arguments);
          resetQueue();
        }
        Object.defineProperty(closeSync, previousSymbol, {
          value: fs$closeSync
        });
        return closeSync;
      }(fs.closeSync);
      if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || "")) {
        process.on("exit", function() {
          debug(fs[gracefulQueue]);
          require("assert").equal(fs[gracefulQueue].length, 0);
        });
      }
    }
    var queue;
    if (!global[gracefulQueue]) {
      publishQueue(global, fs[gracefulQueue]);
    }
    module2.exports = patch(clone(fs));
    if (process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH && !fs.__patched) {
      module2.exports = patch(fs);
      fs.__patched = true;
    }
    function patch(fs2) {
      polyfills(fs2);
      fs2.gracefulify = patch;
      fs2.createReadStream = createReadStream;
      fs2.createWriteStream = createWriteStream;
      var fs$readFile = fs2.readFile;
      fs2.readFile = readFile;
      function readFile(path, options, cb) {
        if (typeof options === "function")
          cb = options, options = null;
        return go$readFile(path, options, cb);
        function go$readFile(path2, options2, cb2, startTime) {
          return fs$readFile(path2, options2, function(err) {
            if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
              enqueue([go$readFile, [path2, options2, cb2], err, startTime || Date.now(), Date.now()]);
            else {
              if (typeof cb2 === "function")
                cb2.apply(this, arguments);
            }
          });
        }
      }
      var fs$writeFile = fs2.writeFile;
      fs2.writeFile = writeFile;
      function writeFile(path, data, options, cb) {
        if (typeof options === "function")
          cb = options, options = null;
        return go$writeFile(path, data, options, cb);
        function go$writeFile(path2, data2, options2, cb2, startTime) {
          return fs$writeFile(path2, data2, options2, function(err) {
            if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
              enqueue([go$writeFile, [path2, data2, options2, cb2], err, startTime || Date.now(), Date.now()]);
            else {
              if (typeof cb2 === "function")
                cb2.apply(this, arguments);
            }
          });
        }
      }
      var fs$appendFile = fs2.appendFile;
      if (fs$appendFile)
        fs2.appendFile = appendFile;
      function appendFile(path, data, options, cb) {
        if (typeof options === "function")
          cb = options, options = null;
        return go$appendFile(path, data, options, cb);
        function go$appendFile(path2, data2, options2, cb2, startTime) {
          return fs$appendFile(path2, data2, options2, function(err) {
            if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
              enqueue([go$appendFile, [path2, data2, options2, cb2], err, startTime || Date.now(), Date.now()]);
            else {
              if (typeof cb2 === "function")
                cb2.apply(this, arguments);
            }
          });
        }
      }
      var fs$copyFile = fs2.copyFile;
      if (fs$copyFile)
        fs2.copyFile = copyFile;
      function copyFile(src, dest, flags, cb) {
        if (typeof flags === "function") {
          cb = flags;
          flags = 0;
        }
        return go$copyFile(src, dest, flags, cb);
        function go$copyFile(src2, dest2, flags2, cb2, startTime) {
          return fs$copyFile(src2, dest2, flags2, function(err) {
            if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
              enqueue([go$copyFile, [src2, dest2, flags2, cb2], err, startTime || Date.now(), Date.now()]);
            else {
              if (typeof cb2 === "function")
                cb2.apply(this, arguments);
            }
          });
        }
      }
      var fs$readdir = fs2.readdir;
      fs2.readdir = readdir;
      var noReaddirOptionVersions = /^v[0-5]\./;
      function readdir(path, options, cb) {
        if (typeof options === "function")
          cb = options, options = null;
        var go$readdir = noReaddirOptionVersions.test(process.version) ? function go$readdir2(path2, options2, cb2, startTime) {
          return fs$readdir(path2, fs$readdirCallback(path2, options2, cb2, startTime));
        } : function go$readdir2(path2, options2, cb2, startTime) {
          return fs$readdir(path2, options2, fs$readdirCallback(path2, options2, cb2, startTime));
        };
        return go$readdir(path, options, cb);
        function fs$readdirCallback(path2, options2, cb2, startTime) {
          return function(err, files) {
            if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
              enqueue([
                go$readdir,
                [path2, options2, cb2],
                err,
                startTime || Date.now(),
                Date.now()
              ]);
            else {
              if (files && files.sort)
                files.sort();
              if (typeof cb2 === "function")
                cb2.call(this, err, files);
            }
          };
        }
      }
      if (process.version.substr(0, 4) === "v0.8") {
        var legStreams = legacy(fs2);
        ReadStream = legStreams.ReadStream;
        WriteStream = legStreams.WriteStream;
      }
      var fs$ReadStream = fs2.ReadStream;
      if (fs$ReadStream) {
        ReadStream.prototype = Object.create(fs$ReadStream.prototype);
        ReadStream.prototype.open = ReadStream$open;
      }
      var fs$WriteStream = fs2.WriteStream;
      if (fs$WriteStream) {
        WriteStream.prototype = Object.create(fs$WriteStream.prototype);
        WriteStream.prototype.open = WriteStream$open;
      }
      Object.defineProperty(fs2, "ReadStream", {
        get: function() {
          return ReadStream;
        },
        set: function(val) {
          ReadStream = val;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(fs2, "WriteStream", {
        get: function() {
          return WriteStream;
        },
        set: function(val) {
          WriteStream = val;
        },
        enumerable: true,
        configurable: true
      });
      var FileReadStream = ReadStream;
      Object.defineProperty(fs2, "FileReadStream", {
        get: function() {
          return FileReadStream;
        },
        set: function(val) {
          FileReadStream = val;
        },
        enumerable: true,
        configurable: true
      });
      var FileWriteStream = WriteStream;
      Object.defineProperty(fs2, "FileWriteStream", {
        get: function() {
          return FileWriteStream;
        },
        set: function(val) {
          FileWriteStream = val;
        },
        enumerable: true,
        configurable: true
      });
      function ReadStream(path, options) {
        if (this instanceof ReadStream)
          return fs$ReadStream.apply(this, arguments), this;
        else
          return ReadStream.apply(Object.create(ReadStream.prototype), arguments);
      }
      function ReadStream$open() {
        var that = this;
        open(that.path, that.flags, that.mode, function(err, fd) {
          if (err) {
            if (that.autoClose)
              that.destroy();
            that.emit("error", err);
          } else {
            that.fd = fd;
            that.emit("open", fd);
            that.read();
          }
        });
      }
      function WriteStream(path, options) {
        if (this instanceof WriteStream)
          return fs$WriteStream.apply(this, arguments), this;
        else
          return WriteStream.apply(Object.create(WriteStream.prototype), arguments);
      }
      function WriteStream$open() {
        var that = this;
        open(that.path, that.flags, that.mode, function(err, fd) {
          if (err) {
            that.destroy();
            that.emit("error", err);
          } else {
            that.fd = fd;
            that.emit("open", fd);
          }
        });
      }
      function createReadStream(path, options) {
        return new fs2.ReadStream(path, options);
      }
      function createWriteStream(path, options) {
        return new fs2.WriteStream(path, options);
      }
      var fs$open = fs2.open;
      fs2.open = open;
      function open(path, flags, mode, cb) {
        if (typeof mode === "function")
          cb = mode, mode = null;
        return go$open(path, flags, mode, cb);
        function go$open(path2, flags2, mode2, cb2, startTime) {
          return fs$open(path2, flags2, mode2, function(err, fd) {
            if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
              enqueue([go$open, [path2, flags2, mode2, cb2], err, startTime || Date.now(), Date.now()]);
            else {
              if (typeof cb2 === "function")
                cb2.apply(this, arguments);
            }
          });
        }
      }
      return fs2;
    }
    function enqueue(elem) {
      debug("ENQUEUE", elem[0].name, elem[1]);
      fs[gracefulQueue].push(elem);
      retry();
    }
    var retryTimer;
    function resetQueue() {
      var now = Date.now();
      for (var i = 0; i < fs[gracefulQueue].length; ++i) {
        if (fs[gracefulQueue][i].length > 2) {
          fs[gracefulQueue][i][3] = now;
          fs[gracefulQueue][i][4] = now;
        }
      }
      retry();
    }
    function retry() {
      clearTimeout(retryTimer);
      retryTimer = void 0;
      if (fs[gracefulQueue].length === 0)
        return;
      var elem = fs[gracefulQueue].shift();
      var fn = elem[0];
      var args = elem[1];
      var err = elem[2];
      var startTime = elem[3];
      var lastTime = elem[4];
      if (startTime === void 0) {
        debug("RETRY", fn.name, args);
        fn.apply(null, args);
      } else if (Date.now() - startTime >= 6e4) {
        debug("TIMEOUT", fn.name, args);
        var cb = args.pop();
        if (typeof cb === "function")
          cb.call(null, err);
      } else {
        var sinceAttempt = Date.now() - lastTime;
        var sinceStart = Math.max(lastTime - startTime, 1);
        var desiredDelay = Math.min(sinceStart * 1.2, 100);
        if (sinceAttempt >= desiredDelay) {
          debug("RETRY", fn.name, args);
          fn.apply(null, args.concat([startTime]));
        } else {
          fs[gracefulQueue].push(elem);
        }
      }
      if (retryTimer === void 0) {
        retryTimer = setTimeout(retry, 0);
      }
    }
  }
});

// node_modules/@publishkit/pklib/node_modules/fs-extra/lib/fs/index.js
var require_fs = __commonJS({
  "node_modules/@publishkit/pklib/node_modules/fs-extra/lib/fs/index.js"(exports) {
    "use strict";
    var u = require_universalify().fromCallback;
    var fs = require_graceful_fs();
    var api = [
      "access",
      "appendFile",
      "chmod",
      "chown",
      "close",
      "copyFile",
      "fchmod",
      "fchown",
      "fdatasync",
      "fstat",
      "fsync",
      "ftruncate",
      "futimes",
      "lchmod",
      "lchown",
      "link",
      "lstat",
      "mkdir",
      "mkdtemp",
      "open",
      "opendir",
      "readdir",
      "readFile",
      "readlink",
      "realpath",
      "rename",
      "rm",
      "rmdir",
      "stat",
      "symlink",
      "truncate",
      "unlink",
      "utimes",
      "writeFile"
    ].filter((key) => {
      return typeof fs[key] === "function";
    });
    Object.assign(exports, fs);
    api.forEach((method) => {
      exports[method] = u(fs[method]);
    });
    exports.exists = function(filename, callback) {
      if (typeof callback === "function") {
        return fs.exists(filename, callback);
      }
      return new Promise((resolve) => {
        return fs.exists(filename, resolve);
      });
    };
    exports.read = function(fd, buffer, offset, length, position, callback) {
      if (typeof callback === "function") {
        return fs.read(fd, buffer, offset, length, position, callback);
      }
      return new Promise((resolve, reject) => {
        fs.read(fd, buffer, offset, length, position, (err, bytesRead, buffer2) => {
          if (err)
            return reject(err);
          resolve({ bytesRead, buffer: buffer2 });
        });
      });
    };
    exports.write = function(fd, buffer, ...args) {
      if (typeof args[args.length - 1] === "function") {
        return fs.write(fd, buffer, ...args);
      }
      return new Promise((resolve, reject) => {
        fs.write(fd, buffer, ...args, (err, bytesWritten, buffer2) => {
          if (err)
            return reject(err);
          resolve({ bytesWritten, buffer: buffer2 });
        });
      });
    };
    exports.readv = function(fd, buffers, ...args) {
      if (typeof args[args.length - 1] === "function") {
        return fs.readv(fd, buffers, ...args);
      }
      return new Promise((resolve, reject) => {
        fs.readv(fd, buffers, ...args, (err, bytesRead, buffers2) => {
          if (err)
            return reject(err);
          resolve({ bytesRead, buffers: buffers2 });
        });
      });
    };
    exports.writev = function(fd, buffers, ...args) {
      if (typeof args[args.length - 1] === "function") {
        return fs.writev(fd, buffers, ...args);
      }
      return new Promise((resolve, reject) => {
        fs.writev(fd, buffers, ...args, (err, bytesWritten, buffers2) => {
          if (err)
            return reject(err);
          resolve({ bytesWritten, buffers: buffers2 });
        });
      });
    };
    if (typeof fs.realpath.native === "function") {
      exports.realpath.native = u(fs.realpath.native);
    } else {
      process.emitWarning("fs.realpath.native is not a function. Is fs being monkey-patched?", "Warning", "fs-extra-WARN0003");
    }
  }
});

// node_modules/@publishkit/pklib/node_modules/fs-extra/lib/mkdirs/utils.js
var require_utils = __commonJS({
  "node_modules/@publishkit/pklib/node_modules/fs-extra/lib/mkdirs/utils.js"(exports, module2) {
    "use strict";
    var path = require("path");
    module2.exports.checkPath = function checkPath(pth) {
      if (process.platform === "win32") {
        const pathHasInvalidWinCharacters = /[<>:"|?*]/.test(pth.replace(path.parse(pth).root, ""));
        if (pathHasInvalidWinCharacters) {
          const error = new Error(`Path contains invalid characters: ${pth}`);
          error.code = "EINVAL";
          throw error;
        }
      }
    };
  }
});

// node_modules/@publishkit/pklib/node_modules/fs-extra/lib/mkdirs/make-dir.js
var require_make_dir = __commonJS({
  "node_modules/@publishkit/pklib/node_modules/fs-extra/lib/mkdirs/make-dir.js"(exports, module2) {
    "use strict";
    var fs = require_fs();
    var { checkPath } = require_utils();
    var getMode = (options) => {
      const defaults = { mode: 511 };
      if (typeof options === "number")
        return options;
      return { ...defaults, ...options }.mode;
    };
    module2.exports.makeDir = async (dir, options) => {
      checkPath(dir);
      return fs.mkdir(dir, {
        mode: getMode(options),
        recursive: true
      });
    };
    module2.exports.makeDirSync = (dir, options) => {
      checkPath(dir);
      return fs.mkdirSync(dir, {
        mode: getMode(options),
        recursive: true
      });
    };
  }
});

// node_modules/@publishkit/pklib/node_modules/fs-extra/lib/mkdirs/index.js
var require_mkdirs = __commonJS({
  "node_modules/@publishkit/pklib/node_modules/fs-extra/lib/mkdirs/index.js"(exports, module2) {
    "use strict";
    var u = require_universalify().fromPromise;
    var { makeDir: _makeDir, makeDirSync } = require_make_dir();
    var makeDir = u(_makeDir);
    module2.exports = {
      mkdirs: makeDir,
      mkdirsSync: makeDirSync,
      mkdirp: makeDir,
      mkdirpSync: makeDirSync,
      ensureDir: makeDir,
      ensureDirSync: makeDirSync
    };
  }
});

// node_modules/@publishkit/pklib/node_modules/fs-extra/lib/path-exists/index.js
var require_path_exists = __commonJS({
  "node_modules/@publishkit/pklib/node_modules/fs-extra/lib/path-exists/index.js"(exports, module2) {
    "use strict";
    var u = require_universalify().fromPromise;
    var fs = require_fs();
    function pathExists(path) {
      return fs.access(path).then(() => true).catch(() => false);
    }
    module2.exports = {
      pathExists: u(pathExists),
      pathExistsSync: fs.existsSync
    };
  }
});

// node_modules/@publishkit/pklib/node_modules/fs-extra/lib/util/utimes.js
var require_utimes = __commonJS({
  "node_modules/@publishkit/pklib/node_modules/fs-extra/lib/util/utimes.js"(exports, module2) {
    "use strict";
    var fs = require_graceful_fs();
    function utimesMillis(path, atime, mtime, callback) {
      fs.open(path, "r+", (err, fd) => {
        if (err)
          return callback(err);
        fs.futimes(fd, atime, mtime, (futimesErr) => {
          fs.close(fd, (closeErr) => {
            if (callback)
              callback(futimesErr || closeErr);
          });
        });
      });
    }
    function utimesMillisSync(path, atime, mtime) {
      const fd = fs.openSync(path, "r+");
      fs.futimesSync(fd, atime, mtime);
      return fs.closeSync(fd);
    }
    module2.exports = {
      utimesMillis,
      utimesMillisSync
    };
  }
});

// node_modules/@publishkit/pklib/node_modules/fs-extra/lib/util/stat.js
var require_stat = __commonJS({
  "node_modules/@publishkit/pklib/node_modules/fs-extra/lib/util/stat.js"(exports, module2) {
    "use strict";
    var fs = require_fs();
    var path = require("path");
    var util = require("util");
    function getStats(src, dest, opts) {
      const statFunc = opts.dereference ? (file) => fs.stat(file, { bigint: true }) : (file) => fs.lstat(file, { bigint: true });
      return Promise.all([
        statFunc(src),
        statFunc(dest).catch((err) => {
          if (err.code === "ENOENT")
            return null;
          throw err;
        })
      ]).then(([srcStat, destStat]) => ({ srcStat, destStat }));
    }
    function getStatsSync(src, dest, opts) {
      let destStat;
      const statFunc = opts.dereference ? (file) => fs.statSync(file, { bigint: true }) : (file) => fs.lstatSync(file, { bigint: true });
      const srcStat = statFunc(src);
      try {
        destStat = statFunc(dest);
      } catch (err) {
        if (err.code === "ENOENT")
          return { srcStat, destStat: null };
        throw err;
      }
      return { srcStat, destStat };
    }
    function checkPaths(src, dest, funcName, opts, cb) {
      util.callbackify(getStats)(src, dest, opts, (err, stats) => {
        if (err)
          return cb(err);
        const { srcStat, destStat } = stats;
        if (destStat) {
          if (areIdentical(srcStat, destStat)) {
            const srcBaseName = path.basename(src);
            const destBaseName = path.basename(dest);
            if (funcName === "move" && srcBaseName !== destBaseName && srcBaseName.toLowerCase() === destBaseName.toLowerCase()) {
              return cb(null, { srcStat, destStat, isChangingCase: true });
            }
            return cb(new Error("Source and destination must not be the same."));
          }
          if (srcStat.isDirectory() && !destStat.isDirectory()) {
            return cb(new Error(`Cannot overwrite non-directory '${dest}' with directory '${src}'.`));
          }
          if (!srcStat.isDirectory() && destStat.isDirectory()) {
            return cb(new Error(`Cannot overwrite directory '${dest}' with non-directory '${src}'.`));
          }
        }
        if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {
          return cb(new Error(errMsg(src, dest, funcName)));
        }
        return cb(null, { srcStat, destStat });
      });
    }
    function checkPathsSync(src, dest, funcName, opts) {
      const { srcStat, destStat } = getStatsSync(src, dest, opts);
      if (destStat) {
        if (areIdentical(srcStat, destStat)) {
          const srcBaseName = path.basename(src);
          const destBaseName = path.basename(dest);
          if (funcName === "move" && srcBaseName !== destBaseName && srcBaseName.toLowerCase() === destBaseName.toLowerCase()) {
            return { srcStat, destStat, isChangingCase: true };
          }
          throw new Error("Source and destination must not be the same.");
        }
        if (srcStat.isDirectory() && !destStat.isDirectory()) {
          throw new Error(`Cannot overwrite non-directory '${dest}' with directory '${src}'.`);
        }
        if (!srcStat.isDirectory() && destStat.isDirectory()) {
          throw new Error(`Cannot overwrite directory '${dest}' with non-directory '${src}'.`);
        }
      }
      if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {
        throw new Error(errMsg(src, dest, funcName));
      }
      return { srcStat, destStat };
    }
    function checkParentPaths(src, srcStat, dest, funcName, cb) {
      const srcParent = path.resolve(path.dirname(src));
      const destParent = path.resolve(path.dirname(dest));
      if (destParent === srcParent || destParent === path.parse(destParent).root)
        return cb();
      fs.stat(destParent, { bigint: true }, (err, destStat) => {
        if (err) {
          if (err.code === "ENOENT")
            return cb();
          return cb(err);
        }
        if (areIdentical(srcStat, destStat)) {
          return cb(new Error(errMsg(src, dest, funcName)));
        }
        return checkParentPaths(src, srcStat, destParent, funcName, cb);
      });
    }
    function checkParentPathsSync(src, srcStat, dest, funcName) {
      const srcParent = path.resolve(path.dirname(src));
      const destParent = path.resolve(path.dirname(dest));
      if (destParent === srcParent || destParent === path.parse(destParent).root)
        return;
      let destStat;
      try {
        destStat = fs.statSync(destParent, { bigint: true });
      } catch (err) {
        if (err.code === "ENOENT")
          return;
        throw err;
      }
      if (areIdentical(srcStat, destStat)) {
        throw new Error(errMsg(src, dest, funcName));
      }
      return checkParentPathsSync(src, srcStat, destParent, funcName);
    }
    function areIdentical(srcStat, destStat) {
      return destStat.ino && destStat.dev && destStat.ino === srcStat.ino && destStat.dev === srcStat.dev;
    }
    function isSrcSubdir(src, dest) {
      const srcArr = path.resolve(src).split(path.sep).filter((i) => i);
      const destArr = path.resolve(dest).split(path.sep).filter((i) => i);
      return srcArr.reduce((acc, cur, i) => acc && destArr[i] === cur, true);
    }
    function errMsg(src, dest, funcName) {
      return `Cannot ${funcName} '${src}' to a subdirectory of itself, '${dest}'.`;
    }
    module2.exports = {
      checkPaths,
      checkPathsSync,
      checkParentPaths,
      checkParentPathsSync,
      isSrcSubdir,
      areIdentical
    };
  }
});

// node_modules/@publishkit/pklib/node_modules/fs-extra/lib/copy/copy.js
var require_copy = __commonJS({
  "node_modules/@publishkit/pklib/node_modules/fs-extra/lib/copy/copy.js"(exports, module2) {
    "use strict";
    var fs = require_graceful_fs();
    var path = require("path");
    var mkdirs = require_mkdirs().mkdirs;
    var pathExists = require_path_exists().pathExists;
    var utimesMillis = require_utimes().utimesMillis;
    var stat = require_stat();
    function copy(src, dest, opts, cb) {
      if (typeof opts === "function" && !cb) {
        cb = opts;
        opts = {};
      } else if (typeof opts === "function") {
        opts = { filter: opts };
      }
      cb = cb || function() {
      };
      opts = opts || {};
      opts.clobber = "clobber" in opts ? !!opts.clobber : true;
      opts.overwrite = "overwrite" in opts ? !!opts.overwrite : opts.clobber;
      if (opts.preserveTimestamps && process.arch === "ia32") {
        process.emitWarning("Using the preserveTimestamps option in 32-bit node is not recommended;\n\n	see https://github.com/jprichardson/node-fs-extra/issues/269", "Warning", "fs-extra-WARN0001");
      }
      stat.checkPaths(src, dest, "copy", opts, (err, stats) => {
        if (err)
          return cb(err);
        const { srcStat, destStat } = stats;
        stat.checkParentPaths(src, srcStat, dest, "copy", (err2) => {
          if (err2)
            return cb(err2);
          runFilter(src, dest, opts, (err3, include) => {
            if (err3)
              return cb(err3);
            if (!include)
              return cb();
            checkParentDir(destStat, src, dest, opts, cb);
          });
        });
      });
    }
    function checkParentDir(destStat, src, dest, opts, cb) {
      const destParent = path.dirname(dest);
      pathExists(destParent, (err, dirExists) => {
        if (err)
          return cb(err);
        if (dirExists)
          return getStats(destStat, src, dest, opts, cb);
        mkdirs(destParent, (err2) => {
          if (err2)
            return cb(err2);
          return getStats(destStat, src, dest, opts, cb);
        });
      });
    }
    function runFilter(src, dest, opts, cb) {
      if (!opts.filter)
        return cb(null, true);
      Promise.resolve(opts.filter(src, dest)).then((include) => cb(null, include), (error) => cb(error));
    }
    function getStats(destStat, src, dest, opts, cb) {
      const stat2 = opts.dereference ? fs.stat : fs.lstat;
      stat2(src, (err, srcStat) => {
        if (err)
          return cb(err);
        if (srcStat.isDirectory())
          return onDir(srcStat, destStat, src, dest, opts, cb);
        else if (srcStat.isFile() || srcStat.isCharacterDevice() || srcStat.isBlockDevice())
          return onFile(srcStat, destStat, src, dest, opts, cb);
        else if (srcStat.isSymbolicLink())
          return onLink(destStat, src, dest, opts, cb);
        else if (srcStat.isSocket())
          return cb(new Error(`Cannot copy a socket file: ${src}`));
        else if (srcStat.isFIFO())
          return cb(new Error(`Cannot copy a FIFO pipe: ${src}`));
        return cb(new Error(`Unknown file: ${src}`));
      });
    }
    function onFile(srcStat, destStat, src, dest, opts, cb) {
      if (!destStat)
        return copyFile(srcStat, src, dest, opts, cb);
      return mayCopyFile(srcStat, src, dest, opts, cb);
    }
    function mayCopyFile(srcStat, src, dest, opts, cb) {
      if (opts.overwrite) {
        fs.unlink(dest, (err) => {
          if (err)
            return cb(err);
          return copyFile(srcStat, src, dest, opts, cb);
        });
      } else if (opts.errorOnExist) {
        return cb(new Error(`'${dest}' already exists`));
      } else
        return cb();
    }
    function copyFile(srcStat, src, dest, opts, cb) {
      fs.copyFile(src, dest, (err) => {
        if (err)
          return cb(err);
        if (opts.preserveTimestamps)
          return handleTimestampsAndMode(srcStat.mode, src, dest, cb);
        return setDestMode(dest, srcStat.mode, cb);
      });
    }
    function handleTimestampsAndMode(srcMode, src, dest, cb) {
      if (fileIsNotWritable(srcMode)) {
        return makeFileWritable(dest, srcMode, (err) => {
          if (err)
            return cb(err);
          return setDestTimestampsAndMode(srcMode, src, dest, cb);
        });
      }
      return setDestTimestampsAndMode(srcMode, src, dest, cb);
    }
    function fileIsNotWritable(srcMode) {
      return (srcMode & 128) === 0;
    }
    function makeFileWritable(dest, srcMode, cb) {
      return setDestMode(dest, srcMode | 128, cb);
    }
    function setDestTimestampsAndMode(srcMode, src, dest, cb) {
      setDestTimestamps(src, dest, (err) => {
        if (err)
          return cb(err);
        return setDestMode(dest, srcMode, cb);
      });
    }
    function setDestMode(dest, srcMode, cb) {
      return fs.chmod(dest, srcMode, cb);
    }
    function setDestTimestamps(src, dest, cb) {
      fs.stat(src, (err, updatedSrcStat) => {
        if (err)
          return cb(err);
        return utimesMillis(dest, updatedSrcStat.atime, updatedSrcStat.mtime, cb);
      });
    }
    function onDir(srcStat, destStat, src, dest, opts, cb) {
      if (!destStat)
        return mkDirAndCopy(srcStat.mode, src, dest, opts, cb);
      return copyDir(src, dest, opts, cb);
    }
    function mkDirAndCopy(srcMode, src, dest, opts, cb) {
      fs.mkdir(dest, (err) => {
        if (err)
          return cb(err);
        copyDir(src, dest, opts, (err2) => {
          if (err2)
            return cb(err2);
          return setDestMode(dest, srcMode, cb);
        });
      });
    }
    function copyDir(src, dest, opts, cb) {
      fs.readdir(src, (err, items) => {
        if (err)
          return cb(err);
        return copyDirItems(items, src, dest, opts, cb);
      });
    }
    function copyDirItems(items, src, dest, opts, cb) {
      const item = items.pop();
      if (!item)
        return cb();
      return copyDirItem(items, item, src, dest, opts, cb);
    }
    function copyDirItem(items, item, src, dest, opts, cb) {
      const srcItem = path.join(src, item);
      const destItem = path.join(dest, item);
      runFilter(srcItem, destItem, opts, (err, include) => {
        if (err)
          return cb(err);
        if (!include)
          return copyDirItems(items, src, dest, opts, cb);
        stat.checkPaths(srcItem, destItem, "copy", opts, (err2, stats) => {
          if (err2)
            return cb(err2);
          const { destStat } = stats;
          getStats(destStat, srcItem, destItem, opts, (err3) => {
            if (err3)
              return cb(err3);
            return copyDirItems(items, src, dest, opts, cb);
          });
        });
      });
    }
    function onLink(destStat, src, dest, opts, cb) {
      fs.readlink(src, (err, resolvedSrc) => {
        if (err)
          return cb(err);
        if (opts.dereference) {
          resolvedSrc = path.resolve(process.cwd(), resolvedSrc);
        }
        if (!destStat) {
          return fs.symlink(resolvedSrc, dest, cb);
        } else {
          fs.readlink(dest, (err2, resolvedDest) => {
            if (err2) {
              if (err2.code === "EINVAL" || err2.code === "UNKNOWN")
                return fs.symlink(resolvedSrc, dest, cb);
              return cb(err2);
            }
            if (opts.dereference) {
              resolvedDest = path.resolve(process.cwd(), resolvedDest);
            }
            if (stat.isSrcSubdir(resolvedSrc, resolvedDest)) {
              return cb(new Error(`Cannot copy '${resolvedSrc}' to a subdirectory of itself, '${resolvedDest}'.`));
            }
            if (stat.isSrcSubdir(resolvedDest, resolvedSrc)) {
              return cb(new Error(`Cannot overwrite '${resolvedDest}' with '${resolvedSrc}'.`));
            }
            return copyLink(resolvedSrc, dest, cb);
          });
        }
      });
    }
    function copyLink(resolvedSrc, dest, cb) {
      fs.unlink(dest, (err) => {
        if (err)
          return cb(err);
        return fs.symlink(resolvedSrc, dest, cb);
      });
    }
    module2.exports = copy;
  }
});

// node_modules/@publishkit/pklib/node_modules/fs-extra/lib/copy/copy-sync.js
var require_copy_sync = __commonJS({
  "node_modules/@publishkit/pklib/node_modules/fs-extra/lib/copy/copy-sync.js"(exports, module2) {
    "use strict";
    var fs = require_graceful_fs();
    var path = require("path");
    var mkdirsSync = require_mkdirs().mkdirsSync;
    var utimesMillisSync = require_utimes().utimesMillisSync;
    var stat = require_stat();
    function copySync(src, dest, opts) {
      if (typeof opts === "function") {
        opts = { filter: opts };
      }
      opts = opts || {};
      opts.clobber = "clobber" in opts ? !!opts.clobber : true;
      opts.overwrite = "overwrite" in opts ? !!opts.overwrite : opts.clobber;
      if (opts.preserveTimestamps && process.arch === "ia32") {
        process.emitWarning("Using the preserveTimestamps option in 32-bit node is not recommended;\n\n	see https://github.com/jprichardson/node-fs-extra/issues/269", "Warning", "fs-extra-WARN0002");
      }
      const { srcStat, destStat } = stat.checkPathsSync(src, dest, "copy", opts);
      stat.checkParentPathsSync(src, srcStat, dest, "copy");
      if (opts.filter && !opts.filter(src, dest))
        return;
      const destParent = path.dirname(dest);
      if (!fs.existsSync(destParent))
        mkdirsSync(destParent);
      return getStats(destStat, src, dest, opts);
    }
    function getStats(destStat, src, dest, opts) {
      const statSync = opts.dereference ? fs.statSync : fs.lstatSync;
      const srcStat = statSync(src);
      if (srcStat.isDirectory())
        return onDir(srcStat, destStat, src, dest, opts);
      else if (srcStat.isFile() || srcStat.isCharacterDevice() || srcStat.isBlockDevice())
        return onFile(srcStat, destStat, src, dest, opts);
      else if (srcStat.isSymbolicLink())
        return onLink(destStat, src, dest, opts);
      else if (srcStat.isSocket())
        throw new Error(`Cannot copy a socket file: ${src}`);
      else if (srcStat.isFIFO())
        throw new Error(`Cannot copy a FIFO pipe: ${src}`);
      throw new Error(`Unknown file: ${src}`);
    }
    function onFile(srcStat, destStat, src, dest, opts) {
      if (!destStat)
        return copyFile(srcStat, src, dest, opts);
      return mayCopyFile(srcStat, src, dest, opts);
    }
    function mayCopyFile(srcStat, src, dest, opts) {
      if (opts.overwrite) {
        fs.unlinkSync(dest);
        return copyFile(srcStat, src, dest, opts);
      } else if (opts.errorOnExist) {
        throw new Error(`'${dest}' already exists`);
      }
    }
    function copyFile(srcStat, src, dest, opts) {
      fs.copyFileSync(src, dest);
      if (opts.preserveTimestamps)
        handleTimestamps(srcStat.mode, src, dest);
      return setDestMode(dest, srcStat.mode);
    }
    function handleTimestamps(srcMode, src, dest) {
      if (fileIsNotWritable(srcMode))
        makeFileWritable(dest, srcMode);
      return setDestTimestamps(src, dest);
    }
    function fileIsNotWritable(srcMode) {
      return (srcMode & 128) === 0;
    }
    function makeFileWritable(dest, srcMode) {
      return setDestMode(dest, srcMode | 128);
    }
    function setDestMode(dest, srcMode) {
      return fs.chmodSync(dest, srcMode);
    }
    function setDestTimestamps(src, dest) {
      const updatedSrcStat = fs.statSync(src);
      return utimesMillisSync(dest, updatedSrcStat.atime, updatedSrcStat.mtime);
    }
    function onDir(srcStat, destStat, src, dest, opts) {
      if (!destStat)
        return mkDirAndCopy(srcStat.mode, src, dest, opts);
      return copyDir(src, dest, opts);
    }
    function mkDirAndCopy(srcMode, src, dest, opts) {
      fs.mkdirSync(dest);
      copyDir(src, dest, opts);
      return setDestMode(dest, srcMode);
    }
    function copyDir(src, dest, opts) {
      fs.readdirSync(src).forEach((item) => copyDirItem(item, src, dest, opts));
    }
    function copyDirItem(item, src, dest, opts) {
      const srcItem = path.join(src, item);
      const destItem = path.join(dest, item);
      if (opts.filter && !opts.filter(srcItem, destItem))
        return;
      const { destStat } = stat.checkPathsSync(srcItem, destItem, "copy", opts);
      return getStats(destStat, srcItem, destItem, opts);
    }
    function onLink(destStat, src, dest, opts) {
      let resolvedSrc = fs.readlinkSync(src);
      if (opts.dereference) {
        resolvedSrc = path.resolve(process.cwd(), resolvedSrc);
      }
      if (!destStat) {
        return fs.symlinkSync(resolvedSrc, dest);
      } else {
        let resolvedDest;
        try {
          resolvedDest = fs.readlinkSync(dest);
        } catch (err) {
          if (err.code === "EINVAL" || err.code === "UNKNOWN")
            return fs.symlinkSync(resolvedSrc, dest);
          throw err;
        }
        if (opts.dereference) {
          resolvedDest = path.resolve(process.cwd(), resolvedDest);
        }
        if (stat.isSrcSubdir(resolvedSrc, resolvedDest)) {
          throw new Error(`Cannot copy '${resolvedSrc}' to a subdirectory of itself, '${resolvedDest}'.`);
        }
        if (stat.isSrcSubdir(resolvedDest, resolvedSrc)) {
          throw new Error(`Cannot overwrite '${resolvedDest}' with '${resolvedSrc}'.`);
        }
        return copyLink(resolvedSrc, dest);
      }
    }
    function copyLink(resolvedSrc, dest) {
      fs.unlinkSync(dest);
      return fs.symlinkSync(resolvedSrc, dest);
    }
    module2.exports = copySync;
  }
});

// node_modules/@publishkit/pklib/node_modules/fs-extra/lib/copy/index.js
var require_copy2 = __commonJS({
  "node_modules/@publishkit/pklib/node_modules/fs-extra/lib/copy/index.js"(exports, module2) {
    "use strict";
    var u = require_universalify().fromCallback;
    module2.exports = {
      copy: u(require_copy()),
      copySync: require_copy_sync()
    };
  }
});

// node_modules/@publishkit/pklib/node_modules/fs-extra/lib/remove/index.js
var require_remove = __commonJS({
  "node_modules/@publishkit/pklib/node_modules/fs-extra/lib/remove/index.js"(exports, module2) {
    "use strict";
    var fs = require_graceful_fs();
    var u = require_universalify().fromCallback;
    function remove(path, callback) {
      fs.rm(path, { recursive: true, force: true }, callback);
    }
    function removeSync(path) {
      fs.rmSync(path, { recursive: true, force: true });
    }
    module2.exports = {
      remove: u(remove),
      removeSync
    };
  }
});

// node_modules/@publishkit/pklib/node_modules/fs-extra/lib/empty/index.js
var require_empty = __commonJS({
  "node_modules/@publishkit/pklib/node_modules/fs-extra/lib/empty/index.js"(exports, module2) {
    "use strict";
    var u = require_universalify().fromPromise;
    var fs = require_fs();
    var path = require("path");
    var mkdir = require_mkdirs();
    var remove = require_remove();
    var emptyDir = u(async function emptyDir2(dir) {
      let items;
      try {
        items = await fs.readdir(dir);
      } catch (e) {
        return mkdir.mkdirs(dir);
      }
      return Promise.all(items.map((item) => remove.remove(path.join(dir, item))));
    });
    function emptyDirSync(dir) {
      let items;
      try {
        items = fs.readdirSync(dir);
      } catch (e) {
        return mkdir.mkdirsSync(dir);
      }
      items.forEach((item) => {
        item = path.join(dir, item);
        remove.removeSync(item);
      });
    }
    module2.exports = {
      emptyDirSync,
      emptydirSync: emptyDirSync,
      emptyDir,
      emptydir: emptyDir
    };
  }
});

// node_modules/@publishkit/pklib/node_modules/fs-extra/lib/ensure/file.js
var require_file = __commonJS({
  "node_modules/@publishkit/pklib/node_modules/fs-extra/lib/ensure/file.js"(exports, module2) {
    "use strict";
    var u = require_universalify().fromCallback;
    var path = require("path");
    var fs = require_graceful_fs();
    var mkdir = require_mkdirs();
    function createFile(file, callback) {
      function makeFile() {
        fs.writeFile(file, "", (err) => {
          if (err)
            return callback(err);
          callback();
        });
      }
      fs.stat(file, (err, stats) => {
        if (!err && stats.isFile())
          return callback();
        const dir = path.dirname(file);
        fs.stat(dir, (err2, stats2) => {
          if (err2) {
            if (err2.code === "ENOENT") {
              return mkdir.mkdirs(dir, (err3) => {
                if (err3)
                  return callback(err3);
                makeFile();
              });
            }
            return callback(err2);
          }
          if (stats2.isDirectory())
            makeFile();
          else {
            fs.readdir(dir, (err3) => {
              if (err3)
                return callback(err3);
            });
          }
        });
      });
    }
    function createFileSync(file) {
      let stats;
      try {
        stats = fs.statSync(file);
      } catch (e) {
      }
      if (stats && stats.isFile())
        return;
      const dir = path.dirname(file);
      try {
        if (!fs.statSync(dir).isDirectory()) {
          fs.readdirSync(dir);
        }
      } catch (err) {
        if (err && err.code === "ENOENT")
          mkdir.mkdirsSync(dir);
        else
          throw err;
      }
      fs.writeFileSync(file, "");
    }
    module2.exports = {
      createFile: u(createFile),
      createFileSync
    };
  }
});

// node_modules/@publishkit/pklib/node_modules/fs-extra/lib/ensure/link.js
var require_link = __commonJS({
  "node_modules/@publishkit/pklib/node_modules/fs-extra/lib/ensure/link.js"(exports, module2) {
    "use strict";
    var u = require_universalify().fromCallback;
    var path = require("path");
    var fs = require_graceful_fs();
    var mkdir = require_mkdirs();
    var pathExists = require_path_exists().pathExists;
    var { areIdentical } = require_stat();
    function createLink(srcpath, dstpath, callback) {
      function makeLink(srcpath2, dstpath2) {
        fs.link(srcpath2, dstpath2, (err) => {
          if (err)
            return callback(err);
          callback(null);
        });
      }
      fs.lstat(dstpath, (_, dstStat) => {
        fs.lstat(srcpath, (err, srcStat) => {
          if (err) {
            err.message = err.message.replace("lstat", "ensureLink");
            return callback(err);
          }
          if (dstStat && areIdentical(srcStat, dstStat))
            return callback(null);
          const dir = path.dirname(dstpath);
          pathExists(dir, (err2, dirExists) => {
            if (err2)
              return callback(err2);
            if (dirExists)
              return makeLink(srcpath, dstpath);
            mkdir.mkdirs(dir, (err3) => {
              if (err3)
                return callback(err3);
              makeLink(srcpath, dstpath);
            });
          });
        });
      });
    }
    function createLinkSync(srcpath, dstpath) {
      let dstStat;
      try {
        dstStat = fs.lstatSync(dstpath);
      } catch (e) {
      }
      try {
        const srcStat = fs.lstatSync(srcpath);
        if (dstStat && areIdentical(srcStat, dstStat))
          return;
      } catch (err) {
        err.message = err.message.replace("lstat", "ensureLink");
        throw err;
      }
      const dir = path.dirname(dstpath);
      const dirExists = fs.existsSync(dir);
      if (dirExists)
        return fs.linkSync(srcpath, dstpath);
      mkdir.mkdirsSync(dir);
      return fs.linkSync(srcpath, dstpath);
    }
    module2.exports = {
      createLink: u(createLink),
      createLinkSync
    };
  }
});

// node_modules/@publishkit/pklib/node_modules/fs-extra/lib/ensure/symlink-paths.js
var require_symlink_paths = __commonJS({
  "node_modules/@publishkit/pklib/node_modules/fs-extra/lib/ensure/symlink-paths.js"(exports, module2) {
    "use strict";
    var path = require("path");
    var fs = require_graceful_fs();
    var pathExists = require_path_exists().pathExists;
    function symlinkPaths(srcpath, dstpath, callback) {
      if (path.isAbsolute(srcpath)) {
        return fs.lstat(srcpath, (err) => {
          if (err) {
            err.message = err.message.replace("lstat", "ensureSymlink");
            return callback(err);
          }
          return callback(null, {
            toCwd: srcpath,
            toDst: srcpath
          });
        });
      } else {
        const dstdir = path.dirname(dstpath);
        const relativeToDst = path.join(dstdir, srcpath);
        return pathExists(relativeToDst, (err, exists) => {
          if (err)
            return callback(err);
          if (exists) {
            return callback(null, {
              toCwd: relativeToDst,
              toDst: srcpath
            });
          } else {
            return fs.lstat(srcpath, (err2) => {
              if (err2) {
                err2.message = err2.message.replace("lstat", "ensureSymlink");
                return callback(err2);
              }
              return callback(null, {
                toCwd: srcpath,
                toDst: path.relative(dstdir, srcpath)
              });
            });
          }
        });
      }
    }
    function symlinkPathsSync(srcpath, dstpath) {
      let exists;
      if (path.isAbsolute(srcpath)) {
        exists = fs.existsSync(srcpath);
        if (!exists)
          throw new Error("absolute srcpath does not exist");
        return {
          toCwd: srcpath,
          toDst: srcpath
        };
      } else {
        const dstdir = path.dirname(dstpath);
        const relativeToDst = path.join(dstdir, srcpath);
        exists = fs.existsSync(relativeToDst);
        if (exists) {
          return {
            toCwd: relativeToDst,
            toDst: srcpath
          };
        } else {
          exists = fs.existsSync(srcpath);
          if (!exists)
            throw new Error("relative srcpath does not exist");
          return {
            toCwd: srcpath,
            toDst: path.relative(dstdir, srcpath)
          };
        }
      }
    }
    module2.exports = {
      symlinkPaths,
      symlinkPathsSync
    };
  }
});

// node_modules/@publishkit/pklib/node_modules/fs-extra/lib/ensure/symlink-type.js
var require_symlink_type = __commonJS({
  "node_modules/@publishkit/pklib/node_modules/fs-extra/lib/ensure/symlink-type.js"(exports, module2) {
    "use strict";
    var fs = require_graceful_fs();
    function symlinkType(srcpath, type, callback) {
      callback = typeof type === "function" ? type : callback;
      type = typeof type === "function" ? false : type;
      if (type)
        return callback(null, type);
      fs.lstat(srcpath, (err, stats) => {
        if (err)
          return callback(null, "file");
        type = stats && stats.isDirectory() ? "dir" : "file";
        callback(null, type);
      });
    }
    function symlinkTypeSync(srcpath, type) {
      let stats;
      if (type)
        return type;
      try {
        stats = fs.lstatSync(srcpath);
      } catch (e) {
        return "file";
      }
      return stats && stats.isDirectory() ? "dir" : "file";
    }
    module2.exports = {
      symlinkType,
      symlinkTypeSync
    };
  }
});

// node_modules/@publishkit/pklib/node_modules/fs-extra/lib/ensure/symlink.js
var require_symlink = __commonJS({
  "node_modules/@publishkit/pklib/node_modules/fs-extra/lib/ensure/symlink.js"(exports, module2) {
    "use strict";
    var u = require_universalify().fromCallback;
    var path = require("path");
    var fs = require_fs();
    var _mkdirs = require_mkdirs();
    var mkdirs = _mkdirs.mkdirs;
    var mkdirsSync = _mkdirs.mkdirsSync;
    var _symlinkPaths = require_symlink_paths();
    var symlinkPaths = _symlinkPaths.symlinkPaths;
    var symlinkPathsSync = _symlinkPaths.symlinkPathsSync;
    var _symlinkType = require_symlink_type();
    var symlinkType = _symlinkType.symlinkType;
    var symlinkTypeSync = _symlinkType.symlinkTypeSync;
    var pathExists = require_path_exists().pathExists;
    var { areIdentical } = require_stat();
    function createSymlink(srcpath, dstpath, type, callback) {
      callback = typeof type === "function" ? type : callback;
      type = typeof type === "function" ? false : type;
      fs.lstat(dstpath, (err, stats) => {
        if (!err && stats.isSymbolicLink()) {
          Promise.all([
            fs.stat(srcpath),
            fs.stat(dstpath)
          ]).then(([srcStat, dstStat]) => {
            if (areIdentical(srcStat, dstStat))
              return callback(null);
            _createSymlink(srcpath, dstpath, type, callback);
          });
        } else
          _createSymlink(srcpath, dstpath, type, callback);
      });
    }
    function _createSymlink(srcpath, dstpath, type, callback) {
      symlinkPaths(srcpath, dstpath, (err, relative) => {
        if (err)
          return callback(err);
        srcpath = relative.toDst;
        symlinkType(relative.toCwd, type, (err2, type2) => {
          if (err2)
            return callback(err2);
          const dir = path.dirname(dstpath);
          pathExists(dir, (err3, dirExists) => {
            if (err3)
              return callback(err3);
            if (dirExists)
              return fs.symlink(srcpath, dstpath, type2, callback);
            mkdirs(dir, (err4) => {
              if (err4)
                return callback(err4);
              fs.symlink(srcpath, dstpath, type2, callback);
            });
          });
        });
      });
    }
    function createSymlinkSync(srcpath, dstpath, type) {
      let stats;
      try {
        stats = fs.lstatSync(dstpath);
      } catch (e) {
      }
      if (stats && stats.isSymbolicLink()) {
        const srcStat = fs.statSync(srcpath);
        const dstStat = fs.statSync(dstpath);
        if (areIdentical(srcStat, dstStat))
          return;
      }
      const relative = symlinkPathsSync(srcpath, dstpath);
      srcpath = relative.toDst;
      type = symlinkTypeSync(relative.toCwd, type);
      const dir = path.dirname(dstpath);
      const exists = fs.existsSync(dir);
      if (exists)
        return fs.symlinkSync(srcpath, dstpath, type);
      mkdirsSync(dir);
      return fs.symlinkSync(srcpath, dstpath, type);
    }
    module2.exports = {
      createSymlink: u(createSymlink),
      createSymlinkSync
    };
  }
});

// node_modules/@publishkit/pklib/node_modules/fs-extra/lib/ensure/index.js
var require_ensure = __commonJS({
  "node_modules/@publishkit/pklib/node_modules/fs-extra/lib/ensure/index.js"(exports, module2) {
    "use strict";
    var { createFile, createFileSync } = require_file();
    var { createLink, createLinkSync } = require_link();
    var { createSymlink, createSymlinkSync } = require_symlink();
    module2.exports = {
      createFile,
      createFileSync,
      ensureFile: createFile,
      ensureFileSync: createFileSync,
      createLink,
      createLinkSync,
      ensureLink: createLink,
      ensureLinkSync: createLinkSync,
      createSymlink,
      createSymlinkSync,
      ensureSymlink: createSymlink,
      ensureSymlinkSync: createSymlinkSync
    };
  }
});

// node_modules/jsonfile/utils.js
var require_utils2 = __commonJS({
  "node_modules/jsonfile/utils.js"(exports, module2) {
    function stringify(obj, { EOL = "\n", finalEOL = true, replacer = null, spaces } = {}) {
      const EOF = finalEOL ? EOL : "";
      const str = JSON.stringify(obj, replacer, spaces);
      return str.replace(/\n/g, EOL) + EOF;
    }
    function stripBom(content) {
      if (Buffer.isBuffer(content))
        content = content.toString("utf8");
      return content.replace(/^\uFEFF/, "");
    }
    module2.exports = { stringify, stripBom };
  }
});

// node_modules/jsonfile/index.js
var require_jsonfile = __commonJS({
  "node_modules/jsonfile/index.js"(exports, module2) {
    var _fs;
    try {
      _fs = require_graceful_fs();
    } catch (_) {
      _fs = require("fs");
    }
    var universalify = require_universalify();
    var { stringify, stripBom } = require_utils2();
    async function _readFile(file, options = {}) {
      if (typeof options === "string") {
        options = { encoding: options };
      }
      const fs = options.fs || _fs;
      const shouldThrow = "throws" in options ? options.throws : true;
      let data = await universalify.fromCallback(fs.readFile)(file, options);
      data = stripBom(data);
      let obj;
      try {
        obj = JSON.parse(data, options ? options.reviver : null);
      } catch (err) {
        if (shouldThrow) {
          err.message = `${file}: ${err.message}`;
          throw err;
        } else {
          return null;
        }
      }
      return obj;
    }
    var readFile = universalify.fromPromise(_readFile);
    function readFileSync(file, options = {}) {
      if (typeof options === "string") {
        options = { encoding: options };
      }
      const fs = options.fs || _fs;
      const shouldThrow = "throws" in options ? options.throws : true;
      try {
        let content = fs.readFileSync(file, options);
        content = stripBom(content);
        return JSON.parse(content, options.reviver);
      } catch (err) {
        if (shouldThrow) {
          err.message = `${file}: ${err.message}`;
          throw err;
        } else {
          return null;
        }
      }
    }
    async function _writeFile(file, obj, options = {}) {
      const fs = options.fs || _fs;
      const str = stringify(obj, options);
      await universalify.fromCallback(fs.writeFile)(file, str, options);
    }
    var writeFile = universalify.fromPromise(_writeFile);
    function writeFileSync(file, obj, options = {}) {
      const fs = options.fs || _fs;
      const str = stringify(obj, options);
      return fs.writeFileSync(file, str, options);
    }
    var jsonfile = {
      readFile,
      readFileSync,
      writeFile,
      writeFileSync
    };
    module2.exports = jsonfile;
  }
});

// node_modules/@publishkit/pklib/node_modules/fs-extra/lib/json/jsonfile.js
var require_jsonfile2 = __commonJS({
  "node_modules/@publishkit/pklib/node_modules/fs-extra/lib/json/jsonfile.js"(exports, module2) {
    "use strict";
    var jsonFile = require_jsonfile();
    module2.exports = {
      readJson: jsonFile.readFile,
      readJsonSync: jsonFile.readFileSync,
      writeJson: jsonFile.writeFile,
      writeJsonSync: jsonFile.writeFileSync
    };
  }
});

// node_modules/@publishkit/pklib/node_modules/fs-extra/lib/output-file/index.js
var require_output_file = __commonJS({
  "node_modules/@publishkit/pklib/node_modules/fs-extra/lib/output-file/index.js"(exports, module2) {
    "use strict";
    var u = require_universalify().fromCallback;
    var fs = require_graceful_fs();
    var path = require("path");
    var mkdir = require_mkdirs();
    var pathExists = require_path_exists().pathExists;
    function outputFile(file, data, encoding, callback) {
      if (typeof encoding === "function") {
        callback = encoding;
        encoding = "utf8";
      }
      const dir = path.dirname(file);
      pathExists(dir, (err, itDoes) => {
        if (err)
          return callback(err);
        if (itDoes)
          return fs.writeFile(file, data, encoding, callback);
        mkdir.mkdirs(dir, (err2) => {
          if (err2)
            return callback(err2);
          fs.writeFile(file, data, encoding, callback);
        });
      });
    }
    function outputFileSync(file, ...args) {
      const dir = path.dirname(file);
      if (fs.existsSync(dir)) {
        return fs.writeFileSync(file, ...args);
      }
      mkdir.mkdirsSync(dir);
      fs.writeFileSync(file, ...args);
    }
    module2.exports = {
      outputFile: u(outputFile),
      outputFileSync
    };
  }
});

// node_modules/@publishkit/pklib/node_modules/fs-extra/lib/json/output-json.js
var require_output_json = __commonJS({
  "node_modules/@publishkit/pklib/node_modules/fs-extra/lib/json/output-json.js"(exports, module2) {
    "use strict";
    var { stringify } = require_utils2();
    var { outputFile } = require_output_file();
    async function outputJson(file, data, options = {}) {
      const str = stringify(data, options);
      await outputFile(file, str, options);
    }
    module2.exports = outputJson;
  }
});

// node_modules/@publishkit/pklib/node_modules/fs-extra/lib/json/output-json-sync.js
var require_output_json_sync = __commonJS({
  "node_modules/@publishkit/pklib/node_modules/fs-extra/lib/json/output-json-sync.js"(exports, module2) {
    "use strict";
    var { stringify } = require_utils2();
    var { outputFileSync } = require_output_file();
    function outputJsonSync(file, data, options) {
      const str = stringify(data, options);
      outputFileSync(file, str, options);
    }
    module2.exports = outputJsonSync;
  }
});

// node_modules/@publishkit/pklib/node_modules/fs-extra/lib/json/index.js
var require_json = __commonJS({
  "node_modules/@publishkit/pklib/node_modules/fs-extra/lib/json/index.js"(exports, module2) {
    "use strict";
    var u = require_universalify().fromPromise;
    var jsonFile = require_jsonfile2();
    jsonFile.outputJson = u(require_output_json());
    jsonFile.outputJsonSync = require_output_json_sync();
    jsonFile.outputJSON = jsonFile.outputJson;
    jsonFile.outputJSONSync = jsonFile.outputJsonSync;
    jsonFile.writeJSON = jsonFile.writeJson;
    jsonFile.writeJSONSync = jsonFile.writeJsonSync;
    jsonFile.readJSON = jsonFile.readJson;
    jsonFile.readJSONSync = jsonFile.readJsonSync;
    module2.exports = jsonFile;
  }
});

// node_modules/@publishkit/pklib/node_modules/fs-extra/lib/move/move.js
var require_move = __commonJS({
  "node_modules/@publishkit/pklib/node_modules/fs-extra/lib/move/move.js"(exports, module2) {
    "use strict";
    var fs = require_graceful_fs();
    var path = require("path");
    var copy = require_copy2().copy;
    var remove = require_remove().remove;
    var mkdirp = require_mkdirs().mkdirp;
    var pathExists = require_path_exists().pathExists;
    var stat = require_stat();
    function move(src, dest, opts, cb) {
      if (typeof opts === "function") {
        cb = opts;
        opts = {};
      }
      opts = opts || {};
      const overwrite = opts.overwrite || opts.clobber || false;
      stat.checkPaths(src, dest, "move", opts, (err, stats) => {
        if (err)
          return cb(err);
        const { srcStat, isChangingCase = false } = stats;
        stat.checkParentPaths(src, srcStat, dest, "move", (err2) => {
          if (err2)
            return cb(err2);
          if (isParentRoot(dest))
            return doRename(src, dest, overwrite, isChangingCase, cb);
          mkdirp(path.dirname(dest), (err3) => {
            if (err3)
              return cb(err3);
            return doRename(src, dest, overwrite, isChangingCase, cb);
          });
        });
      });
    }
    function isParentRoot(dest) {
      const parent = path.dirname(dest);
      const parsedPath = path.parse(parent);
      return parsedPath.root === parent;
    }
    function doRename(src, dest, overwrite, isChangingCase, cb) {
      if (isChangingCase)
        return rename(src, dest, overwrite, cb);
      if (overwrite) {
        return remove(dest, (err) => {
          if (err)
            return cb(err);
          return rename(src, dest, overwrite, cb);
        });
      }
      pathExists(dest, (err, destExists) => {
        if (err)
          return cb(err);
        if (destExists)
          return cb(new Error("dest already exists."));
        return rename(src, dest, overwrite, cb);
      });
    }
    function rename(src, dest, overwrite, cb) {
      fs.rename(src, dest, (err) => {
        if (!err)
          return cb();
        if (err.code !== "EXDEV")
          return cb(err);
        return moveAcrossDevice(src, dest, overwrite, cb);
      });
    }
    function moveAcrossDevice(src, dest, overwrite, cb) {
      const opts = {
        overwrite,
        errorOnExist: true
      };
      copy(src, dest, opts, (err) => {
        if (err)
          return cb(err);
        return remove(src, cb);
      });
    }
    module2.exports = move;
  }
});

// node_modules/@publishkit/pklib/node_modules/fs-extra/lib/move/move-sync.js
var require_move_sync = __commonJS({
  "node_modules/@publishkit/pklib/node_modules/fs-extra/lib/move/move-sync.js"(exports, module2) {
    "use strict";
    var fs = require_graceful_fs();
    var path = require("path");
    var copySync = require_copy2().copySync;
    var removeSync = require_remove().removeSync;
    var mkdirpSync = require_mkdirs().mkdirpSync;
    var stat = require_stat();
    function moveSync(src, dest, opts) {
      opts = opts || {};
      const overwrite = opts.overwrite || opts.clobber || false;
      const { srcStat, isChangingCase = false } = stat.checkPathsSync(src, dest, "move", opts);
      stat.checkParentPathsSync(src, srcStat, dest, "move");
      if (!isParentRoot(dest))
        mkdirpSync(path.dirname(dest));
      return doRename(src, dest, overwrite, isChangingCase);
    }
    function isParentRoot(dest) {
      const parent = path.dirname(dest);
      const parsedPath = path.parse(parent);
      return parsedPath.root === parent;
    }
    function doRename(src, dest, overwrite, isChangingCase) {
      if (isChangingCase)
        return rename(src, dest, overwrite);
      if (overwrite) {
        removeSync(dest);
        return rename(src, dest, overwrite);
      }
      if (fs.existsSync(dest))
        throw new Error("dest already exists.");
      return rename(src, dest, overwrite);
    }
    function rename(src, dest, overwrite) {
      try {
        fs.renameSync(src, dest);
      } catch (err) {
        if (err.code !== "EXDEV")
          throw err;
        return moveAcrossDevice(src, dest, overwrite);
      }
    }
    function moveAcrossDevice(src, dest, overwrite) {
      const opts = {
        overwrite,
        errorOnExist: true
      };
      copySync(src, dest, opts);
      return removeSync(src);
    }
    module2.exports = moveSync;
  }
});

// node_modules/@publishkit/pklib/node_modules/fs-extra/lib/move/index.js
var require_move2 = __commonJS({
  "node_modules/@publishkit/pklib/node_modules/fs-extra/lib/move/index.js"(exports, module2) {
    "use strict";
    var u = require_universalify().fromCallback;
    module2.exports = {
      move: u(require_move()),
      moveSync: require_move_sync()
    };
  }
});

// node_modules/@publishkit/pklib/node_modules/fs-extra/lib/index.js
var require_lib = __commonJS({
  "node_modules/@publishkit/pklib/node_modules/fs-extra/lib/index.js"(exports, module2) {
    "use strict";
    module2.exports = {
      ...require_fs(),
      ...require_copy2(),
      ...require_empty(),
      ...require_ensure(),
      ...require_json(),
      ...require_mkdirs(),
      ...require_move2(),
      ...require_output_file(),
      ...require_path_exists(),
      ...require_remove()
    };
  }
});

// node_modules/@publishkit/pklib/node_modules/filesize/dist/filesize.cjs
var require_filesize = __commonJS({
  "node_modules/@publishkit/pklib/node_modules/filesize/dist/filesize.cjs"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ARRAY = "array";
    var BIT = "bit";
    var BITS = "bits";
    var BYTE = "byte";
    var BYTES = "bytes";
    var EMPTY = "";
    var EXPONENT = "exponent";
    var FUNCTION = "function";
    var IEC = "iec";
    var INVALID_NUMBER = "Invalid number";
    var INVALID_ROUND = "Invalid rounding method";
    var JEDEC = "jedec";
    var OBJECT = "object";
    var PERIOD = ".";
    var ROUND = "round";
    var S = "s";
    var SI_KBIT = "kbit";
    var SI_KBYTE = "kB";
    var SPACE = " ";
    var STRING = "string";
    var ZERO = "0";
    var STRINGS = {
      symbol: {
        iec: {
          bits: ["bit", "Kibit", "Mibit", "Gibit", "Tibit", "Pibit", "Eibit", "Zibit", "Yibit"],
          bytes: ["B", "KiB", "MiB", "GiB", "TiB", "PiB", "EiB", "ZiB", "YiB"]
        },
        jedec: {
          bits: ["bit", "Kbit", "Mbit", "Gbit", "Tbit", "Pbit", "Ebit", "Zbit", "Ybit"],
          bytes: ["B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"]
        }
      },
      fullform: {
        iec: ["", "kibi", "mebi", "gibi", "tebi", "pebi", "exbi", "zebi", "yobi"],
        jedec: ["", "kilo", "mega", "giga", "tera", "peta", "exa", "zetta", "yotta"]
      }
    };
    function filesize(arg, {
      bits = false,
      pad = false,
      base = -1,
      round = 2,
      locale = EMPTY,
      localeOptions = {},
      separator = EMPTY,
      spacer = SPACE,
      symbols = {},
      standard = EMPTY,
      output = STRING,
      fullform = false,
      fullforms = [],
      exponent = -1,
      roundingMethod = ROUND,
      precision = 0
    } = {}) {
      let e = exponent, num = Number(arg), result = [], val = 0, u = EMPTY;
      if (base === -1 && standard.length === 0) {
        base = 10;
        standard = JEDEC;
      } else if (base === -1 && standard.length > 0) {
        standard = standard === IEC ? IEC : JEDEC;
        base = standard === IEC ? 2 : 10;
      } else {
        base = base === 2 ? 2 : 10;
        standard = base === 10 ? JEDEC : standard === JEDEC ? JEDEC : IEC;
      }
      const ceil = base === 10 ? 1e3 : 1024, full = fullform === true, neg = num < 0, roundingFunc = Math[roundingMethod];
      if (typeof arg !== "bigint" && isNaN(arg)) {
        throw new TypeError(INVALID_NUMBER);
      }
      if (typeof roundingFunc !== FUNCTION) {
        throw new TypeError(INVALID_ROUND);
      }
      if (neg) {
        num = -num;
      }
      if (e === -1 || isNaN(e)) {
        e = Math.floor(Math.log(num) / Math.log(ceil));
        if (e < 0) {
          e = 0;
        }
      }
      if (e > 8) {
        if (precision > 0) {
          precision += 8 - e;
        }
        e = 8;
      }
      if (output === EXPONENT) {
        return e;
      }
      if (num === 0) {
        result[0] = 0;
        u = result[1] = STRINGS.symbol[standard][bits ? BITS : BYTES][e];
      } else {
        val = num / (base === 2 ? Math.pow(2, e * 10) : Math.pow(1e3, e));
        if (bits) {
          val = val * 8;
          if (val >= ceil && e < 8) {
            val = val / ceil;
            e++;
          }
        }
        const p = Math.pow(10, e > 0 ? round : 0);
        result[0] = roundingFunc(val * p) / p;
        if (result[0] === ceil && e < 8 && exponent === -1) {
          result[0] = 1;
          e++;
        }
        u = result[1] = base === 10 && e === 1 ? bits ? SI_KBIT : SI_KBYTE : STRINGS.symbol[standard][bits ? BITS : BYTES][e];
      }
      if (neg) {
        result[0] = -result[0];
      }
      if (precision > 0) {
        result[0] = result[0].toPrecision(precision);
      }
      result[1] = symbols[result[1]] || result[1];
      if (locale === true) {
        result[0] = result[0].toLocaleString();
      } else if (locale.length > 0) {
        result[0] = result[0].toLocaleString(locale, localeOptions);
      } else if (separator.length > 0) {
        result[0] = result[0].toString().replace(PERIOD, separator);
      }
      if (pad && Number.isInteger(result[0]) === false && round > 0) {
        const x = separator || PERIOD, tmp = result[0].toString().split(x), s = tmp[1] || EMPTY, l = s.length, n = round - l;
        result[0] = `${tmp[0]}${x}${s.padEnd(l + n, ZERO)}`;
      }
      if (full) {
        result[1] = fullforms[e] ? fullforms[e] : STRINGS.fullform[standard][e] + (bits ? BIT : BYTE) + (result[0] === 1 ? EMPTY : S);
      }
      return output === ARRAY ? result : output === OBJECT ? {
        value: result[0],
        symbol: result[1],
        exponent: e,
        unit: u
      } : result.join(spacer);
    }
    function partial({
      bits = false,
      pad = false,
      base = -1,
      round = 2,
      locale = EMPTY,
      localeOptions = {},
      separator = EMPTY,
      spacer = SPACE,
      symbols = {},
      standard = EMPTY,
      output = STRING,
      fullform = false,
      fullforms = [],
      exponent = -1,
      roundingMethod = ROUND,
      precision = 0
    } = {}) {
      return (arg) => filesize(arg, {
        bits,
        pad,
        base,
        round,
        locale,
        localeOptions,
        separator,
        spacer,
        symbols,
        standard,
        output,
        fullform,
        fullforms,
        exponent,
        roundingMethod,
        precision
      });
    }
    exports.filesize = filesize;
    exports.partial = partial;
  }
});

// node_modules/js-yaml/lib/js-yaml/common.js
var require_common = __commonJS({
  "node_modules/js-yaml/lib/js-yaml/common.js"(exports, module2) {
    "use strict";
    function isNothing(subject) {
      return typeof subject === "undefined" || subject === null;
    }
    function isObject(subject) {
      return typeof subject === "object" && subject !== null;
    }
    function toArray(sequence) {
      if (Array.isArray(sequence))
        return sequence;
      else if (isNothing(sequence))
        return [];
      return [sequence];
    }
    function extend(target, source) {
      var index, length, key, sourceKeys;
      if (source) {
        sourceKeys = Object.keys(source);
        for (index = 0, length = sourceKeys.length; index < length; index += 1) {
          key = sourceKeys[index];
          target[key] = source[key];
        }
      }
      return target;
    }
    function repeat(string, count) {
      var result = "", cycle;
      for (cycle = 0; cycle < count; cycle += 1) {
        result += string;
      }
      return result;
    }
    function isNegativeZero(number) {
      return number === 0 && Number.NEGATIVE_INFINITY === 1 / number;
    }
    module2.exports.isNothing = isNothing;
    module2.exports.isObject = isObject;
    module2.exports.toArray = toArray;
    module2.exports.repeat = repeat;
    module2.exports.isNegativeZero = isNegativeZero;
    module2.exports.extend = extend;
  }
});

// node_modules/js-yaml/lib/js-yaml/exception.js
var require_exception = __commonJS({
  "node_modules/js-yaml/lib/js-yaml/exception.js"(exports, module2) {
    "use strict";
    function YAMLException(reason, mark) {
      Error.call(this);
      this.name = "YAMLException";
      this.reason = reason;
      this.mark = mark;
      this.message = (this.reason || "(unknown reason)") + (this.mark ? " " + this.mark.toString() : "");
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, this.constructor);
      } else {
        this.stack = new Error().stack || "";
      }
    }
    YAMLException.prototype = Object.create(Error.prototype);
    YAMLException.prototype.constructor = YAMLException;
    YAMLException.prototype.toString = function toString(compact) {
      var result = this.name + ": ";
      result += this.reason || "(unknown reason)";
      if (!compact && this.mark) {
        result += " " + this.mark.toString();
      }
      return result;
    };
    module2.exports = YAMLException;
  }
});

// node_modules/js-yaml/lib/js-yaml/mark.js
var require_mark = __commonJS({
  "node_modules/js-yaml/lib/js-yaml/mark.js"(exports, module2) {
    "use strict";
    var common = require_common();
    function Mark(name, buffer, position, line, column) {
      this.name = name;
      this.buffer = buffer;
      this.position = position;
      this.line = line;
      this.column = column;
    }
    Mark.prototype.getSnippet = function getSnippet(indent, maxLength) {
      var head, start, tail, end, snippet;
      if (!this.buffer)
        return null;
      indent = indent || 4;
      maxLength = maxLength || 75;
      head = "";
      start = this.position;
      while (start > 0 && "\0\r\n\x85\u2028\u2029".indexOf(this.buffer.charAt(start - 1)) === -1) {
        start -= 1;
        if (this.position - start > maxLength / 2 - 1) {
          head = " ... ";
          start += 5;
          break;
        }
      }
      tail = "";
      end = this.position;
      while (end < this.buffer.length && "\0\r\n\x85\u2028\u2029".indexOf(this.buffer.charAt(end)) === -1) {
        end += 1;
        if (end - this.position > maxLength / 2 - 1) {
          tail = " ... ";
          end -= 5;
          break;
        }
      }
      snippet = this.buffer.slice(start, end);
      return common.repeat(" ", indent) + head + snippet + tail + "\n" + common.repeat(" ", indent + this.position - start + head.length) + "^";
    };
    Mark.prototype.toString = function toString(compact) {
      var snippet, where = "";
      if (this.name) {
        where += 'in "' + this.name + '" ';
      }
      where += "at line " + (this.line + 1) + ", column " + (this.column + 1);
      if (!compact) {
        snippet = this.getSnippet();
        if (snippet) {
          where += ":\n" + snippet;
        }
      }
      return where;
    };
    module2.exports = Mark;
  }
});

// node_modules/js-yaml/lib/js-yaml/type.js
var require_type = __commonJS({
  "node_modules/js-yaml/lib/js-yaml/type.js"(exports, module2) {
    "use strict";
    var YAMLException = require_exception();
    var TYPE_CONSTRUCTOR_OPTIONS = [
      "kind",
      "resolve",
      "construct",
      "instanceOf",
      "predicate",
      "represent",
      "defaultStyle",
      "styleAliases"
    ];
    var YAML_NODE_KINDS = [
      "scalar",
      "sequence",
      "mapping"
    ];
    function compileStyleAliases(map) {
      var result = {};
      if (map !== null) {
        Object.keys(map).forEach(function(style) {
          map[style].forEach(function(alias) {
            result[String(alias)] = style;
          });
        });
      }
      return result;
    }
    function Type(tag, options) {
      options = options || {};
      Object.keys(options).forEach(function(name) {
        if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {
          throw new YAMLException('Unknown option "' + name + '" is met in definition of "' + tag + '" YAML type.');
        }
      });
      this.tag = tag;
      this.kind = options["kind"] || null;
      this.resolve = options["resolve"] || function() {
        return true;
      };
      this.construct = options["construct"] || function(data) {
        return data;
      };
      this.instanceOf = options["instanceOf"] || null;
      this.predicate = options["predicate"] || null;
      this.represent = options["represent"] || null;
      this.defaultStyle = options["defaultStyle"] || null;
      this.styleAliases = compileStyleAliases(options["styleAliases"] || null);
      if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {
        throw new YAMLException('Unknown kind "' + this.kind + '" is specified for "' + tag + '" YAML type.');
      }
    }
    module2.exports = Type;
  }
});

// node_modules/js-yaml/lib/js-yaml/schema.js
var require_schema = __commonJS({
  "node_modules/js-yaml/lib/js-yaml/schema.js"(exports, module2) {
    "use strict";
    var common = require_common();
    var YAMLException = require_exception();
    var Type = require_type();
    function compileList(schema, name, result) {
      var exclude = [];
      schema.include.forEach(function(includedSchema) {
        result = compileList(includedSchema, name, result);
      });
      schema[name].forEach(function(currentType) {
        result.forEach(function(previousType, previousIndex) {
          if (previousType.tag === currentType.tag && previousType.kind === currentType.kind) {
            exclude.push(previousIndex);
          }
        });
        result.push(currentType);
      });
      return result.filter(function(type, index) {
        return exclude.indexOf(index) === -1;
      });
    }
    function compileMap() {
      var result = {
        scalar: {},
        sequence: {},
        mapping: {},
        fallback: {}
      }, index, length;
      function collectType(type) {
        result[type.kind][type.tag] = result["fallback"][type.tag] = type;
      }
      for (index = 0, length = arguments.length; index < length; index += 1) {
        arguments[index].forEach(collectType);
      }
      return result;
    }
    function Schema(definition) {
      this.include = definition.include || [];
      this.implicit = definition.implicit || [];
      this.explicit = definition.explicit || [];
      this.implicit.forEach(function(type) {
        if (type.loadKind && type.loadKind !== "scalar") {
          throw new YAMLException("There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.");
        }
      });
      this.compiledImplicit = compileList(this, "implicit", []);
      this.compiledExplicit = compileList(this, "explicit", []);
      this.compiledTypeMap = compileMap(this.compiledImplicit, this.compiledExplicit);
    }
    Schema.DEFAULT = null;
    Schema.create = function createSchema() {
      var schemas, types;
      switch (arguments.length) {
        case 1:
          schemas = Schema.DEFAULT;
          types = arguments[0];
          break;
        case 2:
          schemas = arguments[0];
          types = arguments[1];
          break;
        default:
          throw new YAMLException("Wrong number of arguments for Schema.create function");
      }
      schemas = common.toArray(schemas);
      types = common.toArray(types);
      if (!schemas.every(function(schema) {
        return schema instanceof Schema;
      })) {
        throw new YAMLException("Specified list of super schemas (or a single Schema object) contains a non-Schema object.");
      }
      if (!types.every(function(type) {
        return type instanceof Type;
      })) {
        throw new YAMLException("Specified list of YAML types (or a single Type object) contains a non-Type object.");
      }
      return new Schema({
        include: schemas,
        explicit: types
      });
    };
    module2.exports = Schema;
  }
});

// node_modules/js-yaml/lib/js-yaml/type/str.js
var require_str = __commonJS({
  "node_modules/js-yaml/lib/js-yaml/type/str.js"(exports, module2) {
    "use strict";
    var Type = require_type();
    module2.exports = new Type("tag:yaml.org,2002:str", {
      kind: "scalar",
      construct: function(data) {
        return data !== null ? data : "";
      }
    });
  }
});

// node_modules/js-yaml/lib/js-yaml/type/seq.js
var require_seq = __commonJS({
  "node_modules/js-yaml/lib/js-yaml/type/seq.js"(exports, module2) {
    "use strict";
    var Type = require_type();
    module2.exports = new Type("tag:yaml.org,2002:seq", {
      kind: "sequence",
      construct: function(data) {
        return data !== null ? data : [];
      }
    });
  }
});

// node_modules/js-yaml/lib/js-yaml/type/map.js
var require_map = __commonJS({
  "node_modules/js-yaml/lib/js-yaml/type/map.js"(exports, module2) {
    "use strict";
    var Type = require_type();
    module2.exports = new Type("tag:yaml.org,2002:map", {
      kind: "mapping",
      construct: function(data) {
        return data !== null ? data : {};
      }
    });
  }
});

// node_modules/js-yaml/lib/js-yaml/schema/failsafe.js
var require_failsafe = __commonJS({
  "node_modules/js-yaml/lib/js-yaml/schema/failsafe.js"(exports, module2) {
    "use strict";
    var Schema = require_schema();
    module2.exports = new Schema({
      explicit: [
        require_str(),
        require_seq(),
        require_map()
      ]
    });
  }
});

// node_modules/js-yaml/lib/js-yaml/type/null.js
var require_null = __commonJS({
  "node_modules/js-yaml/lib/js-yaml/type/null.js"(exports, module2) {
    "use strict";
    var Type = require_type();
    function resolveYamlNull(data) {
      if (data === null)
        return true;
      var max = data.length;
      return max === 1 && data === "~" || max === 4 && (data === "null" || data === "Null" || data === "NULL");
    }
    function constructYamlNull() {
      return null;
    }
    function isNull(object) {
      return object === null;
    }
    module2.exports = new Type("tag:yaml.org,2002:null", {
      kind: "scalar",
      resolve: resolveYamlNull,
      construct: constructYamlNull,
      predicate: isNull,
      represent: {
        canonical: function() {
          return "~";
        },
        lowercase: function() {
          return "null";
        },
        uppercase: function() {
          return "NULL";
        },
        camelcase: function() {
          return "Null";
        }
      },
      defaultStyle: "lowercase"
    });
  }
});

// node_modules/js-yaml/lib/js-yaml/type/bool.js
var require_bool = __commonJS({
  "node_modules/js-yaml/lib/js-yaml/type/bool.js"(exports, module2) {
    "use strict";
    var Type = require_type();
    function resolveYamlBoolean(data) {
      if (data === null)
        return false;
      var max = data.length;
      return max === 4 && (data === "true" || data === "True" || data === "TRUE") || max === 5 && (data === "false" || data === "False" || data === "FALSE");
    }
    function constructYamlBoolean(data) {
      return data === "true" || data === "True" || data === "TRUE";
    }
    function isBoolean(object) {
      return Object.prototype.toString.call(object) === "[object Boolean]";
    }
    module2.exports = new Type("tag:yaml.org,2002:bool", {
      kind: "scalar",
      resolve: resolveYamlBoolean,
      construct: constructYamlBoolean,
      predicate: isBoolean,
      represent: {
        lowercase: function(object) {
          return object ? "true" : "false";
        },
        uppercase: function(object) {
          return object ? "TRUE" : "FALSE";
        },
        camelcase: function(object) {
          return object ? "True" : "False";
        }
      },
      defaultStyle: "lowercase"
    });
  }
});

// node_modules/js-yaml/lib/js-yaml/type/int.js
var require_int = __commonJS({
  "node_modules/js-yaml/lib/js-yaml/type/int.js"(exports, module2) {
    "use strict";
    var common = require_common();
    var Type = require_type();
    function isHexCode(c) {
      return 48 <= c && c <= 57 || 65 <= c && c <= 70 || 97 <= c && c <= 102;
    }
    function isOctCode(c) {
      return 48 <= c && c <= 55;
    }
    function isDecCode(c) {
      return 48 <= c && c <= 57;
    }
    function resolveYamlInteger(data) {
      if (data === null)
        return false;
      var max = data.length, index = 0, hasDigits = false, ch;
      if (!max)
        return false;
      ch = data[index];
      if (ch === "-" || ch === "+") {
        ch = data[++index];
      }
      if (ch === "0") {
        if (index + 1 === max)
          return true;
        ch = data[++index];
        if (ch === "b") {
          index++;
          for (; index < max; index++) {
            ch = data[index];
            if (ch === "_")
              continue;
            if (ch !== "0" && ch !== "1")
              return false;
            hasDigits = true;
          }
          return hasDigits && ch !== "_";
        }
        if (ch === "x") {
          index++;
          for (; index < max; index++) {
            ch = data[index];
            if (ch === "_")
              continue;
            if (!isHexCode(data.charCodeAt(index)))
              return false;
            hasDigits = true;
          }
          return hasDigits && ch !== "_";
        }
        for (; index < max; index++) {
          ch = data[index];
          if (ch === "_")
            continue;
          if (!isOctCode(data.charCodeAt(index)))
            return false;
          hasDigits = true;
        }
        return hasDigits && ch !== "_";
      }
      if (ch === "_")
        return false;
      for (; index < max; index++) {
        ch = data[index];
        if (ch === "_")
          continue;
        if (ch === ":")
          break;
        if (!isDecCode(data.charCodeAt(index))) {
          return false;
        }
        hasDigits = true;
      }
      if (!hasDigits || ch === "_")
        return false;
      if (ch !== ":")
        return true;
      return /^(:[0-5]?[0-9])+$/.test(data.slice(index));
    }
    function constructYamlInteger(data) {
      var value = data, sign = 1, ch, base, digits = [];
      if (value.indexOf("_") !== -1) {
        value = value.replace(/_/g, "");
      }
      ch = value[0];
      if (ch === "-" || ch === "+") {
        if (ch === "-")
          sign = -1;
        value = value.slice(1);
        ch = value[0];
      }
      if (value === "0")
        return 0;
      if (ch === "0") {
        if (value[1] === "b")
          return sign * parseInt(value.slice(2), 2);
        if (value[1] === "x")
          return sign * parseInt(value, 16);
        return sign * parseInt(value, 8);
      }
      if (value.indexOf(":") !== -1) {
        value.split(":").forEach(function(v) {
          digits.unshift(parseInt(v, 10));
        });
        value = 0;
        base = 1;
        digits.forEach(function(d) {
          value += d * base;
          base *= 60;
        });
        return sign * value;
      }
      return sign * parseInt(value, 10);
    }
    function isInteger(object) {
      return Object.prototype.toString.call(object) === "[object Number]" && (object % 1 === 0 && !common.isNegativeZero(object));
    }
    module2.exports = new Type("tag:yaml.org,2002:int", {
      kind: "scalar",
      resolve: resolveYamlInteger,
      construct: constructYamlInteger,
      predicate: isInteger,
      represent: {
        binary: function(obj) {
          return obj >= 0 ? "0b" + obj.toString(2) : "-0b" + obj.toString(2).slice(1);
        },
        octal: function(obj) {
          return obj >= 0 ? "0" + obj.toString(8) : "-0" + obj.toString(8).slice(1);
        },
        decimal: function(obj) {
          return obj.toString(10);
        },
        hexadecimal: function(obj) {
          return obj >= 0 ? "0x" + obj.toString(16).toUpperCase() : "-0x" + obj.toString(16).toUpperCase().slice(1);
        }
      },
      defaultStyle: "decimal",
      styleAliases: {
        binary: [2, "bin"],
        octal: [8, "oct"],
        decimal: [10, "dec"],
        hexadecimal: [16, "hex"]
      }
    });
  }
});

// node_modules/js-yaml/lib/js-yaml/type/float.js
var require_float = __commonJS({
  "node_modules/js-yaml/lib/js-yaml/type/float.js"(exports, module2) {
    "use strict";
    var common = require_common();
    var Type = require_type();
    var YAML_FLOAT_PATTERN = new RegExp("^(?:[-+]?(?:0|[1-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$");
    function resolveYamlFloat(data) {
      if (data === null)
        return false;
      if (!YAML_FLOAT_PATTERN.test(data) || data[data.length - 1] === "_") {
        return false;
      }
      return true;
    }
    function constructYamlFloat(data) {
      var value, sign, base, digits;
      value = data.replace(/_/g, "").toLowerCase();
      sign = value[0] === "-" ? -1 : 1;
      digits = [];
      if ("+-".indexOf(value[0]) >= 0) {
        value = value.slice(1);
      }
      if (value === ".inf") {
        return sign === 1 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;
      } else if (value === ".nan") {
        return NaN;
      } else if (value.indexOf(":") >= 0) {
        value.split(":").forEach(function(v) {
          digits.unshift(parseFloat(v, 10));
        });
        value = 0;
        base = 1;
        digits.forEach(function(d) {
          value += d * base;
          base *= 60;
        });
        return sign * value;
      }
      return sign * parseFloat(value, 10);
    }
    var SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;
    function representYamlFloat(object, style) {
      var res;
      if (isNaN(object)) {
        switch (style) {
          case "lowercase":
            return ".nan";
          case "uppercase":
            return ".NAN";
          case "camelcase":
            return ".NaN";
        }
      } else if (Number.POSITIVE_INFINITY === object) {
        switch (style) {
          case "lowercase":
            return ".inf";
          case "uppercase":
            return ".INF";
          case "camelcase":
            return ".Inf";
        }
      } else if (Number.NEGATIVE_INFINITY === object) {
        switch (style) {
          case "lowercase":
            return "-.inf";
          case "uppercase":
            return "-.INF";
          case "camelcase":
            return "-.Inf";
        }
      } else if (common.isNegativeZero(object)) {
        return "-0.0";
      }
      res = object.toString(10);
      return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace("e", ".e") : res;
    }
    function isFloat(object) {
      return Object.prototype.toString.call(object) === "[object Number]" && (object % 1 !== 0 || common.isNegativeZero(object));
    }
    module2.exports = new Type("tag:yaml.org,2002:float", {
      kind: "scalar",
      resolve: resolveYamlFloat,
      construct: constructYamlFloat,
      predicate: isFloat,
      represent: representYamlFloat,
      defaultStyle: "lowercase"
    });
  }
});

// node_modules/js-yaml/lib/js-yaml/schema/json.js
var require_json2 = __commonJS({
  "node_modules/js-yaml/lib/js-yaml/schema/json.js"(exports, module2) {
    "use strict";
    var Schema = require_schema();
    module2.exports = new Schema({
      include: [
        require_failsafe()
      ],
      implicit: [
        require_null(),
        require_bool(),
        require_int(),
        require_float()
      ]
    });
  }
});

// node_modules/js-yaml/lib/js-yaml/schema/core.js
var require_core = __commonJS({
  "node_modules/js-yaml/lib/js-yaml/schema/core.js"(exports, module2) {
    "use strict";
    var Schema = require_schema();
    module2.exports = new Schema({
      include: [
        require_json2()
      ]
    });
  }
});

// node_modules/js-yaml/lib/js-yaml/type/timestamp.js
var require_timestamp = __commonJS({
  "node_modules/js-yaml/lib/js-yaml/type/timestamp.js"(exports, module2) {
    "use strict";
    var Type = require_type();
    var YAML_DATE_REGEXP = new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])$");
    var YAML_TIMESTAMP_REGEXP = new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:[Tt]|[ \\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?$");
    function resolveYamlTimestamp(data) {
      if (data === null)
        return false;
      if (YAML_DATE_REGEXP.exec(data) !== null)
        return true;
      if (YAML_TIMESTAMP_REGEXP.exec(data) !== null)
        return true;
      return false;
    }
    function constructYamlTimestamp(data) {
      var match, year, month, day, hour, minute, second, fraction = 0, delta = null, tz_hour, tz_minute, date;
      match = YAML_DATE_REGEXP.exec(data);
      if (match === null)
        match = YAML_TIMESTAMP_REGEXP.exec(data);
      if (match === null)
        throw new Error("Date resolve error");
      year = +match[1];
      month = +match[2] - 1;
      day = +match[3];
      if (!match[4]) {
        return new Date(Date.UTC(year, month, day));
      }
      hour = +match[4];
      minute = +match[5];
      second = +match[6];
      if (match[7]) {
        fraction = match[7].slice(0, 3);
        while (fraction.length < 3) {
          fraction += "0";
        }
        fraction = +fraction;
      }
      if (match[9]) {
        tz_hour = +match[10];
        tz_minute = +(match[11] || 0);
        delta = (tz_hour * 60 + tz_minute) * 6e4;
        if (match[9] === "-")
          delta = -delta;
      }
      date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));
      if (delta)
        date.setTime(date.getTime() - delta);
      return date;
    }
    function representYamlTimestamp(object) {
      return object.toISOString();
    }
    module2.exports = new Type("tag:yaml.org,2002:timestamp", {
      kind: "scalar",
      resolve: resolveYamlTimestamp,
      construct: constructYamlTimestamp,
      instanceOf: Date,
      represent: representYamlTimestamp
    });
  }
});

// node_modules/js-yaml/lib/js-yaml/type/merge.js
var require_merge = __commonJS({
  "node_modules/js-yaml/lib/js-yaml/type/merge.js"(exports, module2) {
    "use strict";
    var Type = require_type();
    function resolveYamlMerge(data) {
      return data === "<<" || data === null;
    }
    module2.exports = new Type("tag:yaml.org,2002:merge", {
      kind: "scalar",
      resolve: resolveYamlMerge
    });
  }
});

// node_modules/js-yaml/lib/js-yaml/type/binary.js
var require_binary = __commonJS({
  "node_modules/js-yaml/lib/js-yaml/type/binary.js"(exports, module2) {
    "use strict";
    var NodeBuffer;
    try {
      _require = require;
      NodeBuffer = _require("buffer").Buffer;
    } catch (__) {
    }
    var _require;
    var Type = require_type();
    var BASE64_MAP = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r";
    function resolveYamlBinary(data) {
      if (data === null)
        return false;
      var code, idx, bitlen = 0, max = data.length, map = BASE64_MAP;
      for (idx = 0; idx < max; idx++) {
        code = map.indexOf(data.charAt(idx));
        if (code > 64)
          continue;
        if (code < 0)
          return false;
        bitlen += 6;
      }
      return bitlen % 8 === 0;
    }
    function constructYamlBinary(data) {
      var idx, tailbits, input = data.replace(/[\r\n=]/g, ""), max = input.length, map = BASE64_MAP, bits = 0, result = [];
      for (idx = 0; idx < max; idx++) {
        if (idx % 4 === 0 && idx) {
          result.push(bits >> 16 & 255);
          result.push(bits >> 8 & 255);
          result.push(bits & 255);
        }
        bits = bits << 6 | map.indexOf(input.charAt(idx));
      }
      tailbits = max % 4 * 6;
      if (tailbits === 0) {
        result.push(bits >> 16 & 255);
        result.push(bits >> 8 & 255);
        result.push(bits & 255);
      } else if (tailbits === 18) {
        result.push(bits >> 10 & 255);
        result.push(bits >> 2 & 255);
      } else if (tailbits === 12) {
        result.push(bits >> 4 & 255);
      }
      if (NodeBuffer) {
        return NodeBuffer.from ? NodeBuffer.from(result) : new NodeBuffer(result);
      }
      return result;
    }
    function representYamlBinary(object) {
      var result = "", bits = 0, idx, tail, max = object.length, map = BASE64_MAP;
      for (idx = 0; idx < max; idx++) {
        if (idx % 3 === 0 && idx) {
          result += map[bits >> 18 & 63];
          result += map[bits >> 12 & 63];
          result += map[bits >> 6 & 63];
          result += map[bits & 63];
        }
        bits = (bits << 8) + object[idx];
      }
      tail = max % 3;
      if (tail === 0) {
        result += map[bits >> 18 & 63];
        result += map[bits >> 12 & 63];
        result += map[bits >> 6 & 63];
        result += map[bits & 63];
      } else if (tail === 2) {
        result += map[bits >> 10 & 63];
        result += map[bits >> 4 & 63];
        result += map[bits << 2 & 63];
        result += map[64];
      } else if (tail === 1) {
        result += map[bits >> 2 & 63];
        result += map[bits << 4 & 63];
        result += map[64];
        result += map[64];
      }
      return result;
    }
    function isBinary(object) {
      return NodeBuffer && NodeBuffer.isBuffer(object);
    }
    module2.exports = new Type("tag:yaml.org,2002:binary", {
      kind: "scalar",
      resolve: resolveYamlBinary,
      construct: constructYamlBinary,
      predicate: isBinary,
      represent: representYamlBinary
    });
  }
});

// node_modules/js-yaml/lib/js-yaml/type/omap.js
var require_omap = __commonJS({
  "node_modules/js-yaml/lib/js-yaml/type/omap.js"(exports, module2) {
    "use strict";
    var Type = require_type();
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    var _toString = Object.prototype.toString;
    function resolveYamlOmap(data) {
      if (data === null)
        return true;
      var objectKeys = [], index, length, pair, pairKey, pairHasKey, object = data;
      for (index = 0, length = object.length; index < length; index += 1) {
        pair = object[index];
        pairHasKey = false;
        if (_toString.call(pair) !== "[object Object]")
          return false;
        for (pairKey in pair) {
          if (_hasOwnProperty.call(pair, pairKey)) {
            if (!pairHasKey)
              pairHasKey = true;
            else
              return false;
          }
        }
        if (!pairHasKey)
          return false;
        if (objectKeys.indexOf(pairKey) === -1)
          objectKeys.push(pairKey);
        else
          return false;
      }
      return true;
    }
    function constructYamlOmap(data) {
      return data !== null ? data : [];
    }
    module2.exports = new Type("tag:yaml.org,2002:omap", {
      kind: "sequence",
      resolve: resolveYamlOmap,
      construct: constructYamlOmap
    });
  }
});

// node_modules/js-yaml/lib/js-yaml/type/pairs.js
var require_pairs = __commonJS({
  "node_modules/js-yaml/lib/js-yaml/type/pairs.js"(exports, module2) {
    "use strict";
    var Type = require_type();
    var _toString = Object.prototype.toString;
    function resolveYamlPairs(data) {
      if (data === null)
        return true;
      var index, length, pair, keys, result, object = data;
      result = new Array(object.length);
      for (index = 0, length = object.length; index < length; index += 1) {
        pair = object[index];
        if (_toString.call(pair) !== "[object Object]")
          return false;
        keys = Object.keys(pair);
        if (keys.length !== 1)
          return false;
        result[index] = [keys[0], pair[keys[0]]];
      }
      return true;
    }
    function constructYamlPairs(data) {
      if (data === null)
        return [];
      var index, length, pair, keys, result, object = data;
      result = new Array(object.length);
      for (index = 0, length = object.length; index < length; index += 1) {
        pair = object[index];
        keys = Object.keys(pair);
        result[index] = [keys[0], pair[keys[0]]];
      }
      return result;
    }
    module2.exports = new Type("tag:yaml.org,2002:pairs", {
      kind: "sequence",
      resolve: resolveYamlPairs,
      construct: constructYamlPairs
    });
  }
});

// node_modules/js-yaml/lib/js-yaml/type/set.js
var require_set = __commonJS({
  "node_modules/js-yaml/lib/js-yaml/type/set.js"(exports, module2) {
    "use strict";
    var Type = require_type();
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    function resolveYamlSet(data) {
      if (data === null)
        return true;
      var key, object = data;
      for (key in object) {
        if (_hasOwnProperty.call(object, key)) {
          if (object[key] !== null)
            return false;
        }
      }
      return true;
    }
    function constructYamlSet(data) {
      return data !== null ? data : {};
    }
    module2.exports = new Type("tag:yaml.org,2002:set", {
      kind: "mapping",
      resolve: resolveYamlSet,
      construct: constructYamlSet
    });
  }
});

// node_modules/js-yaml/lib/js-yaml/schema/default_safe.js
var require_default_safe = __commonJS({
  "node_modules/js-yaml/lib/js-yaml/schema/default_safe.js"(exports, module2) {
    "use strict";
    var Schema = require_schema();
    module2.exports = new Schema({
      include: [
        require_core()
      ],
      implicit: [
        require_timestamp(),
        require_merge()
      ],
      explicit: [
        require_binary(),
        require_omap(),
        require_pairs(),
        require_set()
      ]
    });
  }
});

// node_modules/js-yaml/lib/js-yaml/type/js/undefined.js
var require_undefined = __commonJS({
  "node_modules/js-yaml/lib/js-yaml/type/js/undefined.js"(exports, module2) {
    "use strict";
    var Type = require_type();
    function resolveJavascriptUndefined() {
      return true;
    }
    function constructJavascriptUndefined() {
      return void 0;
    }
    function representJavascriptUndefined() {
      return "";
    }
    function isUndefined(object) {
      return typeof object === "undefined";
    }
    module2.exports = new Type("tag:yaml.org,2002:js/undefined", {
      kind: "scalar",
      resolve: resolveJavascriptUndefined,
      construct: constructJavascriptUndefined,
      predicate: isUndefined,
      represent: representJavascriptUndefined
    });
  }
});

// node_modules/js-yaml/lib/js-yaml/type/js/regexp.js
var require_regexp = __commonJS({
  "node_modules/js-yaml/lib/js-yaml/type/js/regexp.js"(exports, module2) {
    "use strict";
    var Type = require_type();
    function resolveJavascriptRegExp(data) {
      if (data === null)
        return false;
      if (data.length === 0)
        return false;
      var regexp = data, tail = /\/([gim]*)$/.exec(data), modifiers = "";
      if (regexp[0] === "/") {
        if (tail)
          modifiers = tail[1];
        if (modifiers.length > 3)
          return false;
        if (regexp[regexp.length - modifiers.length - 1] !== "/")
          return false;
      }
      return true;
    }
    function constructJavascriptRegExp(data) {
      var regexp = data, tail = /\/([gim]*)$/.exec(data), modifiers = "";
      if (regexp[0] === "/") {
        if (tail)
          modifiers = tail[1];
        regexp = regexp.slice(1, regexp.length - modifiers.length - 1);
      }
      return new RegExp(regexp, modifiers);
    }
    function representJavascriptRegExp(object) {
      var result = "/" + object.source + "/";
      if (object.global)
        result += "g";
      if (object.multiline)
        result += "m";
      if (object.ignoreCase)
        result += "i";
      return result;
    }
    function isRegExp(object) {
      return Object.prototype.toString.call(object) === "[object RegExp]";
    }
    module2.exports = new Type("tag:yaml.org,2002:js/regexp", {
      kind: "scalar",
      resolve: resolveJavascriptRegExp,
      construct: constructJavascriptRegExp,
      predicate: isRegExp,
      represent: representJavascriptRegExp
    });
  }
});

// node_modules/js-yaml/lib/js-yaml/type/js/function.js
var require_function = __commonJS({
  "node_modules/js-yaml/lib/js-yaml/type/js/function.js"(exports, module2) {
    "use strict";
    var esprima;
    try {
      _require = require;
      esprima = _require("esprima");
    } catch (_) {
      if (typeof window !== "undefined")
        esprima = window.esprima;
    }
    var _require;
    var Type = require_type();
    function resolveJavascriptFunction(data) {
      if (data === null)
        return false;
      try {
        var source = "(" + data + ")", ast = esprima.parse(source, { range: true });
        if (ast.type !== "Program" || ast.body.length !== 1 || ast.body[0].type !== "ExpressionStatement" || ast.body[0].expression.type !== "ArrowFunctionExpression" && ast.body[0].expression.type !== "FunctionExpression") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    function constructJavascriptFunction(data) {
      var source = "(" + data + ")", ast = esprima.parse(source, { range: true }), params = [], body;
      if (ast.type !== "Program" || ast.body.length !== 1 || ast.body[0].type !== "ExpressionStatement" || ast.body[0].expression.type !== "ArrowFunctionExpression" && ast.body[0].expression.type !== "FunctionExpression") {
        throw new Error("Failed to resolve function");
      }
      ast.body[0].expression.params.forEach(function(param) {
        params.push(param.name);
      });
      body = ast.body[0].expression.body.range;
      if (ast.body[0].expression.body.type === "BlockStatement") {
        return new Function(params, source.slice(body[0] + 1, body[1] - 1));
      }
      return new Function(params, "return " + source.slice(body[0], body[1]));
    }
    function representJavascriptFunction(object) {
      return object.toString();
    }
    function isFunction(object) {
      return Object.prototype.toString.call(object) === "[object Function]";
    }
    module2.exports = new Type("tag:yaml.org,2002:js/function", {
      kind: "scalar",
      resolve: resolveJavascriptFunction,
      construct: constructJavascriptFunction,
      predicate: isFunction,
      represent: representJavascriptFunction
    });
  }
});

// node_modules/js-yaml/lib/js-yaml/schema/default_full.js
var require_default_full = __commonJS({
  "node_modules/js-yaml/lib/js-yaml/schema/default_full.js"(exports, module2) {
    "use strict";
    var Schema = require_schema();
    module2.exports = Schema.DEFAULT = new Schema({
      include: [
        require_default_safe()
      ],
      explicit: [
        require_undefined(),
        require_regexp(),
        require_function()
      ]
    });
  }
});

// node_modules/js-yaml/lib/js-yaml/loader.js
var require_loader = __commonJS({
  "node_modules/js-yaml/lib/js-yaml/loader.js"(exports, module2) {
    "use strict";
    var common = require_common();
    var YAMLException = require_exception();
    var Mark = require_mark();
    var DEFAULT_SAFE_SCHEMA = require_default_safe();
    var DEFAULT_FULL_SCHEMA = require_default_full();
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    var CONTEXT_FLOW_IN = 1;
    var CONTEXT_FLOW_OUT = 2;
    var CONTEXT_BLOCK_IN = 3;
    var CONTEXT_BLOCK_OUT = 4;
    var CHOMPING_CLIP = 1;
    var CHOMPING_STRIP = 2;
    var CHOMPING_KEEP = 3;
    var PATTERN_NON_PRINTABLE = /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
    var PATTERN_NON_ASCII_LINE_BREAKS = /[\x85\u2028\u2029]/;
    var PATTERN_FLOW_INDICATORS = /[,\[\]\{\}]/;
    var PATTERN_TAG_HANDLE = /^(?:!|!!|![a-z\-]+!)$/i;
    var PATTERN_TAG_URI = /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;
    function _class(obj) {
      return Object.prototype.toString.call(obj);
    }
    function is_EOL(c) {
      return c === 10 || c === 13;
    }
    function is_WHITE_SPACE(c) {
      return c === 9 || c === 32;
    }
    function is_WS_OR_EOL(c) {
      return c === 9 || c === 32 || c === 10 || c === 13;
    }
    function is_FLOW_INDICATOR(c) {
      return c === 44 || c === 91 || c === 93 || c === 123 || c === 125;
    }
    function fromHexCode(c) {
      var lc;
      if (48 <= c && c <= 57) {
        return c - 48;
      }
      lc = c | 32;
      if (97 <= lc && lc <= 102) {
        return lc - 97 + 10;
      }
      return -1;
    }
    function escapedHexLen(c) {
      if (c === 120) {
        return 2;
      }
      if (c === 117) {
        return 4;
      }
      if (c === 85) {
        return 8;
      }
      return 0;
    }
    function fromDecimalCode(c) {
      if (48 <= c && c <= 57) {
        return c - 48;
      }
      return -1;
    }
    function simpleEscapeSequence(c) {
      return c === 48 ? "\0" : c === 97 ? "\x07" : c === 98 ? "\b" : c === 116 ? "	" : c === 9 ? "	" : c === 110 ? "\n" : c === 118 ? "\v" : c === 102 ? "\f" : c === 114 ? "\r" : c === 101 ? "\x1B" : c === 32 ? " " : c === 34 ? '"' : c === 47 ? "/" : c === 92 ? "\\" : c === 78 ? "\x85" : c === 95 ? "\xA0" : c === 76 ? "\u2028" : c === 80 ? "\u2029" : "";
    }
    function charFromCodepoint(c) {
      if (c <= 65535) {
        return String.fromCharCode(c);
      }
      return String.fromCharCode((c - 65536 >> 10) + 55296, (c - 65536 & 1023) + 56320);
    }
    var simpleEscapeCheck = new Array(256);
    var simpleEscapeMap = new Array(256);
    for (i = 0; i < 256; i++) {
      simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;
      simpleEscapeMap[i] = simpleEscapeSequence(i);
    }
    var i;
    function State(input, options) {
      this.input = input;
      this.filename = options["filename"] || null;
      this.schema = options["schema"] || DEFAULT_FULL_SCHEMA;
      this.onWarning = options["onWarning"] || null;
      this.legacy = options["legacy"] || false;
      this.json = options["json"] || false;
      this.listener = options["listener"] || null;
      this.implicitTypes = this.schema.compiledImplicit;
      this.typeMap = this.schema.compiledTypeMap;
      this.length = input.length;
      this.position = 0;
      this.line = 0;
      this.lineStart = 0;
      this.lineIndent = 0;
      this.documents = [];
    }
    function generateError(state, message) {
      return new YAMLException(message, new Mark(state.filename, state.input, state.position, state.line, state.position - state.lineStart));
    }
    function throwError(state, message) {
      throw generateError(state, message);
    }
    function throwWarning(state, message) {
      if (state.onWarning) {
        state.onWarning.call(null, generateError(state, message));
      }
    }
    var directiveHandlers = {
      YAML: function handleYamlDirective(state, name, args) {
        var match, major, minor;
        if (state.version !== null) {
          throwError(state, "duplication of %YAML directive");
        }
        if (args.length !== 1) {
          throwError(state, "YAML directive accepts exactly one argument");
        }
        match = /^([0-9]+)\.([0-9]+)$/.exec(args[0]);
        if (match === null) {
          throwError(state, "ill-formed argument of the YAML directive");
        }
        major = parseInt(match[1], 10);
        minor = parseInt(match[2], 10);
        if (major !== 1) {
          throwError(state, "unacceptable YAML version of the document");
        }
        state.version = args[0];
        state.checkLineBreaks = minor < 2;
        if (minor !== 1 && minor !== 2) {
          throwWarning(state, "unsupported YAML version of the document");
        }
      },
      TAG: function handleTagDirective(state, name, args) {
        var handle, prefix;
        if (args.length !== 2) {
          throwError(state, "TAG directive accepts exactly two arguments");
        }
        handle = args[0];
        prefix = args[1];
        if (!PATTERN_TAG_HANDLE.test(handle)) {
          throwError(state, "ill-formed tag handle (first argument) of the TAG directive");
        }
        if (_hasOwnProperty.call(state.tagMap, handle)) {
          throwError(state, 'there is a previously declared suffix for "' + handle + '" tag handle');
        }
        if (!PATTERN_TAG_URI.test(prefix)) {
          throwError(state, "ill-formed tag prefix (second argument) of the TAG directive");
        }
        state.tagMap[handle] = prefix;
      }
    };
    function captureSegment(state, start, end, checkJson) {
      var _position, _length, _character, _result;
      if (start < end) {
        _result = state.input.slice(start, end);
        if (checkJson) {
          for (_position = 0, _length = _result.length; _position < _length; _position += 1) {
            _character = _result.charCodeAt(_position);
            if (!(_character === 9 || 32 <= _character && _character <= 1114111)) {
              throwError(state, "expected valid JSON character");
            }
          }
        } else if (PATTERN_NON_PRINTABLE.test(_result)) {
          throwError(state, "the stream contains non-printable characters");
        }
        state.result += _result;
      }
    }
    function mergeMappings(state, destination, source, overridableKeys) {
      var sourceKeys, key, index, quantity;
      if (!common.isObject(source)) {
        throwError(state, "cannot merge mappings; the provided source object is unacceptable");
      }
      sourceKeys = Object.keys(source);
      for (index = 0, quantity = sourceKeys.length; index < quantity; index += 1) {
        key = sourceKeys[index];
        if (!_hasOwnProperty.call(destination, key)) {
          destination[key] = source[key];
          overridableKeys[key] = true;
        }
      }
    }
    function storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, startLine, startPos) {
      var index, quantity;
      if (Array.isArray(keyNode)) {
        keyNode = Array.prototype.slice.call(keyNode);
        for (index = 0, quantity = keyNode.length; index < quantity; index += 1) {
          if (Array.isArray(keyNode[index])) {
            throwError(state, "nested arrays are not supported inside keys");
          }
          if (typeof keyNode === "object" && _class(keyNode[index]) === "[object Object]") {
            keyNode[index] = "[object Object]";
          }
        }
      }
      if (typeof keyNode === "object" && _class(keyNode) === "[object Object]") {
        keyNode = "[object Object]";
      }
      keyNode = String(keyNode);
      if (_result === null) {
        _result = {};
      }
      if (keyTag === "tag:yaml.org,2002:merge") {
        if (Array.isArray(valueNode)) {
          for (index = 0, quantity = valueNode.length; index < quantity; index += 1) {
            mergeMappings(state, _result, valueNode[index], overridableKeys);
          }
        } else {
          mergeMappings(state, _result, valueNode, overridableKeys);
        }
      } else {
        if (!state.json && !_hasOwnProperty.call(overridableKeys, keyNode) && _hasOwnProperty.call(_result, keyNode)) {
          state.line = startLine || state.line;
          state.position = startPos || state.position;
          throwError(state, "duplicated mapping key");
        }
        _result[keyNode] = valueNode;
        delete overridableKeys[keyNode];
      }
      return _result;
    }
    function readLineBreak(state) {
      var ch;
      ch = state.input.charCodeAt(state.position);
      if (ch === 10) {
        state.position++;
      } else if (ch === 13) {
        state.position++;
        if (state.input.charCodeAt(state.position) === 10) {
          state.position++;
        }
      } else {
        throwError(state, "a line break is expected");
      }
      state.line += 1;
      state.lineStart = state.position;
    }
    function skipSeparationSpace(state, allowComments, checkIndent) {
      var lineBreaks = 0, ch = state.input.charCodeAt(state.position);
      while (ch !== 0) {
        while (is_WHITE_SPACE(ch)) {
          ch = state.input.charCodeAt(++state.position);
        }
        if (allowComments && ch === 35) {
          do {
            ch = state.input.charCodeAt(++state.position);
          } while (ch !== 10 && ch !== 13 && ch !== 0);
        }
        if (is_EOL(ch)) {
          readLineBreak(state);
          ch = state.input.charCodeAt(state.position);
          lineBreaks++;
          state.lineIndent = 0;
          while (ch === 32) {
            state.lineIndent++;
            ch = state.input.charCodeAt(++state.position);
          }
        } else {
          break;
        }
      }
      if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {
        throwWarning(state, "deficient indentation");
      }
      return lineBreaks;
    }
    function testDocumentSeparator(state) {
      var _position = state.position, ch;
      ch = state.input.charCodeAt(_position);
      if ((ch === 45 || ch === 46) && ch === state.input.charCodeAt(_position + 1) && ch === state.input.charCodeAt(_position + 2)) {
        _position += 3;
        ch = state.input.charCodeAt(_position);
        if (ch === 0 || is_WS_OR_EOL(ch)) {
          return true;
        }
      }
      return false;
    }
    function writeFoldedLines(state, count) {
      if (count === 1) {
        state.result += " ";
      } else if (count > 1) {
        state.result += common.repeat("\n", count - 1);
      }
    }
    function readPlainScalar(state, nodeIndent, withinFlowCollection) {
      var preceding, following, captureStart, captureEnd, hasPendingContent, _line, _lineStart, _lineIndent, _kind = state.kind, _result = state.result, ch;
      ch = state.input.charCodeAt(state.position);
      if (is_WS_OR_EOL(ch) || is_FLOW_INDICATOR(ch) || ch === 35 || ch === 38 || ch === 42 || ch === 33 || ch === 124 || ch === 62 || ch === 39 || ch === 34 || ch === 37 || ch === 64 || ch === 96) {
        return false;
      }
      if (ch === 63 || ch === 45) {
        following = state.input.charCodeAt(state.position + 1);
        if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
          return false;
        }
      }
      state.kind = "scalar";
      state.result = "";
      captureStart = captureEnd = state.position;
      hasPendingContent = false;
      while (ch !== 0) {
        if (ch === 58) {
          following = state.input.charCodeAt(state.position + 1);
          if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
            break;
          }
        } else if (ch === 35) {
          preceding = state.input.charCodeAt(state.position - 1);
          if (is_WS_OR_EOL(preceding)) {
            break;
          }
        } else if (state.position === state.lineStart && testDocumentSeparator(state) || withinFlowCollection && is_FLOW_INDICATOR(ch)) {
          break;
        } else if (is_EOL(ch)) {
          _line = state.line;
          _lineStart = state.lineStart;
          _lineIndent = state.lineIndent;
          skipSeparationSpace(state, false, -1);
          if (state.lineIndent >= nodeIndent) {
            hasPendingContent = true;
            ch = state.input.charCodeAt(state.position);
            continue;
          } else {
            state.position = captureEnd;
            state.line = _line;
            state.lineStart = _lineStart;
            state.lineIndent = _lineIndent;
            break;
          }
        }
        if (hasPendingContent) {
          captureSegment(state, captureStart, captureEnd, false);
          writeFoldedLines(state, state.line - _line);
          captureStart = captureEnd = state.position;
          hasPendingContent = false;
        }
        if (!is_WHITE_SPACE(ch)) {
          captureEnd = state.position + 1;
        }
        ch = state.input.charCodeAt(++state.position);
      }
      captureSegment(state, captureStart, captureEnd, false);
      if (state.result) {
        return true;
      }
      state.kind = _kind;
      state.result = _result;
      return false;
    }
    function readSingleQuotedScalar(state, nodeIndent) {
      var ch, captureStart, captureEnd;
      ch = state.input.charCodeAt(state.position);
      if (ch !== 39) {
        return false;
      }
      state.kind = "scalar";
      state.result = "";
      state.position++;
      captureStart = captureEnd = state.position;
      while ((ch = state.input.charCodeAt(state.position)) !== 0) {
        if (ch === 39) {
          captureSegment(state, captureStart, state.position, true);
          ch = state.input.charCodeAt(++state.position);
          if (ch === 39) {
            captureStart = state.position;
            state.position++;
            captureEnd = state.position;
          } else {
            return true;
          }
        } else if (is_EOL(ch)) {
          captureSegment(state, captureStart, captureEnd, true);
          writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
          captureStart = captureEnd = state.position;
        } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
          throwError(state, "unexpected end of the document within a single quoted scalar");
        } else {
          state.position++;
          captureEnd = state.position;
        }
      }
      throwError(state, "unexpected end of the stream within a single quoted scalar");
    }
    function readDoubleQuotedScalar(state, nodeIndent) {
      var captureStart, captureEnd, hexLength, hexResult, tmp, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch !== 34) {
        return false;
      }
      state.kind = "scalar";
      state.result = "";
      state.position++;
      captureStart = captureEnd = state.position;
      while ((ch = state.input.charCodeAt(state.position)) !== 0) {
        if (ch === 34) {
          captureSegment(state, captureStart, state.position, true);
          state.position++;
          return true;
        } else if (ch === 92) {
          captureSegment(state, captureStart, state.position, true);
          ch = state.input.charCodeAt(++state.position);
          if (is_EOL(ch)) {
            skipSeparationSpace(state, false, nodeIndent);
          } else if (ch < 256 && simpleEscapeCheck[ch]) {
            state.result += simpleEscapeMap[ch];
            state.position++;
          } else if ((tmp = escapedHexLen(ch)) > 0) {
            hexLength = tmp;
            hexResult = 0;
            for (; hexLength > 0; hexLength--) {
              ch = state.input.charCodeAt(++state.position);
              if ((tmp = fromHexCode(ch)) >= 0) {
                hexResult = (hexResult << 4) + tmp;
              } else {
                throwError(state, "expected hexadecimal character");
              }
            }
            state.result += charFromCodepoint(hexResult);
            state.position++;
          } else {
            throwError(state, "unknown escape sequence");
          }
          captureStart = captureEnd = state.position;
        } else if (is_EOL(ch)) {
          captureSegment(state, captureStart, captureEnd, true);
          writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
          captureStart = captureEnd = state.position;
        } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
          throwError(state, "unexpected end of the document within a double quoted scalar");
        } else {
          state.position++;
          captureEnd = state.position;
        }
      }
      throwError(state, "unexpected end of the stream within a double quoted scalar");
    }
    function readFlowCollection(state, nodeIndent) {
      var readNext = true, _line, _tag = state.tag, _result, _anchor = state.anchor, following, terminator, isPair, isExplicitPair, isMapping, overridableKeys = {}, keyNode, keyTag, valueNode, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch === 91) {
        terminator = 93;
        isMapping = false;
        _result = [];
      } else if (ch === 123) {
        terminator = 125;
        isMapping = true;
        _result = {};
      } else {
        return false;
      }
      if (state.anchor !== null) {
        state.anchorMap[state.anchor] = _result;
      }
      ch = state.input.charCodeAt(++state.position);
      while (ch !== 0) {
        skipSeparationSpace(state, true, nodeIndent);
        ch = state.input.charCodeAt(state.position);
        if (ch === terminator) {
          state.position++;
          state.tag = _tag;
          state.anchor = _anchor;
          state.kind = isMapping ? "mapping" : "sequence";
          state.result = _result;
          return true;
        } else if (!readNext) {
          throwError(state, "missed comma between flow collection entries");
        }
        keyTag = keyNode = valueNode = null;
        isPair = isExplicitPair = false;
        if (ch === 63) {
          following = state.input.charCodeAt(state.position + 1);
          if (is_WS_OR_EOL(following)) {
            isPair = isExplicitPair = true;
            state.position++;
            skipSeparationSpace(state, true, nodeIndent);
          }
        }
        _line = state.line;
        composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
        keyTag = state.tag;
        keyNode = state.result;
        skipSeparationSpace(state, true, nodeIndent);
        ch = state.input.charCodeAt(state.position);
        if ((isExplicitPair || state.line === _line) && ch === 58) {
          isPair = true;
          ch = state.input.charCodeAt(++state.position);
          skipSeparationSpace(state, true, nodeIndent);
          composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
          valueNode = state.result;
        }
        if (isMapping) {
          storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode);
        } else if (isPair) {
          _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode));
        } else {
          _result.push(keyNode);
        }
        skipSeparationSpace(state, true, nodeIndent);
        ch = state.input.charCodeAt(state.position);
        if (ch === 44) {
          readNext = true;
          ch = state.input.charCodeAt(++state.position);
        } else {
          readNext = false;
        }
      }
      throwError(state, "unexpected end of the stream within a flow collection");
    }
    function readBlockScalar(state, nodeIndent) {
      var captureStart, folding, chomping = CHOMPING_CLIP, didReadContent = false, detectedIndent = false, textIndent = nodeIndent, emptyLines = 0, atMoreIndented = false, tmp, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch === 124) {
        folding = false;
      } else if (ch === 62) {
        folding = true;
      } else {
        return false;
      }
      state.kind = "scalar";
      state.result = "";
      while (ch !== 0) {
        ch = state.input.charCodeAt(++state.position);
        if (ch === 43 || ch === 45) {
          if (CHOMPING_CLIP === chomping) {
            chomping = ch === 43 ? CHOMPING_KEEP : CHOMPING_STRIP;
          } else {
            throwError(state, "repeat of a chomping mode identifier");
          }
        } else if ((tmp = fromDecimalCode(ch)) >= 0) {
          if (tmp === 0) {
            throwError(state, "bad explicit indentation width of a block scalar; it cannot be less than one");
          } else if (!detectedIndent) {
            textIndent = nodeIndent + tmp - 1;
            detectedIndent = true;
          } else {
            throwError(state, "repeat of an indentation width identifier");
          }
        } else {
          break;
        }
      }
      if (is_WHITE_SPACE(ch)) {
        do {
          ch = state.input.charCodeAt(++state.position);
        } while (is_WHITE_SPACE(ch));
        if (ch === 35) {
          do {
            ch = state.input.charCodeAt(++state.position);
          } while (!is_EOL(ch) && ch !== 0);
        }
      }
      while (ch !== 0) {
        readLineBreak(state);
        state.lineIndent = 0;
        ch = state.input.charCodeAt(state.position);
        while ((!detectedIndent || state.lineIndent < textIndent) && ch === 32) {
          state.lineIndent++;
          ch = state.input.charCodeAt(++state.position);
        }
        if (!detectedIndent && state.lineIndent > textIndent) {
          textIndent = state.lineIndent;
        }
        if (is_EOL(ch)) {
          emptyLines++;
          continue;
        }
        if (state.lineIndent < textIndent) {
          if (chomping === CHOMPING_KEEP) {
            state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
          } else if (chomping === CHOMPING_CLIP) {
            if (didReadContent) {
              state.result += "\n";
            }
          }
          break;
        }
        if (folding) {
          if (is_WHITE_SPACE(ch)) {
            atMoreIndented = true;
            state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
          } else if (atMoreIndented) {
            atMoreIndented = false;
            state.result += common.repeat("\n", emptyLines + 1);
          } else if (emptyLines === 0) {
            if (didReadContent) {
              state.result += " ";
            }
          } else {
            state.result += common.repeat("\n", emptyLines);
          }
        } else {
          state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
        }
        didReadContent = true;
        detectedIndent = true;
        emptyLines = 0;
        captureStart = state.position;
        while (!is_EOL(ch) && ch !== 0) {
          ch = state.input.charCodeAt(++state.position);
        }
        captureSegment(state, captureStart, state.position, false);
      }
      return true;
    }
    function readBlockSequence(state, nodeIndent) {
      var _line, _tag = state.tag, _anchor = state.anchor, _result = [], following, detected = false, ch;
      if (state.anchor !== null) {
        state.anchorMap[state.anchor] = _result;
      }
      ch = state.input.charCodeAt(state.position);
      while (ch !== 0) {
        if (ch !== 45) {
          break;
        }
        following = state.input.charCodeAt(state.position + 1);
        if (!is_WS_OR_EOL(following)) {
          break;
        }
        detected = true;
        state.position++;
        if (skipSeparationSpace(state, true, -1)) {
          if (state.lineIndent <= nodeIndent) {
            _result.push(null);
            ch = state.input.charCodeAt(state.position);
            continue;
          }
        }
        _line = state.line;
        composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);
        _result.push(state.result);
        skipSeparationSpace(state, true, -1);
        ch = state.input.charCodeAt(state.position);
        if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {
          throwError(state, "bad indentation of a sequence entry");
        } else if (state.lineIndent < nodeIndent) {
          break;
        }
      }
      if (detected) {
        state.tag = _tag;
        state.anchor = _anchor;
        state.kind = "sequence";
        state.result = _result;
        return true;
      }
      return false;
    }
    function readBlockMapping(state, nodeIndent, flowIndent) {
      var following, allowCompact, _line, _pos, _tag = state.tag, _anchor = state.anchor, _result = {}, overridableKeys = {}, keyTag = null, keyNode = null, valueNode = null, atExplicitKey = false, detected = false, ch;
      if (state.anchor !== null) {
        state.anchorMap[state.anchor] = _result;
      }
      ch = state.input.charCodeAt(state.position);
      while (ch !== 0) {
        following = state.input.charCodeAt(state.position + 1);
        _line = state.line;
        _pos = state.position;
        if ((ch === 63 || ch === 58) && is_WS_OR_EOL(following)) {
          if (ch === 63) {
            if (atExplicitKey) {
              storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);
              keyTag = keyNode = valueNode = null;
            }
            detected = true;
            atExplicitKey = true;
            allowCompact = true;
          } else if (atExplicitKey) {
            atExplicitKey = false;
            allowCompact = true;
          } else {
            throwError(state, "incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line");
          }
          state.position += 1;
          ch = following;
        } else if (composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {
          if (state.line === _line) {
            ch = state.input.charCodeAt(state.position);
            while (is_WHITE_SPACE(ch)) {
              ch = state.input.charCodeAt(++state.position);
            }
            if (ch === 58) {
              ch = state.input.charCodeAt(++state.position);
              if (!is_WS_OR_EOL(ch)) {
                throwError(state, "a whitespace character is expected after the key-value separator within a block mapping");
              }
              if (atExplicitKey) {
                storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);
                keyTag = keyNode = valueNode = null;
              }
              detected = true;
              atExplicitKey = false;
              allowCompact = false;
              keyTag = state.tag;
              keyNode = state.result;
            } else if (detected) {
              throwError(state, "can not read an implicit mapping pair; a colon is missed");
            } else {
              state.tag = _tag;
              state.anchor = _anchor;
              return true;
            }
          } else if (detected) {
            throwError(state, "can not read a block mapping entry; a multiline key may not be an implicit key");
          } else {
            state.tag = _tag;
            state.anchor = _anchor;
            return true;
          }
        } else {
          break;
        }
        if (state.line === _line || state.lineIndent > nodeIndent) {
          if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {
            if (atExplicitKey) {
              keyNode = state.result;
            } else {
              valueNode = state.result;
            }
          }
          if (!atExplicitKey) {
            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _pos);
            keyTag = keyNode = valueNode = null;
          }
          skipSeparationSpace(state, true, -1);
          ch = state.input.charCodeAt(state.position);
        }
        if (state.lineIndent > nodeIndent && ch !== 0) {
          throwError(state, "bad indentation of a mapping entry");
        } else if (state.lineIndent < nodeIndent) {
          break;
        }
      }
      if (atExplicitKey) {
        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);
      }
      if (detected) {
        state.tag = _tag;
        state.anchor = _anchor;
        state.kind = "mapping";
        state.result = _result;
      }
      return detected;
    }
    function readTagProperty(state) {
      var _position, isVerbatim = false, isNamed = false, tagHandle, tagName, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch !== 33)
        return false;
      if (state.tag !== null) {
        throwError(state, "duplication of a tag property");
      }
      ch = state.input.charCodeAt(++state.position);
      if (ch === 60) {
        isVerbatim = true;
        ch = state.input.charCodeAt(++state.position);
      } else if (ch === 33) {
        isNamed = true;
        tagHandle = "!!";
        ch = state.input.charCodeAt(++state.position);
      } else {
        tagHandle = "!";
      }
      _position = state.position;
      if (isVerbatim) {
        do {
          ch = state.input.charCodeAt(++state.position);
        } while (ch !== 0 && ch !== 62);
        if (state.position < state.length) {
          tagName = state.input.slice(_position, state.position);
          ch = state.input.charCodeAt(++state.position);
        } else {
          throwError(state, "unexpected end of the stream within a verbatim tag");
        }
      } else {
        while (ch !== 0 && !is_WS_OR_EOL(ch)) {
          if (ch === 33) {
            if (!isNamed) {
              tagHandle = state.input.slice(_position - 1, state.position + 1);
              if (!PATTERN_TAG_HANDLE.test(tagHandle)) {
                throwError(state, "named tag handle cannot contain such characters");
              }
              isNamed = true;
              _position = state.position + 1;
            } else {
              throwError(state, "tag suffix cannot contain exclamation marks");
            }
          }
          ch = state.input.charCodeAt(++state.position);
        }
        tagName = state.input.slice(_position, state.position);
        if (PATTERN_FLOW_INDICATORS.test(tagName)) {
          throwError(state, "tag suffix cannot contain flow indicator characters");
        }
      }
      if (tagName && !PATTERN_TAG_URI.test(tagName)) {
        throwError(state, "tag name cannot contain such characters: " + tagName);
      }
      if (isVerbatim) {
        state.tag = tagName;
      } else if (_hasOwnProperty.call(state.tagMap, tagHandle)) {
        state.tag = state.tagMap[tagHandle] + tagName;
      } else if (tagHandle === "!") {
        state.tag = "!" + tagName;
      } else if (tagHandle === "!!") {
        state.tag = "tag:yaml.org,2002:" + tagName;
      } else {
        throwError(state, 'undeclared tag handle "' + tagHandle + '"');
      }
      return true;
    }
    function readAnchorProperty(state) {
      var _position, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch !== 38)
        return false;
      if (state.anchor !== null) {
        throwError(state, "duplication of an anchor property");
      }
      ch = state.input.charCodeAt(++state.position);
      _position = state.position;
      while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }
      if (state.position === _position) {
        throwError(state, "name of an anchor node must contain at least one character");
      }
      state.anchor = state.input.slice(_position, state.position);
      return true;
    }
    function readAlias(state) {
      var _position, alias, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch !== 42)
        return false;
      ch = state.input.charCodeAt(++state.position);
      _position = state.position;
      while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }
      if (state.position === _position) {
        throwError(state, "name of an alias node must contain at least one character");
      }
      alias = state.input.slice(_position, state.position);
      if (!_hasOwnProperty.call(state.anchorMap, alias)) {
        throwError(state, 'unidentified alias "' + alias + '"');
      }
      state.result = state.anchorMap[alias];
      skipSeparationSpace(state, true, -1);
      return true;
    }
    function composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {
      var allowBlockStyles, allowBlockScalars, allowBlockCollections, indentStatus = 1, atNewLine = false, hasContent = false, typeIndex, typeQuantity, type, flowIndent, blockIndent;
      if (state.listener !== null) {
        state.listener("open", state);
      }
      state.tag = null;
      state.anchor = null;
      state.kind = null;
      state.result = null;
      allowBlockStyles = allowBlockScalars = allowBlockCollections = CONTEXT_BLOCK_OUT === nodeContext || CONTEXT_BLOCK_IN === nodeContext;
      if (allowToSeek) {
        if (skipSeparationSpace(state, true, -1)) {
          atNewLine = true;
          if (state.lineIndent > parentIndent) {
            indentStatus = 1;
          } else if (state.lineIndent === parentIndent) {
            indentStatus = 0;
          } else if (state.lineIndent < parentIndent) {
            indentStatus = -1;
          }
        }
      }
      if (indentStatus === 1) {
        while (readTagProperty(state) || readAnchorProperty(state)) {
          if (skipSeparationSpace(state, true, -1)) {
            atNewLine = true;
            allowBlockCollections = allowBlockStyles;
            if (state.lineIndent > parentIndent) {
              indentStatus = 1;
            } else if (state.lineIndent === parentIndent) {
              indentStatus = 0;
            } else if (state.lineIndent < parentIndent) {
              indentStatus = -1;
            }
          } else {
            allowBlockCollections = false;
          }
        }
      }
      if (allowBlockCollections) {
        allowBlockCollections = atNewLine || allowCompact;
      }
      if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {
        if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {
          flowIndent = parentIndent;
        } else {
          flowIndent = parentIndent + 1;
        }
        blockIndent = state.position - state.lineStart;
        if (indentStatus === 1) {
          if (allowBlockCollections && (readBlockSequence(state, blockIndent) || readBlockMapping(state, blockIndent, flowIndent)) || readFlowCollection(state, flowIndent)) {
            hasContent = true;
          } else {
            if (allowBlockScalars && readBlockScalar(state, flowIndent) || readSingleQuotedScalar(state, flowIndent) || readDoubleQuotedScalar(state, flowIndent)) {
              hasContent = true;
            } else if (readAlias(state)) {
              hasContent = true;
              if (state.tag !== null || state.anchor !== null) {
                throwError(state, "alias node should not have any properties");
              }
            } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {
              hasContent = true;
              if (state.tag === null) {
                state.tag = "?";
              }
            }
            if (state.anchor !== null) {
              state.anchorMap[state.anchor] = state.result;
            }
          }
        } else if (indentStatus === 0) {
          hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);
        }
      }
      if (state.tag !== null && state.tag !== "!") {
        if (state.tag === "?") {
          if (state.result !== null && state.kind !== "scalar") {
            throwError(state, 'unacceptable node kind for !<?> tag; it should be "scalar", not "' + state.kind + '"');
          }
          for (typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1) {
            type = state.implicitTypes[typeIndex];
            if (type.resolve(state.result)) {
              state.result = type.construct(state.result);
              state.tag = type.tag;
              if (state.anchor !== null) {
                state.anchorMap[state.anchor] = state.result;
              }
              break;
            }
          }
        } else if (_hasOwnProperty.call(state.typeMap[state.kind || "fallback"], state.tag)) {
          type = state.typeMap[state.kind || "fallback"][state.tag];
          if (state.result !== null && type.kind !== state.kind) {
            throwError(state, "unacceptable node kind for !<" + state.tag + '> tag; it should be "' + type.kind + '", not "' + state.kind + '"');
          }
          if (!type.resolve(state.result)) {
            throwError(state, "cannot resolve a node with !<" + state.tag + "> explicit tag");
          } else {
            state.result = type.construct(state.result);
            if (state.anchor !== null) {
              state.anchorMap[state.anchor] = state.result;
            }
          }
        } else {
          throwError(state, "unknown tag !<" + state.tag + ">");
        }
      }
      if (state.listener !== null) {
        state.listener("close", state);
      }
      return state.tag !== null || state.anchor !== null || hasContent;
    }
    function readDocument(state) {
      var documentStart = state.position, _position, directiveName, directiveArgs, hasDirectives = false, ch;
      state.version = null;
      state.checkLineBreaks = state.legacy;
      state.tagMap = {};
      state.anchorMap = {};
      while ((ch = state.input.charCodeAt(state.position)) !== 0) {
        skipSeparationSpace(state, true, -1);
        ch = state.input.charCodeAt(state.position);
        if (state.lineIndent > 0 || ch !== 37) {
          break;
        }
        hasDirectives = true;
        ch = state.input.charCodeAt(++state.position);
        _position = state.position;
        while (ch !== 0 && !is_WS_OR_EOL(ch)) {
          ch = state.input.charCodeAt(++state.position);
        }
        directiveName = state.input.slice(_position, state.position);
        directiveArgs = [];
        if (directiveName.length < 1) {
          throwError(state, "directive name must not be less than one character in length");
        }
        while (ch !== 0) {
          while (is_WHITE_SPACE(ch)) {
            ch = state.input.charCodeAt(++state.position);
          }
          if (ch === 35) {
            do {
              ch = state.input.charCodeAt(++state.position);
            } while (ch !== 0 && !is_EOL(ch));
            break;
          }
          if (is_EOL(ch))
            break;
          _position = state.position;
          while (ch !== 0 && !is_WS_OR_EOL(ch)) {
            ch = state.input.charCodeAt(++state.position);
          }
          directiveArgs.push(state.input.slice(_position, state.position));
        }
        if (ch !== 0)
          readLineBreak(state);
        if (_hasOwnProperty.call(directiveHandlers, directiveName)) {
          directiveHandlers[directiveName](state, directiveName, directiveArgs);
        } else {
          throwWarning(state, 'unknown document directive "' + directiveName + '"');
        }
      }
      skipSeparationSpace(state, true, -1);
      if (state.lineIndent === 0 && state.input.charCodeAt(state.position) === 45 && state.input.charCodeAt(state.position + 1) === 45 && state.input.charCodeAt(state.position + 2) === 45) {
        state.position += 3;
        skipSeparationSpace(state, true, -1);
      } else if (hasDirectives) {
        throwError(state, "directives end mark is expected");
      }
      composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);
      skipSeparationSpace(state, true, -1);
      if (state.checkLineBreaks && PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {
        throwWarning(state, "non-ASCII line breaks are interpreted as content");
      }
      state.documents.push(state.result);
      if (state.position === state.lineStart && testDocumentSeparator(state)) {
        if (state.input.charCodeAt(state.position) === 46) {
          state.position += 3;
          skipSeparationSpace(state, true, -1);
        }
        return;
      }
      if (state.position < state.length - 1) {
        throwError(state, "end of the stream or a document separator is expected");
      } else {
        return;
      }
    }
    function loadDocuments(input, options) {
      input = String(input);
      options = options || {};
      if (input.length !== 0) {
        if (input.charCodeAt(input.length - 1) !== 10 && input.charCodeAt(input.length - 1) !== 13) {
          input += "\n";
        }
        if (input.charCodeAt(0) === 65279) {
          input = input.slice(1);
        }
      }
      var state = new State(input, options);
      var nullpos = input.indexOf("\0");
      if (nullpos !== -1) {
        state.position = nullpos;
        throwError(state, "null byte is not allowed in input");
      }
      state.input += "\0";
      while (state.input.charCodeAt(state.position) === 32) {
        state.lineIndent += 1;
        state.position += 1;
      }
      while (state.position < state.length - 1) {
        readDocument(state);
      }
      return state.documents;
    }
    function loadAll(input, iterator, options) {
      if (iterator !== null && typeof iterator === "object" && typeof options === "undefined") {
        options = iterator;
        iterator = null;
      }
      var documents = loadDocuments(input, options);
      if (typeof iterator !== "function") {
        return documents;
      }
      for (var index = 0, length = documents.length; index < length; index += 1) {
        iterator(documents[index]);
      }
    }
    function load(input, options) {
      var documents = loadDocuments(input, options);
      if (documents.length === 0) {
        return void 0;
      } else if (documents.length === 1) {
        return documents[0];
      }
      throw new YAMLException("expected a single document in the stream, but found more");
    }
    function safeLoadAll(input, iterator, options) {
      if (typeof iterator === "object" && iterator !== null && typeof options === "undefined") {
        options = iterator;
        iterator = null;
      }
      return loadAll(input, iterator, common.extend({ schema: DEFAULT_SAFE_SCHEMA }, options));
    }
    function safeLoad(input, options) {
      return load(input, common.extend({ schema: DEFAULT_SAFE_SCHEMA }, options));
    }
    module2.exports.loadAll = loadAll;
    module2.exports.load = load;
    module2.exports.safeLoadAll = safeLoadAll;
    module2.exports.safeLoad = safeLoad;
  }
});

// node_modules/js-yaml/lib/js-yaml/dumper.js
var require_dumper = __commonJS({
  "node_modules/js-yaml/lib/js-yaml/dumper.js"(exports, module2) {
    "use strict";
    var common = require_common();
    var YAMLException = require_exception();
    var DEFAULT_FULL_SCHEMA = require_default_full();
    var DEFAULT_SAFE_SCHEMA = require_default_safe();
    var _toString = Object.prototype.toString;
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    var CHAR_TAB = 9;
    var CHAR_LINE_FEED = 10;
    var CHAR_CARRIAGE_RETURN = 13;
    var CHAR_SPACE = 32;
    var CHAR_EXCLAMATION = 33;
    var CHAR_DOUBLE_QUOTE = 34;
    var CHAR_SHARP = 35;
    var CHAR_PERCENT = 37;
    var CHAR_AMPERSAND = 38;
    var CHAR_SINGLE_QUOTE = 39;
    var CHAR_ASTERISK = 42;
    var CHAR_COMMA = 44;
    var CHAR_MINUS = 45;
    var CHAR_COLON = 58;
    var CHAR_EQUALS = 61;
    var CHAR_GREATER_THAN = 62;
    var CHAR_QUESTION = 63;
    var CHAR_COMMERCIAL_AT = 64;
    var CHAR_LEFT_SQUARE_BRACKET = 91;
    var CHAR_RIGHT_SQUARE_BRACKET = 93;
    var CHAR_GRAVE_ACCENT = 96;
    var CHAR_LEFT_CURLY_BRACKET = 123;
    var CHAR_VERTICAL_LINE = 124;
    var CHAR_RIGHT_CURLY_BRACKET = 125;
    var ESCAPE_SEQUENCES = {};
    ESCAPE_SEQUENCES[0] = "\\0";
    ESCAPE_SEQUENCES[7] = "\\a";
    ESCAPE_SEQUENCES[8] = "\\b";
    ESCAPE_SEQUENCES[9] = "\\t";
    ESCAPE_SEQUENCES[10] = "\\n";
    ESCAPE_SEQUENCES[11] = "\\v";
    ESCAPE_SEQUENCES[12] = "\\f";
    ESCAPE_SEQUENCES[13] = "\\r";
    ESCAPE_SEQUENCES[27] = "\\e";
    ESCAPE_SEQUENCES[34] = '\\"';
    ESCAPE_SEQUENCES[92] = "\\\\";
    ESCAPE_SEQUENCES[133] = "\\N";
    ESCAPE_SEQUENCES[160] = "\\_";
    ESCAPE_SEQUENCES[8232] = "\\L";
    ESCAPE_SEQUENCES[8233] = "\\P";
    var DEPRECATED_BOOLEANS_SYNTAX = [
      "y",
      "Y",
      "yes",
      "Yes",
      "YES",
      "on",
      "On",
      "ON",
      "n",
      "N",
      "no",
      "No",
      "NO",
      "off",
      "Off",
      "OFF"
    ];
    function compileStyleMap(schema, map) {
      var result, keys, index, length, tag, style, type;
      if (map === null)
        return {};
      result = {};
      keys = Object.keys(map);
      for (index = 0, length = keys.length; index < length; index += 1) {
        tag = keys[index];
        style = String(map[tag]);
        if (tag.slice(0, 2) === "!!") {
          tag = "tag:yaml.org,2002:" + tag.slice(2);
        }
        type = schema.compiledTypeMap["fallback"][tag];
        if (type && _hasOwnProperty.call(type.styleAliases, style)) {
          style = type.styleAliases[style];
        }
        result[tag] = style;
      }
      return result;
    }
    function encodeHex(character) {
      var string, handle, length;
      string = character.toString(16).toUpperCase();
      if (character <= 255) {
        handle = "x";
        length = 2;
      } else if (character <= 65535) {
        handle = "u";
        length = 4;
      } else if (character <= 4294967295) {
        handle = "U";
        length = 8;
      } else {
        throw new YAMLException("code point within a string may not be greater than 0xFFFFFFFF");
      }
      return "\\" + handle + common.repeat("0", length - string.length) + string;
    }
    function State(options) {
      this.schema = options["schema"] || DEFAULT_FULL_SCHEMA;
      this.indent = Math.max(1, options["indent"] || 2);
      this.noArrayIndent = options["noArrayIndent"] || false;
      this.skipInvalid = options["skipInvalid"] || false;
      this.flowLevel = common.isNothing(options["flowLevel"]) ? -1 : options["flowLevel"];
      this.styleMap = compileStyleMap(this.schema, options["styles"] || null);
      this.sortKeys = options["sortKeys"] || false;
      this.lineWidth = options["lineWidth"] || 80;
      this.noRefs = options["noRefs"] || false;
      this.noCompatMode = options["noCompatMode"] || false;
      this.condenseFlow = options["condenseFlow"] || false;
      this.implicitTypes = this.schema.compiledImplicit;
      this.explicitTypes = this.schema.compiledExplicit;
      this.tag = null;
      this.result = "";
      this.duplicates = [];
      this.usedDuplicates = null;
    }
    function indentString(string, spaces) {
      var ind = common.repeat(" ", spaces), position = 0, next = -1, result = "", line, length = string.length;
      while (position < length) {
        next = string.indexOf("\n", position);
        if (next === -1) {
          line = string.slice(position);
          position = length;
        } else {
          line = string.slice(position, next + 1);
          position = next + 1;
        }
        if (line.length && line !== "\n")
          result += ind;
        result += line;
      }
      return result;
    }
    function generateNextLine(state, level) {
      return "\n" + common.repeat(" ", state.indent * level);
    }
    function testImplicitResolving(state, str) {
      var index, length, type;
      for (index = 0, length = state.implicitTypes.length; index < length; index += 1) {
        type = state.implicitTypes[index];
        if (type.resolve(str)) {
          return true;
        }
      }
      return false;
    }
    function isWhitespace(c) {
      return c === CHAR_SPACE || c === CHAR_TAB;
    }
    function isPrintable(c) {
      return 32 <= c && c <= 126 || 161 <= c && c <= 55295 && c !== 8232 && c !== 8233 || 57344 <= c && c <= 65533 && c !== 65279 || 65536 <= c && c <= 1114111;
    }
    function isNsChar(c) {
      return isPrintable(c) && !isWhitespace(c) && c !== 65279 && c !== CHAR_CARRIAGE_RETURN && c !== CHAR_LINE_FEED;
    }
    function isPlainSafe(c, prev) {
      return isPrintable(c) && c !== 65279 && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET && c !== CHAR_COLON && (c !== CHAR_SHARP || prev && isNsChar(prev));
    }
    function isPlainSafeFirst(c) {
      return isPrintable(c) && c !== 65279 && !isWhitespace(c) && c !== CHAR_MINUS && c !== CHAR_QUESTION && c !== CHAR_COLON && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET && c !== CHAR_SHARP && c !== CHAR_AMPERSAND && c !== CHAR_ASTERISK && c !== CHAR_EXCLAMATION && c !== CHAR_VERTICAL_LINE && c !== CHAR_EQUALS && c !== CHAR_GREATER_THAN && c !== CHAR_SINGLE_QUOTE && c !== CHAR_DOUBLE_QUOTE && c !== CHAR_PERCENT && c !== CHAR_COMMERCIAL_AT && c !== CHAR_GRAVE_ACCENT;
    }
    function needIndentIndicator(string) {
      var leadingSpaceRe = /^\n* /;
      return leadingSpaceRe.test(string);
    }
    var STYLE_PLAIN = 1;
    var STYLE_SINGLE = 2;
    var STYLE_LITERAL = 3;
    var STYLE_FOLDED = 4;
    var STYLE_DOUBLE = 5;
    function chooseScalarStyle(string, singleLineOnly, indentPerLevel, lineWidth, testAmbiguousType) {
      var i;
      var char, prev_char;
      var hasLineBreak = false;
      var hasFoldableLine = false;
      var shouldTrackWidth = lineWidth !== -1;
      var previousLineBreak = -1;
      var plain = isPlainSafeFirst(string.charCodeAt(0)) && !isWhitespace(string.charCodeAt(string.length - 1));
      if (singleLineOnly) {
        for (i = 0; i < string.length; i++) {
          char = string.charCodeAt(i);
          if (!isPrintable(char)) {
            return STYLE_DOUBLE;
          }
          prev_char = i > 0 ? string.charCodeAt(i - 1) : null;
          plain = plain && isPlainSafe(char, prev_char);
        }
      } else {
        for (i = 0; i < string.length; i++) {
          char = string.charCodeAt(i);
          if (char === CHAR_LINE_FEED) {
            hasLineBreak = true;
            if (shouldTrackWidth) {
              hasFoldableLine = hasFoldableLine || i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== " ";
              previousLineBreak = i;
            }
          } else if (!isPrintable(char)) {
            return STYLE_DOUBLE;
          }
          prev_char = i > 0 ? string.charCodeAt(i - 1) : null;
          plain = plain && isPlainSafe(char, prev_char);
        }
        hasFoldableLine = hasFoldableLine || shouldTrackWidth && (i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== " ");
      }
      if (!hasLineBreak && !hasFoldableLine) {
        return plain && !testAmbiguousType(string) ? STYLE_PLAIN : STYLE_SINGLE;
      }
      if (indentPerLevel > 9 && needIndentIndicator(string)) {
        return STYLE_DOUBLE;
      }
      return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;
    }
    function writeScalar(state, string, level, iskey) {
      state.dump = function() {
        if (string.length === 0) {
          return "''";
        }
        if (!state.noCompatMode && DEPRECATED_BOOLEANS_SYNTAX.indexOf(string) !== -1) {
          return "'" + string + "'";
        }
        var indent = state.indent * Math.max(1, level);
        var lineWidth = state.lineWidth === -1 ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent);
        var singleLineOnly = iskey || state.flowLevel > -1 && level >= state.flowLevel;
        function testAmbiguity(string2) {
          return testImplicitResolving(state, string2);
        }
        switch (chooseScalarStyle(string, singleLineOnly, state.indent, lineWidth, testAmbiguity)) {
          case STYLE_PLAIN:
            return string;
          case STYLE_SINGLE:
            return "'" + string.replace(/'/g, "''") + "'";
          case STYLE_LITERAL:
            return "|" + blockHeader(string, state.indent) + dropEndingNewline(indentString(string, indent));
          case STYLE_FOLDED:
            return ">" + blockHeader(string, state.indent) + dropEndingNewline(indentString(foldString(string, lineWidth), indent));
          case STYLE_DOUBLE:
            return '"' + escapeString(string, lineWidth) + '"';
          default:
            throw new YAMLException("impossible error: invalid scalar style");
        }
      }();
    }
    function blockHeader(string, indentPerLevel) {
      var indentIndicator = needIndentIndicator(string) ? String(indentPerLevel) : "";
      var clip = string[string.length - 1] === "\n";
      var keep = clip && (string[string.length - 2] === "\n" || string === "\n");
      var chomp = keep ? "+" : clip ? "" : "-";
      return indentIndicator + chomp + "\n";
    }
    function dropEndingNewline(string) {
      return string[string.length - 1] === "\n" ? string.slice(0, -1) : string;
    }
    function foldString(string, width) {
      var lineRe = /(\n+)([^\n]*)/g;
      var result = function() {
        var nextLF = string.indexOf("\n");
        nextLF = nextLF !== -1 ? nextLF : string.length;
        lineRe.lastIndex = nextLF;
        return foldLine(string.slice(0, nextLF), width);
      }();
      var prevMoreIndented = string[0] === "\n" || string[0] === " ";
      var moreIndented;
      var match;
      while (match = lineRe.exec(string)) {
        var prefix = match[1], line = match[2];
        moreIndented = line[0] === " ";
        result += prefix + (!prevMoreIndented && !moreIndented && line !== "" ? "\n" : "") + foldLine(line, width);
        prevMoreIndented = moreIndented;
      }
      return result;
    }
    function foldLine(line, width) {
      if (line === "" || line[0] === " ")
        return line;
      var breakRe = / [^ ]/g;
      var match;
      var start = 0, end, curr = 0, next = 0;
      var result = "";
      while (match = breakRe.exec(line)) {
        next = match.index;
        if (next - start > width) {
          end = curr > start ? curr : next;
          result += "\n" + line.slice(start, end);
          start = end + 1;
        }
        curr = next;
      }
      result += "\n";
      if (line.length - start > width && curr > start) {
        result += line.slice(start, curr) + "\n" + line.slice(curr + 1);
      } else {
        result += line.slice(start);
      }
      return result.slice(1);
    }
    function escapeString(string) {
      var result = "";
      var char, nextChar;
      var escapeSeq;
      for (var i = 0; i < string.length; i++) {
        char = string.charCodeAt(i);
        if (char >= 55296 && char <= 56319) {
          nextChar = string.charCodeAt(i + 1);
          if (nextChar >= 56320 && nextChar <= 57343) {
            result += encodeHex((char - 55296) * 1024 + nextChar - 56320 + 65536);
            i++;
            continue;
          }
        }
        escapeSeq = ESCAPE_SEQUENCES[char];
        result += !escapeSeq && isPrintable(char) ? string[i] : escapeSeq || encodeHex(char);
      }
      return result;
    }
    function writeFlowSequence(state, level, object) {
      var _result = "", _tag = state.tag, index, length;
      for (index = 0, length = object.length; index < length; index += 1) {
        if (writeNode(state, level, object[index], false, false)) {
          if (index !== 0)
            _result += "," + (!state.condenseFlow ? " " : "");
          _result += state.dump;
        }
      }
      state.tag = _tag;
      state.dump = "[" + _result + "]";
    }
    function writeBlockSequence(state, level, object, compact) {
      var _result = "", _tag = state.tag, index, length;
      for (index = 0, length = object.length; index < length; index += 1) {
        if (writeNode(state, level + 1, object[index], true, true)) {
          if (!compact || index !== 0) {
            _result += generateNextLine(state, level);
          }
          if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
            _result += "-";
          } else {
            _result += "- ";
          }
          _result += state.dump;
        }
      }
      state.tag = _tag;
      state.dump = _result || "[]";
    }
    function writeFlowMapping(state, level, object) {
      var _result = "", _tag = state.tag, objectKeyList = Object.keys(object), index, length, objectKey, objectValue, pairBuffer;
      for (index = 0, length = objectKeyList.length; index < length; index += 1) {
        pairBuffer = "";
        if (index !== 0)
          pairBuffer += ", ";
        if (state.condenseFlow)
          pairBuffer += '"';
        objectKey = objectKeyList[index];
        objectValue = object[objectKey];
        if (!writeNode(state, level, objectKey, false, false)) {
          continue;
        }
        if (state.dump.length > 1024)
          pairBuffer += "? ";
        pairBuffer += state.dump + (state.condenseFlow ? '"' : "") + ":" + (state.condenseFlow ? "" : " ");
        if (!writeNode(state, level, objectValue, false, false)) {
          continue;
        }
        pairBuffer += state.dump;
        _result += pairBuffer;
      }
      state.tag = _tag;
      state.dump = "{" + _result + "}";
    }
    function writeBlockMapping(state, level, object, compact) {
      var _result = "", _tag = state.tag, objectKeyList = Object.keys(object), index, length, objectKey, objectValue, explicitPair, pairBuffer;
      if (state.sortKeys === true) {
        objectKeyList.sort();
      } else if (typeof state.sortKeys === "function") {
        objectKeyList.sort(state.sortKeys);
      } else if (state.sortKeys) {
        throw new YAMLException("sortKeys must be a boolean or a function");
      }
      for (index = 0, length = objectKeyList.length; index < length; index += 1) {
        pairBuffer = "";
        if (!compact || index !== 0) {
          pairBuffer += generateNextLine(state, level);
        }
        objectKey = objectKeyList[index];
        objectValue = object[objectKey];
        if (!writeNode(state, level + 1, objectKey, true, true, true)) {
          continue;
        }
        explicitPair = state.tag !== null && state.tag !== "?" || state.dump && state.dump.length > 1024;
        if (explicitPair) {
          if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
            pairBuffer += "?";
          } else {
            pairBuffer += "? ";
          }
        }
        pairBuffer += state.dump;
        if (explicitPair) {
          pairBuffer += generateNextLine(state, level);
        }
        if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {
          continue;
        }
        if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
          pairBuffer += ":";
        } else {
          pairBuffer += ": ";
        }
        pairBuffer += state.dump;
        _result += pairBuffer;
      }
      state.tag = _tag;
      state.dump = _result || "{}";
    }
    function detectType(state, object, explicit) {
      var _result, typeList, index, length, type, style;
      typeList = explicit ? state.explicitTypes : state.implicitTypes;
      for (index = 0, length = typeList.length; index < length; index += 1) {
        type = typeList[index];
        if ((type.instanceOf || type.predicate) && (!type.instanceOf || typeof object === "object" && object instanceof type.instanceOf) && (!type.predicate || type.predicate(object))) {
          state.tag = explicit ? type.tag : "?";
          if (type.represent) {
            style = state.styleMap[type.tag] || type.defaultStyle;
            if (_toString.call(type.represent) === "[object Function]") {
              _result = type.represent(object, style);
            } else if (_hasOwnProperty.call(type.represent, style)) {
              _result = type.represent[style](object, style);
            } else {
              throw new YAMLException("!<" + type.tag + '> tag resolver accepts not "' + style + '" style');
            }
            state.dump = _result;
          }
          return true;
        }
      }
      return false;
    }
    function writeNode(state, level, object, block, compact, iskey) {
      state.tag = null;
      state.dump = object;
      if (!detectType(state, object, false)) {
        detectType(state, object, true);
      }
      var type = _toString.call(state.dump);
      if (block) {
        block = state.flowLevel < 0 || state.flowLevel > level;
      }
      var objectOrArray = type === "[object Object]" || type === "[object Array]", duplicateIndex, duplicate;
      if (objectOrArray) {
        duplicateIndex = state.duplicates.indexOf(object);
        duplicate = duplicateIndex !== -1;
      }
      if (state.tag !== null && state.tag !== "?" || duplicate || state.indent !== 2 && level > 0) {
        compact = false;
      }
      if (duplicate && state.usedDuplicates[duplicateIndex]) {
        state.dump = "*ref_" + duplicateIndex;
      } else {
        if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {
          state.usedDuplicates[duplicateIndex] = true;
        }
        if (type === "[object Object]") {
          if (block && Object.keys(state.dump).length !== 0) {
            writeBlockMapping(state, level, state.dump, compact);
            if (duplicate) {
              state.dump = "&ref_" + duplicateIndex + state.dump;
            }
          } else {
            writeFlowMapping(state, level, state.dump);
            if (duplicate) {
              state.dump = "&ref_" + duplicateIndex + " " + state.dump;
            }
          }
        } else if (type === "[object Array]") {
          var arrayLevel = state.noArrayIndent && level > 0 ? level - 1 : level;
          if (block && state.dump.length !== 0) {
            writeBlockSequence(state, arrayLevel, state.dump, compact);
            if (duplicate) {
              state.dump = "&ref_" + duplicateIndex + state.dump;
            }
          } else {
            writeFlowSequence(state, arrayLevel, state.dump);
            if (duplicate) {
              state.dump = "&ref_" + duplicateIndex + " " + state.dump;
            }
          }
        } else if (type === "[object String]") {
          if (state.tag !== "?") {
            writeScalar(state, state.dump, level, iskey);
          }
        } else {
          if (state.skipInvalid)
            return false;
          throw new YAMLException("unacceptable kind of an object to dump " + type);
        }
        if (state.tag !== null && state.tag !== "?") {
          state.dump = "!<" + state.tag + "> " + state.dump;
        }
      }
      return true;
    }
    function getDuplicateReferences(object, state) {
      var objects = [], duplicatesIndexes = [], index, length;
      inspectNode(object, objects, duplicatesIndexes);
      for (index = 0, length = duplicatesIndexes.length; index < length; index += 1) {
        state.duplicates.push(objects[duplicatesIndexes[index]]);
      }
      state.usedDuplicates = new Array(length);
    }
    function inspectNode(object, objects, duplicatesIndexes) {
      var objectKeyList, index, length;
      if (object !== null && typeof object === "object") {
        index = objects.indexOf(object);
        if (index !== -1) {
          if (duplicatesIndexes.indexOf(index) === -1) {
            duplicatesIndexes.push(index);
          }
        } else {
          objects.push(object);
          if (Array.isArray(object)) {
            for (index = 0, length = object.length; index < length; index += 1) {
              inspectNode(object[index], objects, duplicatesIndexes);
            }
          } else {
            objectKeyList = Object.keys(object);
            for (index = 0, length = objectKeyList.length; index < length; index += 1) {
              inspectNode(object[objectKeyList[index]], objects, duplicatesIndexes);
            }
          }
        }
      }
    }
    function dump(input, options) {
      options = options || {};
      var state = new State(options);
      if (!state.noRefs)
        getDuplicateReferences(input, state);
      if (writeNode(state, 0, input, true, true))
        return state.dump + "\n";
      return "";
    }
    function safeDump(input, options) {
      return dump(input, common.extend({ schema: DEFAULT_SAFE_SCHEMA }, options));
    }
    module2.exports.dump = dump;
    module2.exports.safeDump = safeDump;
  }
});

// node_modules/js-yaml/lib/js-yaml.js
var require_js_yaml = __commonJS({
  "node_modules/js-yaml/lib/js-yaml.js"(exports, module2) {
    "use strict";
    var loader = require_loader();
    var dumper = require_dumper();
    function deprecated(name) {
      return function() {
        throw new Error("Function " + name + " is deprecated and cannot be used.");
      };
    }
    module2.exports.Type = require_type();
    module2.exports.Schema = require_schema();
    module2.exports.FAILSAFE_SCHEMA = require_failsafe();
    module2.exports.JSON_SCHEMA = require_json2();
    module2.exports.CORE_SCHEMA = require_core();
    module2.exports.DEFAULT_SAFE_SCHEMA = require_default_safe();
    module2.exports.DEFAULT_FULL_SCHEMA = require_default_full();
    module2.exports.load = loader.load;
    module2.exports.loadAll = loader.loadAll;
    module2.exports.safeLoad = loader.safeLoad;
    module2.exports.safeLoadAll = loader.safeLoadAll;
    module2.exports.dump = dumper.dump;
    module2.exports.safeDump = dumper.safeDump;
    module2.exports.YAMLException = require_exception();
    module2.exports.MINIMAL_SCHEMA = require_failsafe();
    module2.exports.SAFE_SCHEMA = require_default_safe();
    module2.exports.DEFAULT_SCHEMA = require_default_full();
    module2.exports.scan = deprecated("scan");
    module2.exports.parse = deprecated("parse");
    module2.exports.compose = deprecated("compose");
    module2.exports.addConstructor = deprecated("addConstructor");
  }
});

// node_modules/js-yaml/index.js
var require_js_yaml2 = __commonJS({
  "node_modules/js-yaml/index.js"(exports, module2) {
    "use strict";
    var yaml = require_js_yaml();
    module2.exports = yaml;
  }
});

// node_modules/front-matter/index.js
var require_front_matter = __commonJS({
  "node_modules/front-matter/index.js"(exports, module2) {
    var parser = require_js_yaml2();
    var optionalByteOrderMark = "\\ufeff?";
    var platform = typeof process !== "undefined" ? process.platform : "";
    var pattern = "^(" + optionalByteOrderMark + "(= yaml =|---)$([\\s\\S]*?)^(?:\\2|\\.\\.\\.)\\s*$" + (platform === "win32" ? "\\r?" : "") + "(?:\\n)?)";
    var regex = new RegExp(pattern, "m");
    module2.exports = extractor;
    module2.exports.test = test;
    function extractor(string, options) {
      string = string || "";
      var defaultOptions = { allowUnsafe: false };
      options = options instanceof Object ? { ...defaultOptions, ...options } : defaultOptions;
      options.allowUnsafe = Boolean(options.allowUnsafe);
      var lines = string.split(/(\r?\n)/);
      if (lines[0] && /= yaml =|---/.test(lines[0])) {
        return parse(string, options.allowUnsafe);
      } else {
        return {
          attributes: {},
          body: string,
          bodyBegin: 1
        };
      }
    }
    function computeLocation(match, body) {
      var line = 1;
      var pos = body.indexOf("\n");
      var offset = match.index + match[0].length;
      while (pos !== -1) {
        if (pos >= offset) {
          return line;
        }
        line++;
        pos = body.indexOf("\n", pos + 1);
      }
      return line;
    }
    function parse(string, allowUnsafe) {
      var match = regex.exec(string);
      if (!match) {
        return {
          attributes: {},
          body: string,
          bodyBegin: 1
        };
      }
      var loader = allowUnsafe ? parser.load : parser.safeLoad;
      var yaml = match[match.length - 1].replace(/^\s+|\s+$/g, "");
      var attributes = loader(yaml) || {};
      var body = string.replace(match[0], "");
      var line = computeLocation(match, string);
      return {
        attributes,
        body,
        bodyBegin: line,
        frontmatter: yaml
      };
    }
    function test(string) {
      string = string || "";
      return regex.test(string);
    }
  }
});

// node_modules/jquery/dist/jquery.js
var require_jquery = __commonJS({
  "node_modules/jquery/dist/jquery.js"(exports, module2) {
    (function(global2, factory) {
      "use strict";
      if (typeof module2 === "object" && typeof module2.exports === "object") {
        module2.exports = global2.document ? factory(global2, true) : function(w) {
          if (!w.document) {
            throw new Error("jQuery requires a window with a document");
          }
          return factory(w);
        };
      } else {
        factory(global2);
      }
    })(typeof window !== "undefined" ? window : exports, function(window2, noGlobal) {
      "use strict";
      var arr = [];
      var getProto = Object.getPrototypeOf;
      var slice = arr.slice;
      var flat = arr.flat ? function(array) {
        return arr.flat.call(array);
      } : function(array) {
        return arr.concat.apply([], array);
      };
      var push = arr.push;
      var indexOf = arr.indexOf;
      var class2type = {};
      var toString = class2type.toString;
      var hasOwn = class2type.hasOwnProperty;
      var fnToString = hasOwn.toString;
      var ObjectFunctionString = fnToString.call(Object);
      var support = {};
      var isFunction = function isFunction2(obj) {
        return typeof obj === "function" && typeof obj.nodeType !== "number" && typeof obj.item !== "function";
      };
      var isWindow = function isWindow2(obj) {
        return obj != null && obj === obj.window;
      };
      var document2 = window2.document;
      var preservedScriptAttributes = {
        type: true,
        src: true,
        nonce: true,
        noModule: true
      };
      function DOMEval(code, node, doc) {
        doc = doc || document2;
        var i, val, script = doc.createElement("script");
        script.text = code;
        if (node) {
          for (i in preservedScriptAttributes) {
            val = node[i] || node.getAttribute && node.getAttribute(i);
            if (val) {
              script.setAttribute(i, val);
            }
          }
        }
        doc.head.appendChild(script).parentNode.removeChild(script);
      }
      function toType(obj) {
        if (obj == null) {
          return obj + "";
        }
        return typeof obj === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : typeof obj;
      }
      var version = "3.6.3", jQuery = function(selector, context) {
        return new jQuery.fn.init(selector, context);
      };
      jQuery.fn = jQuery.prototype = {
        jquery: version,
        constructor: jQuery,
        length: 0,
        toArray: function() {
          return slice.call(this);
        },
        get: function(num) {
          if (num == null) {
            return slice.call(this);
          }
          return num < 0 ? this[num + this.length] : this[num];
        },
        pushStack: function(elems) {
          var ret = jQuery.merge(this.constructor(), elems);
          ret.prevObject = this;
          return ret;
        },
        each: function(callback) {
          return jQuery.each(this, callback);
        },
        map: function(callback) {
          return this.pushStack(jQuery.map(this, function(elem, i) {
            return callback.call(elem, i, elem);
          }));
        },
        slice: function() {
          return this.pushStack(slice.apply(this, arguments));
        },
        first: function() {
          return this.eq(0);
        },
        last: function() {
          return this.eq(-1);
        },
        even: function() {
          return this.pushStack(jQuery.grep(this, function(_elem, i) {
            return (i + 1) % 2;
          }));
        },
        odd: function() {
          return this.pushStack(jQuery.grep(this, function(_elem, i) {
            return i % 2;
          }));
        },
        eq: function(i) {
          var len = this.length, j = +i + (i < 0 ? len : 0);
          return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
        },
        end: function() {
          return this.prevObject || this.constructor();
        },
        push,
        sort: arr.sort,
        splice: arr.splice
      };
      jQuery.extend = jQuery.fn.extend = function() {
        var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false;
        if (typeof target === "boolean") {
          deep = target;
          target = arguments[i] || {};
          i++;
        }
        if (typeof target !== "object" && !isFunction(target)) {
          target = {};
        }
        if (i === length) {
          target = this;
          i--;
        }
        for (; i < length; i++) {
          if ((options = arguments[i]) != null) {
            for (name in options) {
              copy = options[name];
              if (name === "__proto__" || target === copy) {
                continue;
              }
              if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {
                src = target[name];
                if (copyIsArray && !Array.isArray(src)) {
                  clone = [];
                } else if (!copyIsArray && !jQuery.isPlainObject(src)) {
                  clone = {};
                } else {
                  clone = src;
                }
                copyIsArray = false;
                target[name] = jQuery.extend(deep, clone, copy);
              } else if (copy !== void 0) {
                target[name] = copy;
              }
            }
          }
        }
        return target;
      };
      jQuery.extend({
        expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),
        isReady: true,
        error: function(msg) {
          throw new Error(msg);
        },
        noop: function() {
        },
        isPlainObject: function(obj) {
          var proto, Ctor;
          if (!obj || toString.call(obj) !== "[object Object]") {
            return false;
          }
          proto = getProto(obj);
          if (!proto) {
            return true;
          }
          Ctor = hasOwn.call(proto, "constructor") && proto.constructor;
          return typeof Ctor === "function" && fnToString.call(Ctor) === ObjectFunctionString;
        },
        isEmptyObject: function(obj) {
          var name;
          for (name in obj) {
            return false;
          }
          return true;
        },
        globalEval: function(code, options, doc) {
          DOMEval(code, { nonce: options && options.nonce }, doc);
        },
        each: function(obj, callback) {
          var length, i = 0;
          if (isArrayLike(obj)) {
            length = obj.length;
            for (; i < length; i++) {
              if (callback.call(obj[i], i, obj[i]) === false) {
                break;
              }
            }
          } else {
            for (i in obj) {
              if (callback.call(obj[i], i, obj[i]) === false) {
                break;
              }
            }
          }
          return obj;
        },
        makeArray: function(arr2, results) {
          var ret = results || [];
          if (arr2 != null) {
            if (isArrayLike(Object(arr2))) {
              jQuery.merge(ret, typeof arr2 === "string" ? [arr2] : arr2);
            } else {
              push.call(ret, arr2);
            }
          }
          return ret;
        },
        inArray: function(elem, arr2, i) {
          return arr2 == null ? -1 : indexOf.call(arr2, elem, i);
        },
        merge: function(first, second) {
          var len = +second.length, j = 0, i = first.length;
          for (; j < len; j++) {
            first[i++] = second[j];
          }
          first.length = i;
          return first;
        },
        grep: function(elems, callback, invert) {
          var callbackInverse, matches = [], i = 0, length = elems.length, callbackExpect = !invert;
          for (; i < length; i++) {
            callbackInverse = !callback(elems[i], i);
            if (callbackInverse !== callbackExpect) {
              matches.push(elems[i]);
            }
          }
          return matches;
        },
        map: function(elems, callback, arg) {
          var length, value, i = 0, ret = [];
          if (isArrayLike(elems)) {
            length = elems.length;
            for (; i < length; i++) {
              value = callback(elems[i], i, arg);
              if (value != null) {
                ret.push(value);
              }
            }
          } else {
            for (i in elems) {
              value = callback(elems[i], i, arg);
              if (value != null) {
                ret.push(value);
              }
            }
          }
          return flat(ret);
        },
        guid: 1,
        support
      });
      if (typeof Symbol === "function") {
        jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];
      }
      jQuery.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function(_i, name) {
        class2type["[object " + name + "]"] = name.toLowerCase();
      });
      function isArrayLike(obj) {
        var length = !!obj && "length" in obj && obj.length, type = toType(obj);
        if (isFunction(obj) || isWindow(obj)) {
          return false;
        }
        return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
      }
      var Sizzle = function(window3) {
        var i, support2, Expr, getText, isXML, tokenize, compile, select, outermostContext, sortInput, hasDuplicate, setDocument, document3, docElem, documentIsHTML, rbuggyQSA, rbuggyMatches, matches, contains, expando = "sizzle" + 1 * new Date(), preferredDoc = window3.document, dirruns = 0, done = 0, classCache = createCache(), tokenCache = createCache(), compilerCache = createCache(), nonnativeSelectorCache = createCache(), sortOrder = function(a, b) {
          if (a === b) {
            hasDuplicate = true;
          }
          return 0;
        }, hasOwn2 = {}.hasOwnProperty, arr2 = [], pop = arr2.pop, pushNative = arr2.push, push2 = arr2.push, slice2 = arr2.slice, indexOf2 = function(list, elem) {
          var i2 = 0, len = list.length;
          for (; i2 < len; i2++) {
            if (list[i2] === elem) {
              return i2;
            }
          }
          return -1;
        }, booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped", whitespace2 = "[\\x20\\t\\r\\n\\f]", identifier = "(?:\\\\[\\da-fA-F]{1,6}" + whitespace2 + "?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+", attributes = "\\[" + whitespace2 + "*(" + identifier + ")(?:" + whitespace2 + "*([*^$|!~]?=)" + whitespace2 + `*(?:'((?:\\\\.|[^\\\\'])*)'|"((?:\\\\.|[^\\\\"])*)"|(` + identifier + "))|)" + whitespace2 + "*\\]", pseudos = ":(" + identifier + `)(?:\\((('((?:\\\\.|[^\\\\'])*)'|"((?:\\\\.|[^\\\\"])*)")|((?:\\\\.|[^\\\\()[\\]]|` + attributes + ")*)|.*)\\)|)", rwhitespace = new RegExp(whitespace2 + "+", "g"), rtrim2 = new RegExp("^" + whitespace2 + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace2 + "+$", "g"), rcomma = new RegExp("^" + whitespace2 + "*," + whitespace2 + "*"), rcombinators = new RegExp("^" + whitespace2 + "*([>+~]|" + whitespace2 + ")" + whitespace2 + "*"), rdescend = new RegExp(whitespace2 + "|>"), rpseudo = new RegExp(pseudos), ridentifier = new RegExp("^" + identifier + "$"), matchExpr = {
          "ID": new RegExp("^#(" + identifier + ")"),
          "CLASS": new RegExp("^\\.(" + identifier + ")"),
          "TAG": new RegExp("^(" + identifier + "|[*])"),
          "ATTR": new RegExp("^" + attributes),
          "PSEUDO": new RegExp("^" + pseudos),
          "CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace2 + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace2 + "*(?:([+-]|)" + whitespace2 + "*(\\d+)|))" + whitespace2 + "*\\)|)", "i"),
          "bool": new RegExp("^(?:" + booleans + ")$", "i"),
          "needsContext": new RegExp("^" + whitespace2 + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace2 + "*((?:-\\d)?\\d*)" + whitespace2 + "*\\)|)(?=[^-]|$)", "i")
        }, rhtml2 = /HTML$/i, rinputs = /^(?:input|select|textarea|button)$/i, rheader = /^h\d$/i, rnative = /^[^{]+\{\s*\[native \w/, rquickExpr2 = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, rsibling = /[+~]/, runescape = new RegExp("\\\\[\\da-fA-F]{1,6}" + whitespace2 + "?|\\\\([^\\r\\n\\f])", "g"), funescape = function(escape, nonHex) {
          var high = "0x" + escape.slice(1) - 65536;
          return nonHex ? nonHex : high < 0 ? String.fromCharCode(high + 65536) : String.fromCharCode(high >> 10 | 55296, high & 1023 | 56320);
        }, rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g, fcssescape = function(ch, asCodePoint) {
          if (asCodePoint) {
            if (ch === "\0") {
              return "\uFFFD";
            }
            return ch.slice(0, -1) + "\\" + ch.charCodeAt(ch.length - 1).toString(16) + " ";
          }
          return "\\" + ch;
        }, unloadHandler = function() {
          setDocument();
        }, inDisabledFieldset = addCombinator(function(elem) {
          return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";
        }, { dir: "parentNode", next: "legend" });
        try {
          push2.apply(arr2 = slice2.call(preferredDoc.childNodes), preferredDoc.childNodes);
          arr2[preferredDoc.childNodes.length].nodeType;
        } catch (e) {
          push2 = {
            apply: arr2.length ? function(target, els) {
              pushNative.apply(target, slice2.call(els));
            } : function(target, els) {
              var j = target.length, i2 = 0;
              while (target[j++] = els[i2++]) {
              }
              target.length = j - 1;
            }
          };
        }
        function Sizzle2(selector, context, results, seed) {
          var m, i2, elem, nid, match, groups, newSelector, newContext = context && context.ownerDocument, nodeType = context ? context.nodeType : 9;
          results = results || [];
          if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {
            return results;
          }
          if (!seed) {
            setDocument(context);
            context = context || document3;
            if (documentIsHTML) {
              if (nodeType !== 11 && (match = rquickExpr2.exec(selector))) {
                if (m = match[1]) {
                  if (nodeType === 9) {
                    if (elem = context.getElementById(m)) {
                      if (elem.id === m) {
                        results.push(elem);
                        return results;
                      }
                    } else {
                      return results;
                    }
                  } else {
                    if (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {
                      results.push(elem);
                      return results;
                    }
                  }
                } else if (match[2]) {
                  push2.apply(results, context.getElementsByTagName(selector));
                  return results;
                } else if ((m = match[3]) && support2.getElementsByClassName && context.getElementsByClassName) {
                  push2.apply(results, context.getElementsByClassName(m));
                  return results;
                }
              }
              if (support2.qsa && !nonnativeSelectorCache[selector + " "] && (!rbuggyQSA || !rbuggyQSA.test(selector)) && (nodeType !== 1 || context.nodeName.toLowerCase() !== "object")) {
                newSelector = selector;
                newContext = context;
                if (nodeType === 1 && (rdescend.test(selector) || rcombinators.test(selector))) {
                  newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
                  if (newContext !== context || !support2.scope) {
                    if (nid = context.getAttribute("id")) {
                      nid = nid.replace(rcssescape, fcssescape);
                    } else {
                      context.setAttribute("id", nid = expando);
                    }
                  }
                  groups = tokenize(selector);
                  i2 = groups.length;
                  while (i2--) {
                    groups[i2] = (nid ? "#" + nid : ":scope") + " " + toSelector(groups[i2]);
                  }
                  newSelector = groups.join(",");
                }
                try {
                  if (support2.cssSupportsSelector && !CSS.supports("selector(:is(" + newSelector + "))")) {
                    throw new Error();
                  }
                  push2.apply(results, newContext.querySelectorAll(newSelector));
                  return results;
                } catch (qsaError) {
                  nonnativeSelectorCache(selector, true);
                } finally {
                  if (nid === expando) {
                    context.removeAttribute("id");
                  }
                }
              }
            }
          }
          return select(selector.replace(rtrim2, "$1"), context, results, seed);
        }
        function createCache() {
          var keys = [];
          function cache(key, value) {
            if (keys.push(key + " ") > Expr.cacheLength) {
              delete cache[keys.shift()];
            }
            return cache[key + " "] = value;
          }
          return cache;
        }
        function markFunction(fn) {
          fn[expando] = true;
          return fn;
        }
        function assert(fn) {
          var el = document3.createElement("fieldset");
          try {
            return !!fn(el);
          } catch (e) {
            return false;
          } finally {
            if (el.parentNode) {
              el.parentNode.removeChild(el);
            }
            el = null;
          }
        }
        function addHandle(attrs, handler) {
          var arr3 = attrs.split("|"), i2 = arr3.length;
          while (i2--) {
            Expr.attrHandle[arr3[i2]] = handler;
          }
        }
        function siblingCheck(a, b) {
          var cur = b && a, diff = cur && a.nodeType === 1 && b.nodeType === 1 && a.sourceIndex - b.sourceIndex;
          if (diff) {
            return diff;
          }
          if (cur) {
            while (cur = cur.nextSibling) {
              if (cur === b) {
                return -1;
              }
            }
          }
          return a ? 1 : -1;
        }
        function createInputPseudo(type) {
          return function(elem) {
            var name = elem.nodeName.toLowerCase();
            return name === "input" && elem.type === type;
          };
        }
        function createButtonPseudo(type) {
          return function(elem) {
            var name = elem.nodeName.toLowerCase();
            return (name === "input" || name === "button") && elem.type === type;
          };
        }
        function createDisabledPseudo(disabled) {
          return function(elem) {
            if ("form" in elem) {
              if (elem.parentNode && elem.disabled === false) {
                if ("label" in elem) {
                  if ("label" in elem.parentNode) {
                    return elem.parentNode.disabled === disabled;
                  } else {
                    return elem.disabled === disabled;
                  }
                }
                return elem.isDisabled === disabled || elem.isDisabled !== !disabled && inDisabledFieldset(elem) === disabled;
              }
              return elem.disabled === disabled;
            } else if ("label" in elem) {
              return elem.disabled === disabled;
            }
            return false;
          };
        }
        function createPositionalPseudo(fn) {
          return markFunction(function(argument) {
            argument = +argument;
            return markFunction(function(seed, matches2) {
              var j, matchIndexes = fn([], seed.length, argument), i2 = matchIndexes.length;
              while (i2--) {
                if (seed[j = matchIndexes[i2]]) {
                  seed[j] = !(matches2[j] = seed[j]);
                }
              }
            });
          });
        }
        function testContext(context) {
          return context && typeof context.getElementsByTagName !== "undefined" && context;
        }
        support2 = Sizzle2.support = {};
        isXML = Sizzle2.isXML = function(elem) {
          var namespace = elem && elem.namespaceURI, docElem2 = elem && (elem.ownerDocument || elem).documentElement;
          return !rhtml2.test(namespace || docElem2 && docElem2.nodeName || "HTML");
        };
        setDocument = Sizzle2.setDocument = function(node) {
          var hasCompare, subWindow, doc = node ? node.ownerDocument || node : preferredDoc;
          if (doc == document3 || doc.nodeType !== 9 || !doc.documentElement) {
            return document3;
          }
          document3 = doc;
          docElem = document3.documentElement;
          documentIsHTML = !isXML(document3);
          if (preferredDoc != document3 && (subWindow = document3.defaultView) && subWindow.top !== subWindow) {
            if (subWindow.addEventListener) {
              subWindow.addEventListener("unload", unloadHandler, false);
            } else if (subWindow.attachEvent) {
              subWindow.attachEvent("onunload", unloadHandler);
            }
          }
          support2.scope = assert(function(el) {
            docElem.appendChild(el).appendChild(document3.createElement("div"));
            return typeof el.querySelectorAll !== "undefined" && !el.querySelectorAll(":scope fieldset div").length;
          });
          support2.cssSupportsSelector = assert(function() {
            return CSS.supports("selector(*)") && document3.querySelectorAll(":is(:jqfake)") && !CSS.supports("selector(:is(*,:jqfake))");
          });
          support2.attributes = assert(function(el) {
            el.className = "i";
            return !el.getAttribute("className");
          });
          support2.getElementsByTagName = assert(function(el) {
            el.appendChild(document3.createComment(""));
            return !el.getElementsByTagName("*").length;
          });
          support2.getElementsByClassName = rnative.test(document3.getElementsByClassName);
          support2.getById = assert(function(el) {
            docElem.appendChild(el).id = expando;
            return !document3.getElementsByName || !document3.getElementsByName(expando).length;
          });
          if (support2.getById) {
            Expr.filter["ID"] = function(id) {
              var attrId = id.replace(runescape, funescape);
              return function(elem) {
                return elem.getAttribute("id") === attrId;
              };
            };
            Expr.find["ID"] = function(id, context) {
              if (typeof context.getElementById !== "undefined" && documentIsHTML) {
                var elem = context.getElementById(id);
                return elem ? [elem] : [];
              }
            };
          } else {
            Expr.filter["ID"] = function(id) {
              var attrId = id.replace(runescape, funescape);
              return function(elem) {
                var node2 = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
                return node2 && node2.value === attrId;
              };
            };
            Expr.find["ID"] = function(id, context) {
              if (typeof context.getElementById !== "undefined" && documentIsHTML) {
                var node2, i2, elems, elem = context.getElementById(id);
                if (elem) {
                  node2 = elem.getAttributeNode("id");
                  if (node2 && node2.value === id) {
                    return [elem];
                  }
                  elems = context.getElementsByName(id);
                  i2 = 0;
                  while (elem = elems[i2++]) {
                    node2 = elem.getAttributeNode("id");
                    if (node2 && node2.value === id) {
                      return [elem];
                    }
                  }
                }
                return [];
              }
            };
          }
          Expr.find["TAG"] = support2.getElementsByTagName ? function(tag, context) {
            if (typeof context.getElementsByTagName !== "undefined") {
              return context.getElementsByTagName(tag);
            } else if (support2.qsa) {
              return context.querySelectorAll(tag);
            }
          } : function(tag, context) {
            var elem, tmp = [], i2 = 0, results = context.getElementsByTagName(tag);
            if (tag === "*") {
              while (elem = results[i2++]) {
                if (elem.nodeType === 1) {
                  tmp.push(elem);
                }
              }
              return tmp;
            }
            return results;
          };
          Expr.find["CLASS"] = support2.getElementsByClassName && function(className, context) {
            if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) {
              return context.getElementsByClassName(className);
            }
          };
          rbuggyMatches = [];
          rbuggyQSA = [];
          if (support2.qsa = rnative.test(document3.querySelectorAll)) {
            assert(function(el) {
              var input;
              docElem.appendChild(el).innerHTML = "<a id='" + expando + "'></a><select id='" + expando + "-\r\\' msallowcapture=''><option selected=''></option></select>";
              if (el.querySelectorAll("[msallowcapture^='']").length) {
                rbuggyQSA.push("[*^$]=" + whitespace2 + `*(?:''|"")`);
              }
              if (!el.querySelectorAll("[selected]").length) {
                rbuggyQSA.push("\\[" + whitespace2 + "*(?:value|" + booleans + ")");
              }
              if (!el.querySelectorAll("[id~=" + expando + "-]").length) {
                rbuggyQSA.push("~=");
              }
              input = document3.createElement("input");
              input.setAttribute("name", "");
              el.appendChild(input);
              if (!el.querySelectorAll("[name='']").length) {
                rbuggyQSA.push("\\[" + whitespace2 + "*name" + whitespace2 + "*=" + whitespace2 + `*(?:''|"")`);
              }
              if (!el.querySelectorAll(":checked").length) {
                rbuggyQSA.push(":checked");
              }
              if (!el.querySelectorAll("a#" + expando + "+*").length) {
                rbuggyQSA.push(".#.+[+~]");
              }
              el.querySelectorAll("\\\f");
              rbuggyQSA.push("[\\r\\n\\f]");
            });
            assert(function(el) {
              el.innerHTML = "<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";
              var input = document3.createElement("input");
              input.setAttribute("type", "hidden");
              el.appendChild(input).setAttribute("name", "D");
              if (el.querySelectorAll("[name=d]").length) {
                rbuggyQSA.push("name" + whitespace2 + "*[*^$|!~]?=");
              }
              if (el.querySelectorAll(":enabled").length !== 2) {
                rbuggyQSA.push(":enabled", ":disabled");
              }
              docElem.appendChild(el).disabled = true;
              if (el.querySelectorAll(":disabled").length !== 2) {
                rbuggyQSA.push(":enabled", ":disabled");
              }
              el.querySelectorAll("*,:x");
              rbuggyQSA.push(",.*:");
            });
          }
          if (support2.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {
            assert(function(el) {
              support2.disconnectedMatch = matches.call(el, "*");
              matches.call(el, "[s!='']:x");
              rbuggyMatches.push("!=", pseudos);
            });
          }
          if (!support2.cssSupportsSelector) {
            rbuggyQSA.push(":has");
          }
          rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
          rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));
          hasCompare = rnative.test(docElem.compareDocumentPosition);
          contains = hasCompare || rnative.test(docElem.contains) ? function(a, b) {
            var adown = a.nodeType === 9 && a.documentElement || a, bup = b && b.parentNode;
            return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
          } : function(a, b) {
            if (b) {
              while (b = b.parentNode) {
                if (b === a) {
                  return true;
                }
              }
            }
            return false;
          };
          sortOrder = hasCompare ? function(a, b) {
            if (a === b) {
              hasDuplicate = true;
              return 0;
            }
            var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
            if (compare) {
              return compare;
            }
            compare = (a.ownerDocument || a) == (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1;
            if (compare & 1 || !support2.sortDetached && b.compareDocumentPosition(a) === compare) {
              if (a == document3 || a.ownerDocument == preferredDoc && contains(preferredDoc, a)) {
                return -1;
              }
              if (b == document3 || b.ownerDocument == preferredDoc && contains(preferredDoc, b)) {
                return 1;
              }
              return sortInput ? indexOf2(sortInput, a) - indexOf2(sortInput, b) : 0;
            }
            return compare & 4 ? -1 : 1;
          } : function(a, b) {
            if (a === b) {
              hasDuplicate = true;
              return 0;
            }
            var cur, i2 = 0, aup = a.parentNode, bup = b.parentNode, ap = [a], bp = [b];
            if (!aup || !bup) {
              return a == document3 ? -1 : b == document3 ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf2(sortInput, a) - indexOf2(sortInput, b) : 0;
            } else if (aup === bup) {
              return siblingCheck(a, b);
            }
            cur = a;
            while (cur = cur.parentNode) {
              ap.unshift(cur);
            }
            cur = b;
            while (cur = cur.parentNode) {
              bp.unshift(cur);
            }
            while (ap[i2] === bp[i2]) {
              i2++;
            }
            return i2 ? siblingCheck(ap[i2], bp[i2]) : ap[i2] == preferredDoc ? -1 : bp[i2] == preferredDoc ? 1 : 0;
          };
          return document3;
        };
        Sizzle2.matches = function(expr, elements) {
          return Sizzle2(expr, null, null, elements);
        };
        Sizzle2.matchesSelector = function(elem, expr) {
          setDocument(elem);
          if (support2.matchesSelector && documentIsHTML && !nonnativeSelectorCache[expr + " "] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
            try {
              var ret = matches.call(elem, expr);
              if (ret || support2.disconnectedMatch || elem.document && elem.document.nodeType !== 11) {
                return ret;
              }
            } catch (e) {
              nonnativeSelectorCache(expr, true);
            }
          }
          return Sizzle2(expr, document3, null, [elem]).length > 0;
        };
        Sizzle2.contains = function(context, elem) {
          if ((context.ownerDocument || context) != document3) {
            setDocument(context);
          }
          return contains(context, elem);
        };
        Sizzle2.attr = function(elem, name) {
          if ((elem.ownerDocument || elem) != document3) {
            setDocument(elem);
          }
          var fn = Expr.attrHandle[name.toLowerCase()], val = fn && hasOwn2.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : void 0;
          return val !== void 0 ? val : support2.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
        };
        Sizzle2.escape = function(sel) {
          return (sel + "").replace(rcssescape, fcssescape);
        };
        Sizzle2.error = function(msg) {
          throw new Error("Syntax error, unrecognized expression: " + msg);
        };
        Sizzle2.uniqueSort = function(results) {
          var elem, duplicates = [], j = 0, i2 = 0;
          hasDuplicate = !support2.detectDuplicates;
          sortInput = !support2.sortStable && results.slice(0);
          results.sort(sortOrder);
          if (hasDuplicate) {
            while (elem = results[i2++]) {
              if (elem === results[i2]) {
                j = duplicates.push(i2);
              }
            }
            while (j--) {
              results.splice(duplicates[j], 1);
            }
          }
          sortInput = null;
          return results;
        };
        getText = Sizzle2.getText = function(elem) {
          var node, ret = "", i2 = 0, nodeType = elem.nodeType;
          if (!nodeType) {
            while (node = elem[i2++]) {
              ret += getText(node);
            }
          } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
            if (typeof elem.textContent === "string") {
              return elem.textContent;
            } else {
              for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                ret += getText(elem);
              }
            }
          } else if (nodeType === 3 || nodeType === 4) {
            return elem.nodeValue;
          }
          return ret;
        };
        Expr = Sizzle2.selectors = {
          cacheLength: 50,
          createPseudo: markFunction,
          match: matchExpr,
          attrHandle: {},
          find: {},
          relative: {
            ">": { dir: "parentNode", first: true },
            " ": { dir: "parentNode" },
            "+": { dir: "previousSibling", first: true },
            "~": { dir: "previousSibling" }
          },
          preFilter: {
            "ATTR": function(match) {
              match[1] = match[1].replace(runescape, funescape);
              match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);
              if (match[2] === "~=") {
                match[3] = " " + match[3] + " ";
              }
              return match.slice(0, 4);
            },
            "CHILD": function(match) {
              match[1] = match[1].toLowerCase();
              if (match[1].slice(0, 3) === "nth") {
                if (!match[3]) {
                  Sizzle2.error(match[0]);
                }
                match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
                match[5] = +(match[7] + match[8] || match[3] === "odd");
              } else if (match[3]) {
                Sizzle2.error(match[0]);
              }
              return match;
            },
            "PSEUDO": function(match) {
              var excess, unquoted = !match[6] && match[2];
              if (matchExpr["CHILD"].test(match[0])) {
                return null;
              }
              if (match[3]) {
                match[2] = match[4] || match[5] || "";
              } else if (unquoted && rpseudo.test(unquoted) && (excess = tokenize(unquoted, true)) && (excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
                match[0] = match[0].slice(0, excess);
                match[2] = unquoted.slice(0, excess);
              }
              return match.slice(0, 3);
            }
          },
          filter: {
            "TAG": function(nodeNameSelector) {
              var nodeName2 = nodeNameSelector.replace(runescape, funescape).toLowerCase();
              return nodeNameSelector === "*" ? function() {
                return true;
              } : function(elem) {
                return elem.nodeName && elem.nodeName.toLowerCase() === nodeName2;
              };
            },
            "CLASS": function(className) {
              var pattern = classCache[className + " "];
              return pattern || (pattern = new RegExp("(^|" + whitespace2 + ")" + className + "(" + whitespace2 + "|$)")) && classCache(className, function(elem) {
                return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
              });
            },
            "ATTR": function(name, operator, check) {
              return function(elem) {
                var result = Sizzle2.attr(elem, name);
                if (result == null) {
                  return operator === "!=";
                }
                if (!operator) {
                  return true;
                }
                result += "";
                return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false;
              };
            },
            "CHILD": function(type, what, _argument, first, last) {
              var simple = type.slice(0, 3) !== "nth", forward = type.slice(-4) !== "last", ofType = what === "of-type";
              return first === 1 && last === 0 ? function(elem) {
                return !!elem.parentNode;
              } : function(elem, _context, xml) {
                var cache, uniqueCache, outerCache, node, nodeIndex, start, dir2 = simple !== forward ? "nextSibling" : "previousSibling", parent = elem.parentNode, name = ofType && elem.nodeName.toLowerCase(), useCache = !xml && !ofType, diff = false;
                if (parent) {
                  if (simple) {
                    while (dir2) {
                      node = elem;
                      while (node = node[dir2]) {
                        if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
                          return false;
                        }
                      }
                      start = dir2 = type === "only" && !start && "nextSibling";
                    }
                    return true;
                  }
                  start = [forward ? parent.firstChild : parent.lastChild];
                  if (forward && useCache) {
                    node = parent;
                    outerCache = node[expando] || (node[expando] = {});
                    uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                    cache = uniqueCache[type] || [];
                    nodeIndex = cache[0] === dirruns && cache[1];
                    diff = nodeIndex && cache[2];
                    node = nodeIndex && parent.childNodes[nodeIndex];
                    while (node = ++nodeIndex && node && node[dir2] || (diff = nodeIndex = 0) || start.pop()) {
                      if (node.nodeType === 1 && ++diff && node === elem) {
                        uniqueCache[type] = [dirruns, nodeIndex, diff];
                        break;
                      }
                    }
                  } else {
                    if (useCache) {
                      node = elem;
                      outerCache = node[expando] || (node[expando] = {});
                      uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                      cache = uniqueCache[type] || [];
                      nodeIndex = cache[0] === dirruns && cache[1];
                      diff = nodeIndex;
                    }
                    if (diff === false) {
                      while (node = ++nodeIndex && node && node[dir2] || (diff = nodeIndex = 0) || start.pop()) {
                        if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
                          if (useCache) {
                            outerCache = node[expando] || (node[expando] = {});
                            uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                            uniqueCache[type] = [dirruns, diff];
                          }
                          if (node === elem) {
                            break;
                          }
                        }
                      }
                    }
                  }
                  diff -= last;
                  return diff === first || diff % first === 0 && diff / first >= 0;
                }
              };
            },
            "PSEUDO": function(pseudo, argument) {
              var args, fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle2.error("unsupported pseudo: " + pseudo);
              if (fn[expando]) {
                return fn(argument);
              }
              if (fn.length > 1) {
                args = [pseudo, pseudo, "", argument];
                return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function(seed, matches2) {
                  var idx, matched = fn(seed, argument), i2 = matched.length;
                  while (i2--) {
                    idx = indexOf2(seed, matched[i2]);
                    seed[idx] = !(matches2[idx] = matched[i2]);
                  }
                }) : function(elem) {
                  return fn(elem, 0, args);
                };
              }
              return fn;
            }
          },
          pseudos: {
            "not": markFunction(function(selector) {
              var input = [], results = [], matcher = compile(selector.replace(rtrim2, "$1"));
              return matcher[expando] ? markFunction(function(seed, matches2, _context, xml) {
                var elem, unmatched = matcher(seed, null, xml, []), i2 = seed.length;
                while (i2--) {
                  if (elem = unmatched[i2]) {
                    seed[i2] = !(matches2[i2] = elem);
                  }
                }
              }) : function(elem, _context, xml) {
                input[0] = elem;
                matcher(input, null, xml, results);
                input[0] = null;
                return !results.pop();
              };
            }),
            "has": markFunction(function(selector) {
              return function(elem) {
                return Sizzle2(selector, elem).length > 0;
              };
            }),
            "contains": markFunction(function(text) {
              text = text.replace(runescape, funescape);
              return function(elem) {
                return (elem.textContent || getText(elem)).indexOf(text) > -1;
              };
            }),
            "lang": markFunction(function(lang) {
              if (!ridentifier.test(lang || "")) {
                Sizzle2.error("unsupported lang: " + lang);
              }
              lang = lang.replace(runescape, funescape).toLowerCase();
              return function(elem) {
                var elemLang;
                do {
                  if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {
                    elemLang = elemLang.toLowerCase();
                    return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
                  }
                } while ((elem = elem.parentNode) && elem.nodeType === 1);
                return false;
              };
            }),
            "target": function(elem) {
              var hash = window3.location && window3.location.hash;
              return hash && hash.slice(1) === elem.id;
            },
            "root": function(elem) {
              return elem === docElem;
            },
            "focus": function(elem) {
              return elem === document3.activeElement && (!document3.hasFocus || document3.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
            },
            "enabled": createDisabledPseudo(false),
            "disabled": createDisabledPseudo(true),
            "checked": function(elem) {
              var nodeName2 = elem.nodeName.toLowerCase();
              return nodeName2 === "input" && !!elem.checked || nodeName2 === "option" && !!elem.selected;
            },
            "selected": function(elem) {
              if (elem.parentNode) {
                elem.parentNode.selectedIndex;
              }
              return elem.selected === true;
            },
            "empty": function(elem) {
              for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                if (elem.nodeType < 6) {
                  return false;
                }
              }
              return true;
            },
            "parent": function(elem) {
              return !Expr.pseudos["empty"](elem);
            },
            "header": function(elem) {
              return rheader.test(elem.nodeName);
            },
            "input": function(elem) {
              return rinputs.test(elem.nodeName);
            },
            "button": function(elem) {
              var name = elem.nodeName.toLowerCase();
              return name === "input" && elem.type === "button" || name === "button";
            },
            "text": function(elem) {
              var attr;
              return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && ((attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
            },
            "first": createPositionalPseudo(function() {
              return [0];
            }),
            "last": createPositionalPseudo(function(_matchIndexes, length) {
              return [length - 1];
            }),
            "eq": createPositionalPseudo(function(_matchIndexes, length, argument) {
              return [argument < 0 ? argument + length : argument];
            }),
            "even": createPositionalPseudo(function(matchIndexes, length) {
              var i2 = 0;
              for (; i2 < length; i2 += 2) {
                matchIndexes.push(i2);
              }
              return matchIndexes;
            }),
            "odd": createPositionalPseudo(function(matchIndexes, length) {
              var i2 = 1;
              for (; i2 < length; i2 += 2) {
                matchIndexes.push(i2);
              }
              return matchIndexes;
            }),
            "lt": createPositionalPseudo(function(matchIndexes, length, argument) {
              var i2 = argument < 0 ? argument + length : argument > length ? length : argument;
              for (; --i2 >= 0; ) {
                matchIndexes.push(i2);
              }
              return matchIndexes;
            }),
            "gt": createPositionalPseudo(function(matchIndexes, length, argument) {
              var i2 = argument < 0 ? argument + length : argument;
              for (; ++i2 < length; ) {
                matchIndexes.push(i2);
              }
              return matchIndexes;
            })
          }
        };
        Expr.pseudos["nth"] = Expr.pseudos["eq"];
        for (i in { radio: true, checkbox: true, file: true, password: true, image: true }) {
          Expr.pseudos[i] = createInputPseudo(i);
        }
        for (i in { submit: true, reset: true }) {
          Expr.pseudos[i] = createButtonPseudo(i);
        }
        function setFilters() {
        }
        setFilters.prototype = Expr.filters = Expr.pseudos;
        Expr.setFilters = new setFilters();
        tokenize = Sizzle2.tokenize = function(selector, parseOnly) {
          var matched, match, tokens, type, soFar, groups, preFilters, cached = tokenCache[selector + " "];
          if (cached) {
            return parseOnly ? 0 : cached.slice(0);
          }
          soFar = selector;
          groups = [];
          preFilters = Expr.preFilter;
          while (soFar) {
            if (!matched || (match = rcomma.exec(soFar))) {
              if (match) {
                soFar = soFar.slice(match[0].length) || soFar;
              }
              groups.push(tokens = []);
            }
            matched = false;
            if (match = rcombinators.exec(soFar)) {
              matched = match.shift();
              tokens.push({
                value: matched,
                type: match[0].replace(rtrim2, " ")
              });
              soFar = soFar.slice(matched.length);
            }
            for (type in Expr.filter) {
              if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
                matched = match.shift();
                tokens.push({
                  value: matched,
                  type,
                  matches: match
                });
                soFar = soFar.slice(matched.length);
              }
            }
            if (!matched) {
              break;
            }
          }
          return parseOnly ? soFar.length : soFar ? Sizzle2.error(selector) : tokenCache(selector, groups).slice(0);
        };
        function toSelector(tokens) {
          var i2 = 0, len = tokens.length, selector = "";
          for (; i2 < len; i2++) {
            selector += tokens[i2].value;
          }
          return selector;
        }
        function addCombinator(matcher, combinator, base) {
          var dir2 = combinator.dir, skip = combinator.next, key = skip || dir2, checkNonElements = base && key === "parentNode", doneName = done++;
          return combinator.first ? function(elem, context, xml) {
            while (elem = elem[dir2]) {
              if (elem.nodeType === 1 || checkNonElements) {
                return matcher(elem, context, xml);
              }
            }
            return false;
          } : function(elem, context, xml) {
            var oldCache, uniqueCache, outerCache, newCache = [dirruns, doneName];
            if (xml) {
              while (elem = elem[dir2]) {
                if (elem.nodeType === 1 || checkNonElements) {
                  if (matcher(elem, context, xml)) {
                    return true;
                  }
                }
              }
            } else {
              while (elem = elem[dir2]) {
                if (elem.nodeType === 1 || checkNonElements) {
                  outerCache = elem[expando] || (elem[expando] = {});
                  uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});
                  if (skip && skip === elem.nodeName.toLowerCase()) {
                    elem = elem[dir2] || elem;
                  } else if ((oldCache = uniqueCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
                    return newCache[2] = oldCache[2];
                  } else {
                    uniqueCache[key] = newCache;
                    if (newCache[2] = matcher(elem, context, xml)) {
                      return true;
                    }
                  }
                }
              }
            }
            return false;
          };
        }
        function elementMatcher(matchers) {
          return matchers.length > 1 ? function(elem, context, xml) {
            var i2 = matchers.length;
            while (i2--) {
              if (!matchers[i2](elem, context, xml)) {
                return false;
              }
            }
            return true;
          } : matchers[0];
        }
        function multipleContexts(selector, contexts, results) {
          var i2 = 0, len = contexts.length;
          for (; i2 < len; i2++) {
            Sizzle2(selector, contexts[i2], results);
          }
          return results;
        }
        function condense(unmatched, map, filter, context, xml) {
          var elem, newUnmatched = [], i2 = 0, len = unmatched.length, mapped = map != null;
          for (; i2 < len; i2++) {
            if (elem = unmatched[i2]) {
              if (!filter || filter(elem, context, xml)) {
                newUnmatched.push(elem);
                if (mapped) {
                  map.push(i2);
                }
              }
            }
          }
          return newUnmatched;
        }
        function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
          if (postFilter && !postFilter[expando]) {
            postFilter = setMatcher(postFilter);
          }
          if (postFinder && !postFinder[expando]) {
            postFinder = setMatcher(postFinder, postSelector);
          }
          return markFunction(function(seed, results, context, xml) {
            var temp, i2, elem, preMap = [], postMap = [], preexisting = results.length, elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []), matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems, matcherOut = matcher ? postFinder || (seed ? preFilter : preexisting || postFilter) ? [] : results : matcherIn;
            if (matcher) {
              matcher(matcherIn, matcherOut, context, xml);
            }
            if (postFilter) {
              temp = condense(matcherOut, postMap);
              postFilter(temp, [], context, xml);
              i2 = temp.length;
              while (i2--) {
                if (elem = temp[i2]) {
                  matcherOut[postMap[i2]] = !(matcherIn[postMap[i2]] = elem);
                }
              }
            }
            if (seed) {
              if (postFinder || preFilter) {
                if (postFinder) {
                  temp = [];
                  i2 = matcherOut.length;
                  while (i2--) {
                    if (elem = matcherOut[i2]) {
                      temp.push(matcherIn[i2] = elem);
                    }
                  }
                  postFinder(null, matcherOut = [], temp, xml);
                }
                i2 = matcherOut.length;
                while (i2--) {
                  if ((elem = matcherOut[i2]) && (temp = postFinder ? indexOf2(seed, elem) : preMap[i2]) > -1) {
                    seed[temp] = !(results[temp] = elem);
                  }
                }
              }
            } else {
              matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
              if (postFinder) {
                postFinder(null, results, matcherOut, xml);
              } else {
                push2.apply(results, matcherOut);
              }
            }
          });
        }
        function matcherFromTokens(tokens) {
          var checkContext, matcher, j, len = tokens.length, leadingRelative = Expr.relative[tokens[0].type], implicitRelative = leadingRelative || Expr.relative[" "], i2 = leadingRelative ? 1 : 0, matchContext = addCombinator(function(elem) {
            return elem === checkContext;
          }, implicitRelative, true), matchAnyContext = addCombinator(function(elem) {
            return indexOf2(checkContext, elem) > -1;
          }, implicitRelative, true), matchers = [function(elem, context, xml) {
            var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
            checkContext = null;
            return ret;
          }];
          for (; i2 < len; i2++) {
            if (matcher = Expr.relative[tokens[i2].type]) {
              matchers = [addCombinator(elementMatcher(matchers), matcher)];
            } else {
              matcher = Expr.filter[tokens[i2].type].apply(null, tokens[i2].matches);
              if (matcher[expando]) {
                j = ++i2;
                for (; j < len; j++) {
                  if (Expr.relative[tokens[j].type]) {
                    break;
                  }
                }
                return setMatcher(i2 > 1 && elementMatcher(matchers), i2 > 1 && toSelector(tokens.slice(0, i2 - 1).concat({ value: tokens[i2 - 2].type === " " ? "*" : "" })).replace(rtrim2, "$1"), matcher, i2 < j && matcherFromTokens(tokens.slice(i2, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
              }
              matchers.push(matcher);
            }
          }
          return elementMatcher(matchers);
        }
        function matcherFromGroupMatchers(elementMatchers, setMatchers) {
          var bySet = setMatchers.length > 0, byElement = elementMatchers.length > 0, superMatcher = function(seed, context, xml, results, outermost) {
            var elem, j, matcher, matchedCount = 0, i2 = "0", unmatched = seed && [], setMatched = [], contextBackup = outermostContext, elems = seed || byElement && Expr.find["TAG"]("*", outermost), dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1, len = elems.length;
            if (outermost) {
              outermostContext = context == document3 || context || outermost;
            }
            for (; i2 !== len && (elem = elems[i2]) != null; i2++) {
              if (byElement && elem) {
                j = 0;
                if (!context && elem.ownerDocument != document3) {
                  setDocument(elem);
                  xml = !documentIsHTML;
                }
                while (matcher = elementMatchers[j++]) {
                  if (matcher(elem, context || document3, xml)) {
                    results.push(elem);
                    break;
                  }
                }
                if (outermost) {
                  dirruns = dirrunsUnique;
                }
              }
              if (bySet) {
                if (elem = !matcher && elem) {
                  matchedCount--;
                }
                if (seed) {
                  unmatched.push(elem);
                }
              }
            }
            matchedCount += i2;
            if (bySet && i2 !== matchedCount) {
              j = 0;
              while (matcher = setMatchers[j++]) {
                matcher(unmatched, setMatched, context, xml);
              }
              if (seed) {
                if (matchedCount > 0) {
                  while (i2--) {
                    if (!(unmatched[i2] || setMatched[i2])) {
                      setMatched[i2] = pop.call(results);
                    }
                  }
                }
                setMatched = condense(setMatched);
              }
              push2.apply(results, setMatched);
              if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {
                Sizzle2.uniqueSort(results);
              }
            }
            if (outermost) {
              dirruns = dirrunsUnique;
              outermostContext = contextBackup;
            }
            return unmatched;
          };
          return bySet ? markFunction(superMatcher) : superMatcher;
        }
        compile = Sizzle2.compile = function(selector, match) {
          var i2, setMatchers = [], elementMatchers = [], cached = compilerCache[selector + " "];
          if (!cached) {
            if (!match) {
              match = tokenize(selector);
            }
            i2 = match.length;
            while (i2--) {
              cached = matcherFromTokens(match[i2]);
              if (cached[expando]) {
                setMatchers.push(cached);
              } else {
                elementMatchers.push(cached);
              }
            }
            cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));
            cached.selector = selector;
          }
          return cached;
        };
        select = Sizzle2.select = function(selector, context, results, seed) {
          var i2, tokens, token, type, find, compiled = typeof selector === "function" && selector, match = !seed && tokenize(selector = compiled.selector || selector);
          results = results || [];
          if (match.length === 1) {
            tokens = match[0] = match[0].slice(0);
            if (tokens.length > 2 && (token = tokens[0]).type === "ID" && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
              context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];
              if (!context) {
                return results;
              } else if (compiled) {
                context = context.parentNode;
              }
              selector = selector.slice(tokens.shift().value.length);
            }
            i2 = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
            while (i2--) {
              token = tokens[i2];
              if (Expr.relative[type = token.type]) {
                break;
              }
              if (find = Expr.find[type]) {
                if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {
                  tokens.splice(i2, 1);
                  selector = seed.length && toSelector(tokens);
                  if (!selector) {
                    push2.apply(results, seed);
                    return results;
                  }
                  break;
                }
              }
            }
          }
          (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);
          return results;
        };
        support2.sortStable = expando.split("").sort(sortOrder).join("") === expando;
        support2.detectDuplicates = !!hasDuplicate;
        setDocument();
        support2.sortDetached = assert(function(el) {
          return el.compareDocumentPosition(document3.createElement("fieldset")) & 1;
        });
        if (!assert(function(el) {
          el.innerHTML = "<a href='#'></a>";
          return el.firstChild.getAttribute("href") === "#";
        })) {
          addHandle("type|href|height|width", function(elem, name, isXML2) {
            if (!isXML2) {
              return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
            }
          });
        }
        if (!support2.attributes || !assert(function(el) {
          el.innerHTML = "<input/>";
          el.firstChild.setAttribute("value", "");
          return el.firstChild.getAttribute("value") === "";
        })) {
          addHandle("value", function(elem, _name, isXML2) {
            if (!isXML2 && elem.nodeName.toLowerCase() === "input") {
              return elem.defaultValue;
            }
          });
        }
        if (!assert(function(el) {
          return el.getAttribute("disabled") == null;
        })) {
          addHandle(booleans, function(elem, name, isXML2) {
            var val;
            if (!isXML2) {
              return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
            }
          });
        }
        return Sizzle2;
      }(window2);
      jQuery.find = Sizzle;
      jQuery.expr = Sizzle.selectors;
      jQuery.expr[":"] = jQuery.expr.pseudos;
      jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
      jQuery.text = Sizzle.getText;
      jQuery.isXMLDoc = Sizzle.isXML;
      jQuery.contains = Sizzle.contains;
      jQuery.escapeSelector = Sizzle.escape;
      var dir = function(elem, dir2, until) {
        var matched = [], truncate = until !== void 0;
        while ((elem = elem[dir2]) && elem.nodeType !== 9) {
          if (elem.nodeType === 1) {
            if (truncate && jQuery(elem).is(until)) {
              break;
            }
            matched.push(elem);
          }
        }
        return matched;
      };
      var siblings = function(n, elem) {
        var matched = [];
        for (; n; n = n.nextSibling) {
          if (n.nodeType === 1 && n !== elem) {
            matched.push(n);
          }
        }
        return matched;
      };
      var rneedsContext = jQuery.expr.match.needsContext;
      function nodeName(elem, name) {
        return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
      }
      var rsingleTag = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;
      function winnow(elements, qualifier, not) {
        if (isFunction(qualifier)) {
          return jQuery.grep(elements, function(elem, i) {
            return !!qualifier.call(elem, i, elem) !== not;
          });
        }
        if (qualifier.nodeType) {
          return jQuery.grep(elements, function(elem) {
            return elem === qualifier !== not;
          });
        }
        if (typeof qualifier !== "string") {
          return jQuery.grep(elements, function(elem) {
            return indexOf.call(qualifier, elem) > -1 !== not;
          });
        }
        return jQuery.filter(qualifier, elements, not);
      }
      jQuery.filter = function(expr, elems, not) {
        var elem = elems[0];
        if (not) {
          expr = ":not(" + expr + ")";
        }
        if (elems.length === 1 && elem.nodeType === 1) {
          return jQuery.find.matchesSelector(elem, expr) ? [elem] : [];
        }
        return jQuery.find.matches(expr, jQuery.grep(elems, function(elem2) {
          return elem2.nodeType === 1;
        }));
      };
      jQuery.fn.extend({
        find: function(selector) {
          var i, ret, len = this.length, self2 = this;
          if (typeof selector !== "string") {
            return this.pushStack(jQuery(selector).filter(function() {
              for (i = 0; i < len; i++) {
                if (jQuery.contains(self2[i], this)) {
                  return true;
                }
              }
            }));
          }
          ret = this.pushStack([]);
          for (i = 0; i < len; i++) {
            jQuery.find(selector, self2[i], ret);
          }
          return len > 1 ? jQuery.uniqueSort(ret) : ret;
        },
        filter: function(selector) {
          return this.pushStack(winnow(this, selector || [], false));
        },
        not: function(selector) {
          return this.pushStack(winnow(this, selector || [], true));
        },
        is: function(selector) {
          return !!winnow(this, typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
        }
      });
      var rootjQuery, rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/, init = jQuery.fn.init = function(selector, context, root) {
        var match, elem;
        if (!selector) {
          return this;
        }
        root = root || rootjQuery;
        if (typeof selector === "string") {
          if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {
            match = [null, selector, null];
          } else {
            match = rquickExpr.exec(selector);
          }
          if (match && (match[1] || !context)) {
            if (match[1]) {
              context = context instanceof jQuery ? context[0] : context;
              jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document2, true));
              if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
                for (match in context) {
                  if (isFunction(this[match])) {
                    this[match](context[match]);
                  } else {
                    this.attr(match, context[match]);
                  }
                }
              }
              return this;
            } else {
              elem = document2.getElementById(match[2]);
              if (elem) {
                this[0] = elem;
                this.length = 1;
              }
              return this;
            }
          } else if (!context || context.jquery) {
            return (context || root).find(selector);
          } else {
            return this.constructor(context).find(selector);
          }
        } else if (selector.nodeType) {
          this[0] = selector;
          this.length = 1;
          return this;
        } else if (isFunction(selector)) {
          return root.ready !== void 0 ? root.ready(selector) : selector(jQuery);
        }
        return jQuery.makeArray(selector, this);
      };
      init.prototype = jQuery.fn;
      rootjQuery = jQuery(document2);
      var rparentsprev = /^(?:parents|prev(?:Until|All))/, guaranteedUnique = {
        children: true,
        contents: true,
        next: true,
        prev: true
      };
      jQuery.fn.extend({
        has: function(target) {
          var targets = jQuery(target, this), l = targets.length;
          return this.filter(function() {
            var i = 0;
            for (; i < l; i++) {
              if (jQuery.contains(this, targets[i])) {
                return true;
              }
            }
          });
        },
        closest: function(selectors, context) {
          var cur, i = 0, l = this.length, matched = [], targets = typeof selectors !== "string" && jQuery(selectors);
          if (!rneedsContext.test(selectors)) {
            for (; i < l; i++) {
              for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
                if (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 : cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {
                  matched.push(cur);
                  break;
                }
              }
            }
          }
          return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);
        },
        index: function(elem) {
          if (!elem) {
            return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
          }
          if (typeof elem === "string") {
            return indexOf.call(jQuery(elem), this[0]);
          }
          return indexOf.call(this, elem.jquery ? elem[0] : elem);
        },
        add: function(selector, context) {
          return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context))));
        },
        addBack: function(selector) {
          return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
        }
      });
      function sibling(cur, dir2) {
        while ((cur = cur[dir2]) && cur.nodeType !== 1) {
        }
        return cur;
      }
      jQuery.each({
        parent: function(elem) {
          var parent = elem.parentNode;
          return parent && parent.nodeType !== 11 ? parent : null;
        },
        parents: function(elem) {
          return dir(elem, "parentNode");
        },
        parentsUntil: function(elem, _i, until) {
          return dir(elem, "parentNode", until);
        },
        next: function(elem) {
          return sibling(elem, "nextSibling");
        },
        prev: function(elem) {
          return sibling(elem, "previousSibling");
        },
        nextAll: function(elem) {
          return dir(elem, "nextSibling");
        },
        prevAll: function(elem) {
          return dir(elem, "previousSibling");
        },
        nextUntil: function(elem, _i, until) {
          return dir(elem, "nextSibling", until);
        },
        prevUntil: function(elem, _i, until) {
          return dir(elem, "previousSibling", until);
        },
        siblings: function(elem) {
          return siblings((elem.parentNode || {}).firstChild, elem);
        },
        children: function(elem) {
          return siblings(elem.firstChild);
        },
        contents: function(elem) {
          if (elem.contentDocument != null && getProto(elem.contentDocument)) {
            return elem.contentDocument;
          }
          if (nodeName(elem, "template")) {
            elem = elem.content || elem;
          }
          return jQuery.merge([], elem.childNodes);
        }
      }, function(name, fn) {
        jQuery.fn[name] = function(until, selector) {
          var matched = jQuery.map(this, fn, until);
          if (name.slice(-5) !== "Until") {
            selector = until;
          }
          if (selector && typeof selector === "string") {
            matched = jQuery.filter(selector, matched);
          }
          if (this.length > 1) {
            if (!guaranteedUnique[name]) {
              jQuery.uniqueSort(matched);
            }
            if (rparentsprev.test(name)) {
              matched.reverse();
            }
          }
          return this.pushStack(matched);
        };
      });
      var rnothtmlwhite = /[^\x20\t\r\n\f]+/g;
      function createOptions(options) {
        var object = {};
        jQuery.each(options.match(rnothtmlwhite) || [], function(_, flag) {
          object[flag] = true;
        });
        return object;
      }
      jQuery.Callbacks = function(options) {
        options = typeof options === "string" ? createOptions(options) : jQuery.extend({}, options);
        var firing, memory, fired, locked, list = [], queue = [], firingIndex = -1, fire = function() {
          locked = locked || options.once;
          fired = firing = true;
          for (; queue.length; firingIndex = -1) {
            memory = queue.shift();
            while (++firingIndex < list.length) {
              if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {
                firingIndex = list.length;
                memory = false;
              }
            }
          }
          if (!options.memory) {
            memory = false;
          }
          firing = false;
          if (locked) {
            if (memory) {
              list = [];
            } else {
              list = "";
            }
          }
        }, self2 = {
          add: function() {
            if (list) {
              if (memory && !firing) {
                firingIndex = list.length - 1;
                queue.push(memory);
              }
              (function add(args) {
                jQuery.each(args, function(_, arg) {
                  if (isFunction(arg)) {
                    if (!options.unique || !self2.has(arg)) {
                      list.push(arg);
                    }
                  } else if (arg && arg.length && toType(arg) !== "string") {
                    add(arg);
                  }
                });
              })(arguments);
              if (memory && !firing) {
                fire();
              }
            }
            return this;
          },
          remove: function() {
            jQuery.each(arguments, function(_, arg) {
              var index;
              while ((index = jQuery.inArray(arg, list, index)) > -1) {
                list.splice(index, 1);
                if (index <= firingIndex) {
                  firingIndex--;
                }
              }
            });
            return this;
          },
          has: function(fn) {
            return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;
          },
          empty: function() {
            if (list) {
              list = [];
            }
            return this;
          },
          disable: function() {
            locked = queue = [];
            list = memory = "";
            return this;
          },
          disabled: function() {
            return !list;
          },
          lock: function() {
            locked = queue = [];
            if (!memory && !firing) {
              list = memory = "";
            }
            return this;
          },
          locked: function() {
            return !!locked;
          },
          fireWith: function(context, args) {
            if (!locked) {
              args = args || [];
              args = [context, args.slice ? args.slice() : args];
              queue.push(args);
              if (!firing) {
                fire();
              }
            }
            return this;
          },
          fire: function() {
            self2.fireWith(this, arguments);
            return this;
          },
          fired: function() {
            return !!fired;
          }
        };
        return self2;
      };
      function Identity(v) {
        return v;
      }
      function Thrower(ex) {
        throw ex;
      }
      function adoptValue(value, resolve, reject, noValue) {
        var method;
        try {
          if (value && isFunction(method = value.promise)) {
            method.call(value).done(resolve).fail(reject);
          } else if (value && isFunction(method = value.then)) {
            method.call(value, resolve, reject);
          } else {
            resolve.apply(void 0, [value].slice(noValue));
          }
        } catch (value2) {
          reject.apply(void 0, [value2]);
        }
      }
      jQuery.extend({
        Deferred: function(func) {
          var tuples = [
            [
              "notify",
              "progress",
              jQuery.Callbacks("memory"),
              jQuery.Callbacks("memory"),
              2
            ],
            [
              "resolve",
              "done",
              jQuery.Callbacks("once memory"),
              jQuery.Callbacks("once memory"),
              0,
              "resolved"
            ],
            [
              "reject",
              "fail",
              jQuery.Callbacks("once memory"),
              jQuery.Callbacks("once memory"),
              1,
              "rejected"
            ]
          ], state = "pending", promise = {
            state: function() {
              return state;
            },
            always: function() {
              deferred.done(arguments).fail(arguments);
              return this;
            },
            "catch": function(fn) {
              return promise.then(null, fn);
            },
            pipe: function() {
              var fns = arguments;
              return jQuery.Deferred(function(newDefer) {
                jQuery.each(tuples, function(_i, tuple) {
                  var fn = isFunction(fns[tuple[4]]) && fns[tuple[4]];
                  deferred[tuple[1]](function() {
                    var returned = fn && fn.apply(this, arguments);
                    if (returned && isFunction(returned.promise)) {
                      returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);
                    } else {
                      newDefer[tuple[0] + "With"](this, fn ? [returned] : arguments);
                    }
                  });
                });
                fns = null;
              }).promise();
            },
            then: function(onFulfilled, onRejected, onProgress) {
              var maxDepth = 0;
              function resolve(depth, deferred2, handler, special) {
                return function() {
                  var that = this, args = arguments, mightThrow = function() {
                    var returned, then;
                    if (depth < maxDepth) {
                      return;
                    }
                    returned = handler.apply(that, args);
                    if (returned === deferred2.promise()) {
                      throw new TypeError("Thenable self-resolution");
                    }
                    then = returned && (typeof returned === "object" || typeof returned === "function") && returned.then;
                    if (isFunction(then)) {
                      if (special) {
                        then.call(returned, resolve(maxDepth, deferred2, Identity, special), resolve(maxDepth, deferred2, Thrower, special));
                      } else {
                        maxDepth++;
                        then.call(returned, resolve(maxDepth, deferred2, Identity, special), resolve(maxDepth, deferred2, Thrower, special), resolve(maxDepth, deferred2, Identity, deferred2.notifyWith));
                      }
                    } else {
                      if (handler !== Identity) {
                        that = void 0;
                        args = [returned];
                      }
                      (special || deferred2.resolveWith)(that, args);
                    }
                  }, process2 = special ? mightThrow : function() {
                    try {
                      mightThrow();
                    } catch (e) {
                      if (jQuery.Deferred.exceptionHook) {
                        jQuery.Deferred.exceptionHook(e, process2.stackTrace);
                      }
                      if (depth + 1 >= maxDepth) {
                        if (handler !== Thrower) {
                          that = void 0;
                          args = [e];
                        }
                        deferred2.rejectWith(that, args);
                      }
                    }
                  };
                  if (depth) {
                    process2();
                  } else {
                    if (jQuery.Deferred.getStackHook) {
                      process2.stackTrace = jQuery.Deferred.getStackHook();
                    }
                    window2.setTimeout(process2);
                  }
                };
              }
              return jQuery.Deferred(function(newDefer) {
                tuples[0][3].add(resolve(0, newDefer, isFunction(onProgress) ? onProgress : Identity, newDefer.notifyWith));
                tuples[1][3].add(resolve(0, newDefer, isFunction(onFulfilled) ? onFulfilled : Identity));
                tuples[2][3].add(resolve(0, newDefer, isFunction(onRejected) ? onRejected : Thrower));
              }).promise();
            },
            promise: function(obj) {
              return obj != null ? jQuery.extend(obj, promise) : promise;
            }
          }, deferred = {};
          jQuery.each(tuples, function(i, tuple) {
            var list = tuple[2], stateString = tuple[5];
            promise[tuple[1]] = list.add;
            if (stateString) {
              list.add(function() {
                state = stateString;
              }, tuples[3 - i][2].disable, tuples[3 - i][3].disable, tuples[0][2].lock, tuples[0][3].lock);
            }
            list.add(tuple[3].fire);
            deferred[tuple[0]] = function() {
              deferred[tuple[0] + "With"](this === deferred ? void 0 : this, arguments);
              return this;
            };
            deferred[tuple[0] + "With"] = list.fireWith;
          });
          promise.promise(deferred);
          if (func) {
            func.call(deferred, deferred);
          }
          return deferred;
        },
        when: function(singleValue) {
          var remaining = arguments.length, i = remaining, resolveContexts = Array(i), resolveValues = slice.call(arguments), primary = jQuery.Deferred(), updateFunc = function(i2) {
            return function(value) {
              resolveContexts[i2] = this;
              resolveValues[i2] = arguments.length > 1 ? slice.call(arguments) : value;
              if (!--remaining) {
                primary.resolveWith(resolveContexts, resolveValues);
              }
            };
          };
          if (remaining <= 1) {
            adoptValue(singleValue, primary.done(updateFunc(i)).resolve, primary.reject, !remaining);
            if (primary.state() === "pending" || isFunction(resolveValues[i] && resolveValues[i].then)) {
              return primary.then();
            }
          }
          while (i--) {
            adoptValue(resolveValues[i], updateFunc(i), primary.reject);
          }
          return primary.promise();
        }
      });
      var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;
      jQuery.Deferred.exceptionHook = function(error, stack) {
        if (window2.console && window2.console.warn && error && rerrorNames.test(error.name)) {
          window2.console.warn("jQuery.Deferred exception: " + error.message, error.stack, stack);
        }
      };
      jQuery.readyException = function(error) {
        window2.setTimeout(function() {
          throw error;
        });
      };
      var readyList = jQuery.Deferred();
      jQuery.fn.ready = function(fn) {
        readyList.then(fn).catch(function(error) {
          jQuery.readyException(error);
        });
        return this;
      };
      jQuery.extend({
        isReady: false,
        readyWait: 1,
        ready: function(wait) {
          if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
            return;
          }
          jQuery.isReady = true;
          if (wait !== true && --jQuery.readyWait > 0) {
            return;
          }
          readyList.resolveWith(document2, [jQuery]);
        }
      });
      jQuery.ready.then = readyList.then;
      function completed() {
        document2.removeEventListener("DOMContentLoaded", completed);
        window2.removeEventListener("load", completed);
        jQuery.ready();
      }
      if (document2.readyState === "complete" || document2.readyState !== "loading" && !document2.documentElement.doScroll) {
        window2.setTimeout(jQuery.ready);
      } else {
        document2.addEventListener("DOMContentLoaded", completed);
        window2.addEventListener("load", completed);
      }
      var access = function(elems, fn, key, value, chainable, emptyGet, raw) {
        var i = 0, len = elems.length, bulk = key == null;
        if (toType(key) === "object") {
          chainable = true;
          for (i in key) {
            access(elems, fn, i, key[i], true, emptyGet, raw);
          }
        } else if (value !== void 0) {
          chainable = true;
          if (!isFunction(value)) {
            raw = true;
          }
          if (bulk) {
            if (raw) {
              fn.call(elems, value);
              fn = null;
            } else {
              bulk = fn;
              fn = function(elem, _key, value2) {
                return bulk.call(jQuery(elem), value2);
              };
            }
          }
          if (fn) {
            for (; i < len; i++) {
              fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
            }
          }
        }
        if (chainable) {
          return elems;
        }
        if (bulk) {
          return fn.call(elems);
        }
        return len ? fn(elems[0], key) : emptyGet;
      };
      var rmsPrefix = /^-ms-/, rdashAlpha = /-([a-z])/g;
      function fcamelCase(_all, letter) {
        return letter.toUpperCase();
      }
      function camelCase(string) {
        return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
      }
      var acceptData = function(owner) {
        return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
      };
      function Data() {
        this.expando = jQuery.expando + Data.uid++;
      }
      Data.uid = 1;
      Data.prototype = {
        cache: function(owner) {
          var value = owner[this.expando];
          if (!value) {
            value = {};
            if (acceptData(owner)) {
              if (owner.nodeType) {
                owner[this.expando] = value;
              } else {
                Object.defineProperty(owner, this.expando, {
                  value,
                  configurable: true
                });
              }
            }
          }
          return value;
        },
        set: function(owner, data, value) {
          var prop, cache = this.cache(owner);
          if (typeof data === "string") {
            cache[camelCase(data)] = value;
          } else {
            for (prop in data) {
              cache[camelCase(prop)] = data[prop];
            }
          }
          return cache;
        },
        get: function(owner, key) {
          return key === void 0 ? this.cache(owner) : owner[this.expando] && owner[this.expando][camelCase(key)];
        },
        access: function(owner, key, value) {
          if (key === void 0 || key && typeof key === "string" && value === void 0) {
            return this.get(owner, key);
          }
          this.set(owner, key, value);
          return value !== void 0 ? value : key;
        },
        remove: function(owner, key) {
          var i, cache = owner[this.expando];
          if (cache === void 0) {
            return;
          }
          if (key !== void 0) {
            if (Array.isArray(key)) {
              key = key.map(camelCase);
            } else {
              key = camelCase(key);
              key = key in cache ? [key] : key.match(rnothtmlwhite) || [];
            }
            i = key.length;
            while (i--) {
              delete cache[key[i]];
            }
          }
          if (key === void 0 || jQuery.isEmptyObject(cache)) {
            if (owner.nodeType) {
              owner[this.expando] = void 0;
            } else {
              delete owner[this.expando];
            }
          }
        },
        hasData: function(owner) {
          var cache = owner[this.expando];
          return cache !== void 0 && !jQuery.isEmptyObject(cache);
        }
      };
      var dataPriv = new Data();
      var dataUser = new Data();
      var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/, rmultiDash = /[A-Z]/g;
      function getData(data) {
        if (data === "true") {
          return true;
        }
        if (data === "false") {
          return false;
        }
        if (data === "null") {
          return null;
        }
        if (data === +data + "") {
          return +data;
        }
        if (rbrace.test(data)) {
          return JSON.parse(data);
        }
        return data;
      }
      function dataAttr(elem, key, data) {
        var name;
        if (data === void 0 && elem.nodeType === 1) {
          name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();
          data = elem.getAttribute(name);
          if (typeof data === "string") {
            try {
              data = getData(data);
            } catch (e) {
            }
            dataUser.set(elem, key, data);
          } else {
            data = void 0;
          }
        }
        return data;
      }
      jQuery.extend({
        hasData: function(elem) {
          return dataUser.hasData(elem) || dataPriv.hasData(elem);
        },
        data: function(elem, name, data) {
          return dataUser.access(elem, name, data);
        },
        removeData: function(elem, name) {
          dataUser.remove(elem, name);
        },
        _data: function(elem, name, data) {
          return dataPriv.access(elem, name, data);
        },
        _removeData: function(elem, name) {
          dataPriv.remove(elem, name);
        }
      });
      jQuery.fn.extend({
        data: function(key, value) {
          var i, name, data, elem = this[0], attrs = elem && elem.attributes;
          if (key === void 0) {
            if (this.length) {
              data = dataUser.get(elem);
              if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {
                i = attrs.length;
                while (i--) {
                  if (attrs[i]) {
                    name = attrs[i].name;
                    if (name.indexOf("data-") === 0) {
                      name = camelCase(name.slice(5));
                      dataAttr(elem, name, data[name]);
                    }
                  }
                }
                dataPriv.set(elem, "hasDataAttrs", true);
              }
            }
            return data;
          }
          if (typeof key === "object") {
            return this.each(function() {
              dataUser.set(this, key);
            });
          }
          return access(this, function(value2) {
            var data2;
            if (elem && value2 === void 0) {
              data2 = dataUser.get(elem, key);
              if (data2 !== void 0) {
                return data2;
              }
              data2 = dataAttr(elem, key);
              if (data2 !== void 0) {
                return data2;
              }
              return;
            }
            this.each(function() {
              dataUser.set(this, key, value2);
            });
          }, null, value, arguments.length > 1, null, true);
        },
        removeData: function(key) {
          return this.each(function() {
            dataUser.remove(this, key);
          });
        }
      });
      jQuery.extend({
        queue: function(elem, type, data) {
          var queue;
          if (elem) {
            type = (type || "fx") + "queue";
            queue = dataPriv.get(elem, type);
            if (data) {
              if (!queue || Array.isArray(data)) {
                queue = dataPriv.access(elem, type, jQuery.makeArray(data));
              } else {
                queue.push(data);
              }
            }
            return queue || [];
          }
        },
        dequeue: function(elem, type) {
          type = type || "fx";
          var queue = jQuery.queue(elem, type), startLength = queue.length, fn = queue.shift(), hooks = jQuery._queueHooks(elem, type), next = function() {
            jQuery.dequeue(elem, type);
          };
          if (fn === "inprogress") {
            fn = queue.shift();
            startLength--;
          }
          if (fn) {
            if (type === "fx") {
              queue.unshift("inprogress");
            }
            delete hooks.stop;
            fn.call(elem, next, hooks);
          }
          if (!startLength && hooks) {
            hooks.empty.fire();
          }
        },
        _queueHooks: function(elem, type) {
          var key = type + "queueHooks";
          return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
            empty: jQuery.Callbacks("once memory").add(function() {
              dataPriv.remove(elem, [type + "queue", key]);
            })
          });
        }
      });
      jQuery.fn.extend({
        queue: function(type, data) {
          var setter = 2;
          if (typeof type !== "string") {
            data = type;
            type = "fx";
            setter--;
          }
          if (arguments.length < setter) {
            return jQuery.queue(this[0], type);
          }
          return data === void 0 ? this : this.each(function() {
            var queue = jQuery.queue(this, type, data);
            jQuery._queueHooks(this, type);
            if (type === "fx" && queue[0] !== "inprogress") {
              jQuery.dequeue(this, type);
            }
          });
        },
        dequeue: function(type) {
          return this.each(function() {
            jQuery.dequeue(this, type);
          });
        },
        clearQueue: function(type) {
          return this.queue(type || "fx", []);
        },
        promise: function(type, obj) {
          var tmp, count = 1, defer = jQuery.Deferred(), elements = this, i = this.length, resolve = function() {
            if (!--count) {
              defer.resolveWith(elements, [elements]);
            }
          };
          if (typeof type !== "string") {
            obj = type;
            type = void 0;
          }
          type = type || "fx";
          while (i--) {
            tmp = dataPriv.get(elements[i], type + "queueHooks");
            if (tmp && tmp.empty) {
              count++;
              tmp.empty.add(resolve);
            }
          }
          resolve();
          return defer.promise(obj);
        }
      });
      var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
      var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");
      var cssExpand = ["Top", "Right", "Bottom", "Left"];
      var documentElement = document2.documentElement;
      var isAttached = function(elem) {
        return jQuery.contains(elem.ownerDocument, elem);
      }, composed = { composed: true };
      if (documentElement.getRootNode) {
        isAttached = function(elem) {
          return jQuery.contains(elem.ownerDocument, elem) || elem.getRootNode(composed) === elem.ownerDocument;
        };
      }
      var isHiddenWithinTree = function(elem, el) {
        elem = el || elem;
        return elem.style.display === "none" || elem.style.display === "" && isAttached(elem) && jQuery.css(elem, "display") === "none";
      };
      function adjustCSS(elem, prop, valueParts, tween) {
        var adjusted, scale, maxIterations = 20, currentValue = tween ? function() {
          return tween.cur();
        } : function() {
          return jQuery.css(elem, prop, "");
        }, initial = currentValue(), unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? "" : "px"), initialInUnit = elem.nodeType && (jQuery.cssNumber[prop] || unit !== "px" && +initial) && rcssNum.exec(jQuery.css(elem, prop));
        if (initialInUnit && initialInUnit[3] !== unit) {
          initial = initial / 2;
          unit = unit || initialInUnit[3];
          initialInUnit = +initial || 1;
          while (maxIterations--) {
            jQuery.style(elem, prop, initialInUnit + unit);
            if ((1 - scale) * (1 - (scale = currentValue() / initial || 0.5)) <= 0) {
              maxIterations = 0;
            }
            initialInUnit = initialInUnit / scale;
          }
          initialInUnit = initialInUnit * 2;
          jQuery.style(elem, prop, initialInUnit + unit);
          valueParts = valueParts || [];
        }
        if (valueParts) {
          initialInUnit = +initialInUnit || +initial || 0;
          adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];
          if (tween) {
            tween.unit = unit;
            tween.start = initialInUnit;
            tween.end = adjusted;
          }
        }
        return adjusted;
      }
      var defaultDisplayMap = {};
      function getDefaultDisplay(elem) {
        var temp, doc = elem.ownerDocument, nodeName2 = elem.nodeName, display = defaultDisplayMap[nodeName2];
        if (display) {
          return display;
        }
        temp = doc.body.appendChild(doc.createElement(nodeName2));
        display = jQuery.css(temp, "display");
        temp.parentNode.removeChild(temp);
        if (display === "none") {
          display = "block";
        }
        defaultDisplayMap[nodeName2] = display;
        return display;
      }
      function showHide(elements, show) {
        var display, elem, values = [], index = 0, length = elements.length;
        for (; index < length; index++) {
          elem = elements[index];
          if (!elem.style) {
            continue;
          }
          display = elem.style.display;
          if (show) {
            if (display === "none") {
              values[index] = dataPriv.get(elem, "display") || null;
              if (!values[index]) {
                elem.style.display = "";
              }
            }
            if (elem.style.display === "" && isHiddenWithinTree(elem)) {
              values[index] = getDefaultDisplay(elem);
            }
          } else {
            if (display !== "none") {
              values[index] = "none";
              dataPriv.set(elem, "display", display);
            }
          }
        }
        for (index = 0; index < length; index++) {
          if (values[index] != null) {
            elements[index].style.display = values[index];
          }
        }
        return elements;
      }
      jQuery.fn.extend({
        show: function() {
          return showHide(this, true);
        },
        hide: function() {
          return showHide(this);
        },
        toggle: function(state) {
          if (typeof state === "boolean") {
            return state ? this.show() : this.hide();
          }
          return this.each(function() {
            if (isHiddenWithinTree(this)) {
              jQuery(this).show();
            } else {
              jQuery(this).hide();
            }
          });
        }
      });
      var rcheckableType = /^(?:checkbox|radio)$/i;
      var rtagName = /<([a-z][^\/\0>\x20\t\r\n\f]*)/i;
      var rscriptType = /^$|^module$|\/(?:java|ecma)script/i;
      (function() {
        var fragment = document2.createDocumentFragment(), div = fragment.appendChild(document2.createElement("div")), input = document2.createElement("input");
        input.setAttribute("type", "radio");
        input.setAttribute("checked", "checked");
        input.setAttribute("name", "t");
        div.appendChild(input);
        support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;
        div.innerHTML = "<textarea>x</textarea>";
        support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
        div.innerHTML = "<option></option>";
        support.option = !!div.lastChild;
      })();
      var wrapMap = {
        thead: [1, "<table>", "</table>"],
        col: [2, "<table><colgroup>", "</colgroup></table>"],
        tr: [2, "<table><tbody>", "</tbody></table>"],
        td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
        _default: [0, "", ""]
      };
      wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
      wrapMap.th = wrapMap.td;
      if (!support.option) {
        wrapMap.optgroup = wrapMap.option = [1, "<select multiple='multiple'>", "</select>"];
      }
      function getAll(context, tag) {
        var ret;
        if (typeof context.getElementsByTagName !== "undefined") {
          ret = context.getElementsByTagName(tag || "*");
        } else if (typeof context.querySelectorAll !== "undefined") {
          ret = context.querySelectorAll(tag || "*");
        } else {
          ret = [];
        }
        if (tag === void 0 || tag && nodeName(context, tag)) {
          return jQuery.merge([context], ret);
        }
        return ret;
      }
      function setGlobalEval(elems, refElements) {
        var i = 0, l = elems.length;
        for (; i < l; i++) {
          dataPriv.set(elems[i], "globalEval", !refElements || dataPriv.get(refElements[i], "globalEval"));
        }
      }
      var rhtml = /<|&#?\w+;/;
      function buildFragment(elems, context, scripts, selection, ignored) {
        var elem, tmp, tag, wrap, attached, j, fragment = context.createDocumentFragment(), nodes = [], i = 0, l = elems.length;
        for (; i < l; i++) {
          elem = elems[i];
          if (elem || elem === 0) {
            if (toType(elem) === "object") {
              jQuery.merge(nodes, elem.nodeType ? [elem] : elem);
            } else if (!rhtml.test(elem)) {
              nodes.push(context.createTextNode(elem));
            } else {
              tmp = tmp || fragment.appendChild(context.createElement("div"));
              tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
              wrap = wrapMap[tag] || wrapMap._default;
              tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];
              j = wrap[0];
              while (j--) {
                tmp = tmp.lastChild;
              }
              jQuery.merge(nodes, tmp.childNodes);
              tmp = fragment.firstChild;
              tmp.textContent = "";
            }
          }
        }
        fragment.textContent = "";
        i = 0;
        while (elem = nodes[i++]) {
          if (selection && jQuery.inArray(elem, selection) > -1) {
            if (ignored) {
              ignored.push(elem);
            }
            continue;
          }
          attached = isAttached(elem);
          tmp = getAll(fragment.appendChild(elem), "script");
          if (attached) {
            setGlobalEval(tmp);
          }
          if (scripts) {
            j = 0;
            while (elem = tmp[j++]) {
              if (rscriptType.test(elem.type || "")) {
                scripts.push(elem);
              }
            }
          }
        }
        return fragment;
      }
      var rtypenamespace = /^([^.]*)(?:\.(.+)|)/;
      function returnTrue() {
        return true;
      }
      function returnFalse() {
        return false;
      }
      function expectSync(elem, type) {
        return elem === safeActiveElement() === (type === "focus");
      }
      function safeActiveElement() {
        try {
          return document2.activeElement;
        } catch (err) {
        }
      }
      function on(elem, types, selector, data, fn, one) {
        var origFn, type;
        if (typeof types === "object") {
          if (typeof selector !== "string") {
            data = data || selector;
            selector = void 0;
          }
          for (type in types) {
            on(elem, type, selector, data, types[type], one);
          }
          return elem;
        }
        if (data == null && fn == null) {
          fn = selector;
          data = selector = void 0;
        } else if (fn == null) {
          if (typeof selector === "string") {
            fn = data;
            data = void 0;
          } else {
            fn = data;
            data = selector;
            selector = void 0;
          }
        }
        if (fn === false) {
          fn = returnFalse;
        } else if (!fn) {
          return elem;
        }
        if (one === 1) {
          origFn = fn;
          fn = function(event) {
            jQuery().off(event);
            return origFn.apply(this, arguments);
          };
          fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
        }
        return elem.each(function() {
          jQuery.event.add(this, types, fn, data, selector);
        });
      }
      jQuery.event = {
        global: {},
        add: function(elem, types, handler, data, selector) {
          var handleObjIn, eventHandle, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = dataPriv.get(elem);
          if (!acceptData(elem)) {
            return;
          }
          if (handler.handler) {
            handleObjIn = handler;
            handler = handleObjIn.handler;
            selector = handleObjIn.selector;
          }
          if (selector) {
            jQuery.find.matchesSelector(documentElement, selector);
          }
          if (!handler.guid) {
            handler.guid = jQuery.guid++;
          }
          if (!(events = elemData.events)) {
            events = elemData.events = /* @__PURE__ */ Object.create(null);
          }
          if (!(eventHandle = elemData.handle)) {
            eventHandle = elemData.handle = function(e) {
              return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : void 0;
            };
          }
          types = (types || "").match(rnothtmlwhite) || [""];
          t = types.length;
          while (t--) {
            tmp = rtypenamespace.exec(types[t]) || [];
            type = origType = tmp[1];
            namespaces = (tmp[2] || "").split(".").sort();
            if (!type) {
              continue;
            }
            special = jQuery.event.special[type] || {};
            type = (selector ? special.delegateType : special.bindType) || type;
            special = jQuery.event.special[type] || {};
            handleObj = jQuery.extend({
              type,
              origType,
              data,
              handler,
              guid: handler.guid,
              selector,
              needsContext: selector && jQuery.expr.match.needsContext.test(selector),
              namespace: namespaces.join(".")
            }, handleObjIn);
            if (!(handlers = events[type])) {
              handlers = events[type] = [];
              handlers.delegateCount = 0;
              if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
                if (elem.addEventListener) {
                  elem.addEventListener(type, eventHandle);
                }
              }
            }
            if (special.add) {
              special.add.call(elem, handleObj);
              if (!handleObj.handler.guid) {
                handleObj.handler.guid = handler.guid;
              }
            }
            if (selector) {
              handlers.splice(handlers.delegateCount++, 0, handleObj);
            } else {
              handlers.push(handleObj);
            }
            jQuery.event.global[type] = true;
          }
        },
        remove: function(elem, types, handler, selector, mappedTypes) {
          var j, origCount, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = dataPriv.hasData(elem) && dataPriv.get(elem);
          if (!elemData || !(events = elemData.events)) {
            return;
          }
          types = (types || "").match(rnothtmlwhite) || [""];
          t = types.length;
          while (t--) {
            tmp = rtypenamespace.exec(types[t]) || [];
            type = origType = tmp[1];
            namespaces = (tmp[2] || "").split(".").sort();
            if (!type) {
              for (type in events) {
                jQuery.event.remove(elem, type + types[t], handler, selector, true);
              }
              continue;
            }
            special = jQuery.event.special[type] || {};
            type = (selector ? special.delegateType : special.bindType) || type;
            handlers = events[type] || [];
            tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");
            origCount = j = handlers.length;
            while (j--) {
              handleObj = handlers[j];
              if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
                handlers.splice(j, 1);
                if (handleObj.selector) {
                  handlers.delegateCount--;
                }
                if (special.remove) {
                  special.remove.call(elem, handleObj);
                }
              }
            }
            if (origCount && !handlers.length) {
              if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
                jQuery.removeEvent(elem, type, elemData.handle);
              }
              delete events[type];
            }
          }
          if (jQuery.isEmptyObject(events)) {
            dataPriv.remove(elem, "handle events");
          }
        },
        dispatch: function(nativeEvent) {
          var i, j, ret, matched, handleObj, handlerQueue, args = new Array(arguments.length), event = jQuery.event.fix(nativeEvent), handlers = (dataPriv.get(this, "events") || /* @__PURE__ */ Object.create(null))[event.type] || [], special = jQuery.event.special[event.type] || {};
          args[0] = event;
          for (i = 1; i < arguments.length; i++) {
            args[i] = arguments[i];
          }
          event.delegateTarget = this;
          if (special.preDispatch && special.preDispatch.call(this, event) === false) {
            return;
          }
          handlerQueue = jQuery.event.handlers.call(this, event, handlers);
          i = 0;
          while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
            event.currentTarget = matched.elem;
            j = 0;
            while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
              if (!event.rnamespace || handleObj.namespace === false || event.rnamespace.test(handleObj.namespace)) {
                event.handleObj = handleObj;
                event.data = handleObj.data;
                ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
                if (ret !== void 0) {
                  if ((event.result = ret) === false) {
                    event.preventDefault();
                    event.stopPropagation();
                  }
                }
              }
            }
          }
          if (special.postDispatch) {
            special.postDispatch.call(this, event);
          }
          return event.result;
        },
        handlers: function(event, handlers) {
          var i, handleObj, sel, matchedHandlers, matchedSelectors, handlerQueue = [], delegateCount = handlers.delegateCount, cur = event.target;
          if (delegateCount && cur.nodeType && !(event.type === "click" && event.button >= 1)) {
            for (; cur !== this; cur = cur.parentNode || this) {
              if (cur.nodeType === 1 && !(event.type === "click" && cur.disabled === true)) {
                matchedHandlers = [];
                matchedSelectors = {};
                for (i = 0; i < delegateCount; i++) {
                  handleObj = handlers[i];
                  sel = handleObj.selector + " ";
                  if (matchedSelectors[sel] === void 0) {
                    matchedSelectors[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [cur]).length;
                  }
                  if (matchedSelectors[sel]) {
                    matchedHandlers.push(handleObj);
                  }
                }
                if (matchedHandlers.length) {
                  handlerQueue.push({ elem: cur, handlers: matchedHandlers });
                }
              }
            }
          }
          cur = this;
          if (delegateCount < handlers.length) {
            handlerQueue.push({ elem: cur, handlers: handlers.slice(delegateCount) });
          }
          return handlerQueue;
        },
        addProp: function(name, hook) {
          Object.defineProperty(jQuery.Event.prototype, name, {
            enumerable: true,
            configurable: true,
            get: isFunction(hook) ? function() {
              if (this.originalEvent) {
                return hook(this.originalEvent);
              }
            } : function() {
              if (this.originalEvent) {
                return this.originalEvent[name];
              }
            },
            set: function(value) {
              Object.defineProperty(this, name, {
                enumerable: true,
                configurable: true,
                writable: true,
                value
              });
            }
          });
        },
        fix: function(originalEvent) {
          return originalEvent[jQuery.expando] ? originalEvent : new jQuery.Event(originalEvent);
        },
        special: {
          load: {
            noBubble: true
          },
          click: {
            setup: function(data) {
              var el = this || data;
              if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {
                leverageNative(el, "click", returnTrue);
              }
              return false;
            },
            trigger: function(data) {
              var el = this || data;
              if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {
                leverageNative(el, "click");
              }
              return true;
            },
            _default: function(event) {
              var target = event.target;
              return rcheckableType.test(target.type) && target.click && nodeName(target, "input") && dataPriv.get(target, "click") || nodeName(target, "a");
            }
          },
          beforeunload: {
            postDispatch: function(event) {
              if (event.result !== void 0 && event.originalEvent) {
                event.originalEvent.returnValue = event.result;
              }
            }
          }
        }
      };
      function leverageNative(el, type, expectSync2) {
        if (!expectSync2) {
          if (dataPriv.get(el, type) === void 0) {
            jQuery.event.add(el, type, returnTrue);
          }
          return;
        }
        dataPriv.set(el, type, false);
        jQuery.event.add(el, type, {
          namespace: false,
          handler: function(event) {
            var notAsync, result, saved = dataPriv.get(this, type);
            if (event.isTrigger & 1 && this[type]) {
              if (!saved.length) {
                saved = slice.call(arguments);
                dataPriv.set(this, type, saved);
                notAsync = expectSync2(this, type);
                this[type]();
                result = dataPriv.get(this, type);
                if (saved !== result || notAsync) {
                  dataPriv.set(this, type, false);
                } else {
                  result = {};
                }
                if (saved !== result) {
                  event.stopImmediatePropagation();
                  event.preventDefault();
                  return result && result.value;
                }
              } else if ((jQuery.event.special[type] || {}).delegateType) {
                event.stopPropagation();
              }
            } else if (saved.length) {
              dataPriv.set(this, type, {
                value: jQuery.event.trigger(jQuery.extend(saved[0], jQuery.Event.prototype), saved.slice(1), this)
              });
              event.stopImmediatePropagation();
            }
          }
        });
      }
      jQuery.removeEvent = function(elem, type, handle) {
        if (elem.removeEventListener) {
          elem.removeEventListener(type, handle);
        }
      };
      jQuery.Event = function(src, props) {
        if (!(this instanceof jQuery.Event)) {
          return new jQuery.Event(src, props);
        }
        if (src && src.type) {
          this.originalEvent = src;
          this.type = src.type;
          this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === void 0 && src.returnValue === false ? returnTrue : returnFalse;
          this.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;
          this.currentTarget = src.currentTarget;
          this.relatedTarget = src.relatedTarget;
        } else {
          this.type = src;
        }
        if (props) {
          jQuery.extend(this, props);
        }
        this.timeStamp = src && src.timeStamp || Date.now();
        this[jQuery.expando] = true;
      };
      jQuery.Event.prototype = {
        constructor: jQuery.Event,
        isDefaultPrevented: returnFalse,
        isPropagationStopped: returnFalse,
        isImmediatePropagationStopped: returnFalse,
        isSimulated: false,
        preventDefault: function() {
          var e = this.originalEvent;
          this.isDefaultPrevented = returnTrue;
          if (e && !this.isSimulated) {
            e.preventDefault();
          }
        },
        stopPropagation: function() {
          var e = this.originalEvent;
          this.isPropagationStopped = returnTrue;
          if (e && !this.isSimulated) {
            e.stopPropagation();
          }
        },
        stopImmediatePropagation: function() {
          var e = this.originalEvent;
          this.isImmediatePropagationStopped = returnTrue;
          if (e && !this.isSimulated) {
            e.stopImmediatePropagation();
          }
          this.stopPropagation();
        }
      };
      jQuery.each({
        altKey: true,
        bubbles: true,
        cancelable: true,
        changedTouches: true,
        ctrlKey: true,
        detail: true,
        eventPhase: true,
        metaKey: true,
        pageX: true,
        pageY: true,
        shiftKey: true,
        view: true,
        "char": true,
        code: true,
        charCode: true,
        key: true,
        keyCode: true,
        button: true,
        buttons: true,
        clientX: true,
        clientY: true,
        offsetX: true,
        offsetY: true,
        pointerId: true,
        pointerType: true,
        screenX: true,
        screenY: true,
        targetTouches: true,
        toElement: true,
        touches: true,
        which: true
      }, jQuery.event.addProp);
      jQuery.each({ focus: "focusin", blur: "focusout" }, function(type, delegateType) {
        jQuery.event.special[type] = {
          setup: function() {
            leverageNative(this, type, expectSync);
            return false;
          },
          trigger: function() {
            leverageNative(this, type);
            return true;
          },
          _default: function(event) {
            return dataPriv.get(event.target, type);
          },
          delegateType
        };
      });
      jQuery.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout",
        pointerenter: "pointerover",
        pointerleave: "pointerout"
      }, function(orig, fix) {
        jQuery.event.special[orig] = {
          delegateType: fix,
          bindType: fix,
          handle: function(event) {
            var ret, target = this, related = event.relatedTarget, handleObj = event.handleObj;
            if (!related || related !== target && !jQuery.contains(target, related)) {
              event.type = handleObj.origType;
              ret = handleObj.handler.apply(this, arguments);
              event.type = fix;
            }
            return ret;
          }
        };
      });
      jQuery.fn.extend({
        on: function(types, selector, data, fn) {
          return on(this, types, selector, data, fn);
        },
        one: function(types, selector, data, fn) {
          return on(this, types, selector, data, fn, 1);
        },
        off: function(types, selector, fn) {
          var handleObj, type;
          if (types && types.preventDefault && types.handleObj) {
            handleObj = types.handleObj;
            jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
            return this;
          }
          if (typeof types === "object") {
            for (type in types) {
              this.off(type, selector, types[type]);
            }
            return this;
          }
          if (selector === false || typeof selector === "function") {
            fn = selector;
            selector = void 0;
          }
          if (fn === false) {
            fn = returnFalse;
          }
          return this.each(function() {
            jQuery.event.remove(this, types, fn, selector);
          });
        }
      });
      var rnoInnerhtml = /<script|<style|<link/i, rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i, rcleanScript = /^\s*<!\[CDATA\[|\]\]>\s*$/g;
      function manipulationTarget(elem, content) {
        if (nodeName(elem, "table") && nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr")) {
          return jQuery(elem).children("tbody")[0] || elem;
        }
        return elem;
      }
      function disableScript(elem) {
        elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
        return elem;
      }
      function restoreScript(elem) {
        if ((elem.type || "").slice(0, 5) === "true/") {
          elem.type = elem.type.slice(5);
        } else {
          elem.removeAttribute("type");
        }
        return elem;
      }
      function cloneCopyEvent(src, dest) {
        var i, l, type, pdataOld, udataOld, udataCur, events;
        if (dest.nodeType !== 1) {
          return;
        }
        if (dataPriv.hasData(src)) {
          pdataOld = dataPriv.get(src);
          events = pdataOld.events;
          if (events) {
            dataPriv.remove(dest, "handle events");
            for (type in events) {
              for (i = 0, l = events[type].length; i < l; i++) {
                jQuery.event.add(dest, type, events[type][i]);
              }
            }
          }
        }
        if (dataUser.hasData(src)) {
          udataOld = dataUser.access(src);
          udataCur = jQuery.extend({}, udataOld);
          dataUser.set(dest, udataCur);
        }
      }
      function fixInput(src, dest) {
        var nodeName2 = dest.nodeName.toLowerCase();
        if (nodeName2 === "input" && rcheckableType.test(src.type)) {
          dest.checked = src.checked;
        } else if (nodeName2 === "input" || nodeName2 === "textarea") {
          dest.defaultValue = src.defaultValue;
        }
      }
      function domManip(collection, args, callback, ignored) {
        args = flat(args);
        var fragment, first, scripts, hasScripts, node, doc, i = 0, l = collection.length, iNoClone = l - 1, value = args[0], valueIsFunction = isFunction(value);
        if (valueIsFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {
          return collection.each(function(index) {
            var self2 = collection.eq(index);
            if (valueIsFunction) {
              args[0] = value.call(this, index, self2.html());
            }
            domManip(self2, args, callback, ignored);
          });
        }
        if (l) {
          fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
          first = fragment.firstChild;
          if (fragment.childNodes.length === 1) {
            fragment = first;
          }
          if (first || ignored) {
            scripts = jQuery.map(getAll(fragment, "script"), disableScript);
            hasScripts = scripts.length;
            for (; i < l; i++) {
              node = fragment;
              if (i !== iNoClone) {
                node = jQuery.clone(node, true, true);
                if (hasScripts) {
                  jQuery.merge(scripts, getAll(node, "script"));
                }
              }
              callback.call(collection[i], node, i);
            }
            if (hasScripts) {
              doc = scripts[scripts.length - 1].ownerDocument;
              jQuery.map(scripts, restoreScript);
              for (i = 0; i < hasScripts; i++) {
                node = scripts[i];
                if (rscriptType.test(node.type || "") && !dataPriv.access(node, "globalEval") && jQuery.contains(doc, node)) {
                  if (node.src && (node.type || "").toLowerCase() !== "module") {
                    if (jQuery._evalUrl && !node.noModule) {
                      jQuery._evalUrl(node.src, {
                        nonce: node.nonce || node.getAttribute("nonce")
                      }, doc);
                    }
                  } else {
                    DOMEval(node.textContent.replace(rcleanScript, ""), node, doc);
                  }
                }
              }
            }
          }
        }
        return collection;
      }
      function remove(elem, selector, keepData) {
        var node, nodes = selector ? jQuery.filter(selector, elem) : elem, i = 0;
        for (; (node = nodes[i]) != null; i++) {
          if (!keepData && node.nodeType === 1) {
            jQuery.cleanData(getAll(node));
          }
          if (node.parentNode) {
            if (keepData && isAttached(node)) {
              setGlobalEval(getAll(node, "script"));
            }
            node.parentNode.removeChild(node);
          }
        }
        return elem;
      }
      jQuery.extend({
        htmlPrefilter: function(html) {
          return html;
        },
        clone: function(elem, dataAndEvents, deepDataAndEvents) {
          var i, l, srcElements, destElements, clone = elem.cloneNode(true), inPage = isAttached(elem);
          if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
            destElements = getAll(clone);
            srcElements = getAll(elem);
            for (i = 0, l = srcElements.length; i < l; i++) {
              fixInput(srcElements[i], destElements[i]);
            }
          }
          if (dataAndEvents) {
            if (deepDataAndEvents) {
              srcElements = srcElements || getAll(elem);
              destElements = destElements || getAll(clone);
              for (i = 0, l = srcElements.length; i < l; i++) {
                cloneCopyEvent(srcElements[i], destElements[i]);
              }
            } else {
              cloneCopyEvent(elem, clone);
            }
          }
          destElements = getAll(clone, "script");
          if (destElements.length > 0) {
            setGlobalEval(destElements, !inPage && getAll(elem, "script"));
          }
          return clone;
        },
        cleanData: function(elems) {
          var data, elem, type, special = jQuery.event.special, i = 0;
          for (; (elem = elems[i]) !== void 0; i++) {
            if (acceptData(elem)) {
              if (data = elem[dataPriv.expando]) {
                if (data.events) {
                  for (type in data.events) {
                    if (special[type]) {
                      jQuery.event.remove(elem, type);
                    } else {
                      jQuery.removeEvent(elem, type, data.handle);
                    }
                  }
                }
                elem[dataPriv.expando] = void 0;
              }
              if (elem[dataUser.expando]) {
                elem[dataUser.expando] = void 0;
              }
            }
          }
        }
      });
      jQuery.fn.extend({
        detach: function(selector) {
          return remove(this, selector, true);
        },
        remove: function(selector) {
          return remove(this, selector);
        },
        text: function(value) {
          return access(this, function(value2) {
            return value2 === void 0 ? jQuery.text(this) : this.empty().each(function() {
              if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                this.textContent = value2;
              }
            });
          }, null, value, arguments.length);
        },
        append: function() {
          return domManip(this, arguments, function(elem) {
            if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
              var target = manipulationTarget(this, elem);
              target.appendChild(elem);
            }
          });
        },
        prepend: function() {
          return domManip(this, arguments, function(elem) {
            if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
              var target = manipulationTarget(this, elem);
              target.insertBefore(elem, target.firstChild);
            }
          });
        },
        before: function() {
          return domManip(this, arguments, function(elem) {
            if (this.parentNode) {
              this.parentNode.insertBefore(elem, this);
            }
          });
        },
        after: function() {
          return domManip(this, arguments, function(elem) {
            if (this.parentNode) {
              this.parentNode.insertBefore(elem, this.nextSibling);
            }
          });
        },
        empty: function() {
          var elem, i = 0;
          for (; (elem = this[i]) != null; i++) {
            if (elem.nodeType === 1) {
              jQuery.cleanData(getAll(elem, false));
              elem.textContent = "";
            }
          }
          return this;
        },
        clone: function(dataAndEvents, deepDataAndEvents) {
          dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
          deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
          return this.map(function() {
            return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
          });
        },
        html: function(value) {
          return access(this, function(value2) {
            var elem = this[0] || {}, i = 0, l = this.length;
            if (value2 === void 0 && elem.nodeType === 1) {
              return elem.innerHTML;
            }
            if (typeof value2 === "string" && !rnoInnerhtml.test(value2) && !wrapMap[(rtagName.exec(value2) || ["", ""])[1].toLowerCase()]) {
              value2 = jQuery.htmlPrefilter(value2);
              try {
                for (; i < l; i++) {
                  elem = this[i] || {};
                  if (elem.nodeType === 1) {
                    jQuery.cleanData(getAll(elem, false));
                    elem.innerHTML = value2;
                  }
                }
                elem = 0;
              } catch (e) {
              }
            }
            if (elem) {
              this.empty().append(value2);
            }
          }, null, value, arguments.length);
        },
        replaceWith: function() {
          var ignored = [];
          return domManip(this, arguments, function(elem) {
            var parent = this.parentNode;
            if (jQuery.inArray(this, ignored) < 0) {
              jQuery.cleanData(getAll(this));
              if (parent) {
                parent.replaceChild(elem, this);
              }
            }
          }, ignored);
        }
      });
      jQuery.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
      }, function(name, original) {
        jQuery.fn[name] = function(selector) {
          var elems, ret = [], insert = jQuery(selector), last = insert.length - 1, i = 0;
          for (; i <= last; i++) {
            elems = i === last ? this : this.clone(true);
            jQuery(insert[i])[original](elems);
            push.apply(ret, elems.get());
          }
          return this.pushStack(ret);
        };
      });
      var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");
      var rcustomProp = /^--/;
      var getStyles = function(elem) {
        var view = elem.ownerDocument.defaultView;
        if (!view || !view.opener) {
          view = window2;
        }
        return view.getComputedStyle(elem);
      };
      var swap = function(elem, options, callback) {
        var ret, name, old = {};
        for (name in options) {
          old[name] = elem.style[name];
          elem.style[name] = options[name];
        }
        ret = callback.call(elem);
        for (name in options) {
          elem.style[name] = old[name];
        }
        return ret;
      };
      var rboxStyle = new RegExp(cssExpand.join("|"), "i");
      var whitespace = "[\\x20\\t\\r\\n\\f]";
      var rtrimCSS = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g");
      (function() {
        function computeStyleTests() {
          if (!div) {
            return;
          }
          container.style.cssText = "position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0";
          div.style.cssText = "position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%";
          documentElement.appendChild(container).appendChild(div);
          var divStyle = window2.getComputedStyle(div);
          pixelPositionVal = divStyle.top !== "1%";
          reliableMarginLeftVal = roundPixelMeasures(divStyle.marginLeft) === 12;
          div.style.right = "60%";
          pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36;
          boxSizingReliableVal = roundPixelMeasures(divStyle.width) === 36;
          div.style.position = "absolute";
          scrollboxSizeVal = roundPixelMeasures(div.offsetWidth / 3) === 12;
          documentElement.removeChild(container);
          div = null;
        }
        function roundPixelMeasures(measure) {
          return Math.round(parseFloat(measure));
        }
        var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal, reliableTrDimensionsVal, reliableMarginLeftVal, container = document2.createElement("div"), div = document2.createElement("div");
        if (!div.style) {
          return;
        }
        div.style.backgroundClip = "content-box";
        div.cloneNode(true).style.backgroundClip = "";
        support.clearCloneStyle = div.style.backgroundClip === "content-box";
        jQuery.extend(support, {
          boxSizingReliable: function() {
            computeStyleTests();
            return boxSizingReliableVal;
          },
          pixelBoxStyles: function() {
            computeStyleTests();
            return pixelBoxStylesVal;
          },
          pixelPosition: function() {
            computeStyleTests();
            return pixelPositionVal;
          },
          reliableMarginLeft: function() {
            computeStyleTests();
            return reliableMarginLeftVal;
          },
          scrollboxSize: function() {
            computeStyleTests();
            return scrollboxSizeVal;
          },
          reliableTrDimensions: function() {
            var table, tr, trChild, trStyle;
            if (reliableTrDimensionsVal == null) {
              table = document2.createElement("table");
              tr = document2.createElement("tr");
              trChild = document2.createElement("div");
              table.style.cssText = "position:absolute;left:-11111px;border-collapse:separate";
              tr.style.cssText = "border:1px solid";
              tr.style.height = "1px";
              trChild.style.height = "9px";
              trChild.style.display = "block";
              documentElement.appendChild(table).appendChild(tr).appendChild(trChild);
              trStyle = window2.getComputedStyle(tr);
              reliableTrDimensionsVal = parseInt(trStyle.height, 10) + parseInt(trStyle.borderTopWidth, 10) + parseInt(trStyle.borderBottomWidth, 10) === tr.offsetHeight;
              documentElement.removeChild(table);
            }
            return reliableTrDimensionsVal;
          }
        });
      })();
      function curCSS(elem, name, computed) {
        var width, minWidth, maxWidth, ret, isCustomProp = rcustomProp.test(name), style = elem.style;
        computed = computed || getStyles(elem);
        if (computed) {
          ret = computed.getPropertyValue(name) || computed[name];
          if (isCustomProp && ret) {
            ret = ret.replace(rtrimCSS, "$1") || void 0;
          }
          if (ret === "" && !isAttached(elem)) {
            ret = jQuery.style(elem, name);
          }
          if (!support.pixelBoxStyles() && rnumnonpx.test(ret) && rboxStyle.test(name)) {
            width = style.width;
            minWidth = style.minWidth;
            maxWidth = style.maxWidth;
            style.minWidth = style.maxWidth = style.width = ret;
            ret = computed.width;
            style.width = width;
            style.minWidth = minWidth;
            style.maxWidth = maxWidth;
          }
        }
        return ret !== void 0 ? ret + "" : ret;
      }
      function addGetHookIf(conditionFn, hookFn) {
        return {
          get: function() {
            if (conditionFn()) {
              delete this.get;
              return;
            }
            return (this.get = hookFn).apply(this, arguments);
          }
        };
      }
      var cssPrefixes = ["Webkit", "Moz", "ms"], emptyStyle = document2.createElement("div").style, vendorProps = {};
      function vendorPropName(name) {
        var capName = name[0].toUpperCase() + name.slice(1), i = cssPrefixes.length;
        while (i--) {
          name = cssPrefixes[i] + capName;
          if (name in emptyStyle) {
            return name;
          }
        }
      }
      function finalPropName(name) {
        var final = jQuery.cssProps[name] || vendorProps[name];
        if (final) {
          return final;
        }
        if (name in emptyStyle) {
          return name;
        }
        return vendorProps[name] = vendorPropName(name) || name;
      }
      var rdisplayswap = /^(none|table(?!-c[ea]).+)/, cssShow = { position: "absolute", visibility: "hidden", display: "block" }, cssNormalTransform = {
        letterSpacing: "0",
        fontWeight: "400"
      };
      function setPositiveNumber(_elem, value, subtract) {
        var matches = rcssNum.exec(value);
        return matches ? Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || "px") : value;
      }
      function boxModelAdjustment(elem, dimension, box, isBorderBox, styles, computedVal) {
        var i = dimension === "width" ? 1 : 0, extra = 0, delta = 0;
        if (box === (isBorderBox ? "border" : "content")) {
          return 0;
        }
        for (; i < 4; i += 2) {
          if (box === "margin") {
            delta += jQuery.css(elem, box + cssExpand[i], true, styles);
          }
          if (!isBorderBox) {
            delta += jQuery.css(elem, "padding" + cssExpand[i], true, styles);
            if (box !== "padding") {
              delta += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
            } else {
              extra += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
            }
          } else {
            if (box === "content") {
              delta -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
            }
            if (box !== "margin") {
              delta -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
            }
          }
        }
        if (!isBorderBox && computedVal >= 0) {
          delta += Math.max(0, Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - computedVal - delta - extra - 0.5)) || 0;
        }
        return delta;
      }
      function getWidthOrHeight(elem, dimension, extra) {
        var styles = getStyles(elem), boxSizingNeeded = !support.boxSizingReliable() || extra, isBorderBox = boxSizingNeeded && jQuery.css(elem, "boxSizing", false, styles) === "border-box", valueIsBorderBox = isBorderBox, val = curCSS(elem, dimension, styles), offsetProp = "offset" + dimension[0].toUpperCase() + dimension.slice(1);
        if (rnumnonpx.test(val)) {
          if (!extra) {
            return val;
          }
          val = "auto";
        }
        if ((!support.boxSizingReliable() && isBorderBox || !support.reliableTrDimensions() && nodeName(elem, "tr") || val === "auto" || !parseFloat(val) && jQuery.css(elem, "display", false, styles) === "inline") && elem.getClientRects().length) {
          isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box";
          valueIsBorderBox = offsetProp in elem;
          if (valueIsBorderBox) {
            val = elem[offsetProp];
          }
        }
        val = parseFloat(val) || 0;
        return val + boxModelAdjustment(elem, dimension, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles, val) + "px";
      }
      jQuery.extend({
        cssHooks: {
          opacity: {
            get: function(elem, computed) {
              if (computed) {
                var ret = curCSS(elem, "opacity");
                return ret === "" ? "1" : ret;
              }
            }
          }
        },
        cssNumber: {
          "animationIterationCount": true,
          "columnCount": true,
          "fillOpacity": true,
          "flexGrow": true,
          "flexShrink": true,
          "fontWeight": true,
          "gridArea": true,
          "gridColumn": true,
          "gridColumnEnd": true,
          "gridColumnStart": true,
          "gridRow": true,
          "gridRowEnd": true,
          "gridRowStart": true,
          "lineHeight": true,
          "opacity": true,
          "order": true,
          "orphans": true,
          "widows": true,
          "zIndex": true,
          "zoom": true
        },
        cssProps: {},
        style: function(elem, name, value, extra) {
          if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
            return;
          }
          var ret, type, hooks, origName = camelCase(name), isCustomProp = rcustomProp.test(name), style = elem.style;
          if (!isCustomProp) {
            name = finalPropName(origName);
          }
          hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
          if (value !== void 0) {
            type = typeof value;
            if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {
              value = adjustCSS(elem, name, ret);
              type = "number";
            }
            if (value == null || value !== value) {
              return;
            }
            if (type === "number" && !isCustomProp) {
              value += ret && ret[3] || (jQuery.cssNumber[origName] ? "" : "px");
            }
            if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
              style[name] = "inherit";
            }
            if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== void 0) {
              if (isCustomProp) {
                style.setProperty(name, value);
              } else {
                style[name] = value;
              }
            }
          } else {
            if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== void 0) {
              return ret;
            }
            return style[name];
          }
        },
        css: function(elem, name, extra, styles) {
          var val, num, hooks, origName = camelCase(name), isCustomProp = rcustomProp.test(name);
          if (!isCustomProp) {
            name = finalPropName(origName);
          }
          hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
          if (hooks && "get" in hooks) {
            val = hooks.get(elem, true, extra);
          }
          if (val === void 0) {
            val = curCSS(elem, name, styles);
          }
          if (val === "normal" && name in cssNormalTransform) {
            val = cssNormalTransform[name];
          }
          if (extra === "" || extra) {
            num = parseFloat(val);
            return extra === true || isFinite(num) ? num || 0 : val;
          }
          return val;
        }
      });
      jQuery.each(["height", "width"], function(_i, dimension) {
        jQuery.cssHooks[dimension] = {
          get: function(elem, computed, extra) {
            if (computed) {
              return rdisplayswap.test(jQuery.css(elem, "display")) && (!elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function() {
                return getWidthOrHeight(elem, dimension, extra);
              }) : getWidthOrHeight(elem, dimension, extra);
            }
          },
          set: function(elem, value, extra) {
            var matches, styles = getStyles(elem), scrollboxSizeBuggy = !support.scrollboxSize() && styles.position === "absolute", boxSizingNeeded = scrollboxSizeBuggy || extra, isBorderBox = boxSizingNeeded && jQuery.css(elem, "boxSizing", false, styles) === "border-box", subtract = extra ? boxModelAdjustment(elem, dimension, extra, isBorderBox, styles) : 0;
            if (isBorderBox && scrollboxSizeBuggy) {
              subtract -= Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - parseFloat(styles[dimension]) - boxModelAdjustment(elem, dimension, "border", false, styles) - 0.5);
            }
            if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || "px") !== "px") {
              elem.style[dimension] = value;
              value = jQuery.css(elem, dimension);
            }
            return setPositiveNumber(elem, value, subtract);
          }
        };
      });
      jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function(elem, computed) {
        if (computed) {
          return (parseFloat(curCSS(elem, "marginLeft")) || elem.getBoundingClientRect().left - swap(elem, { marginLeft: 0 }, function() {
            return elem.getBoundingClientRect().left;
          })) + "px";
        }
      });
      jQuery.each({
        margin: "",
        padding: "",
        border: "Width"
      }, function(prefix, suffix) {
        jQuery.cssHooks[prefix + suffix] = {
          expand: function(value) {
            var i = 0, expanded = {}, parts = typeof value === "string" ? value.split(" ") : [value];
            for (; i < 4; i++) {
              expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
            }
            return expanded;
          }
        };
        if (prefix !== "margin") {
          jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
        }
      });
      jQuery.fn.extend({
        css: function(name, value) {
          return access(this, function(elem, name2, value2) {
            var styles, len, map = {}, i = 0;
            if (Array.isArray(name2)) {
              styles = getStyles(elem);
              len = name2.length;
              for (; i < len; i++) {
                map[name2[i]] = jQuery.css(elem, name2[i], false, styles);
              }
              return map;
            }
            return value2 !== void 0 ? jQuery.style(elem, name2, value2) : jQuery.css(elem, name2);
          }, name, value, arguments.length > 1);
        }
      });
      function Tween(elem, options, prop, end, easing) {
        return new Tween.prototype.init(elem, options, prop, end, easing);
      }
      jQuery.Tween = Tween;
      Tween.prototype = {
        constructor: Tween,
        init: function(elem, options, prop, end, easing, unit) {
          this.elem = elem;
          this.prop = prop;
          this.easing = easing || jQuery.easing._default;
          this.options = options;
          this.start = this.now = this.cur();
          this.end = end;
          this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
        },
        cur: function() {
          var hooks = Tween.propHooks[this.prop];
          return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
        },
        run: function(percent) {
          var eased, hooks = Tween.propHooks[this.prop];
          if (this.options.duration) {
            this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
          } else {
            this.pos = eased = percent;
          }
          this.now = (this.end - this.start) * eased + this.start;
          if (this.options.step) {
            this.options.step.call(this.elem, this.now, this);
          }
          if (hooks && hooks.set) {
            hooks.set(this);
          } else {
            Tween.propHooks._default.set(this);
          }
          return this;
        }
      };
      Tween.prototype.init.prototype = Tween.prototype;
      Tween.propHooks = {
        _default: {
          get: function(tween) {
            var result;
            if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {
              return tween.elem[tween.prop];
            }
            result = jQuery.css(tween.elem, tween.prop, "");
            return !result || result === "auto" ? 0 : result;
          },
          set: function(tween) {
            if (jQuery.fx.step[tween.prop]) {
              jQuery.fx.step[tween.prop](tween);
            } else if (tween.elem.nodeType === 1 && (jQuery.cssHooks[tween.prop] || tween.elem.style[finalPropName(tween.prop)] != null)) {
              jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
            } else {
              tween.elem[tween.prop] = tween.now;
            }
          }
        }
      };
      Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
        set: function(tween) {
          if (tween.elem.nodeType && tween.elem.parentNode) {
            tween.elem[tween.prop] = tween.now;
          }
        }
      };
      jQuery.easing = {
        linear: function(p) {
          return p;
        },
        swing: function(p) {
          return 0.5 - Math.cos(p * Math.PI) / 2;
        },
        _default: "swing"
      };
      jQuery.fx = Tween.prototype.init;
      jQuery.fx.step = {};
      var fxNow, inProgress, rfxtypes = /^(?:toggle|show|hide)$/, rrun = /queueHooks$/;
      function schedule() {
        if (inProgress) {
          if (document2.hidden === false && window2.requestAnimationFrame) {
            window2.requestAnimationFrame(schedule);
          } else {
            window2.setTimeout(schedule, jQuery.fx.interval);
          }
          jQuery.fx.tick();
        }
      }
      function createFxNow() {
        window2.setTimeout(function() {
          fxNow = void 0;
        });
        return fxNow = Date.now();
      }
      function genFx(type, includeWidth) {
        var which, i = 0, attrs = { height: type };
        includeWidth = includeWidth ? 1 : 0;
        for (; i < 4; i += 2 - includeWidth) {
          which = cssExpand[i];
          attrs["margin" + which] = attrs["padding" + which] = type;
        }
        if (includeWidth) {
          attrs.opacity = attrs.width = type;
        }
        return attrs;
      }
      function createTween(value, prop, animation) {
        var tween, collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners["*"]), index = 0, length = collection.length;
        for (; index < length; index++) {
          if (tween = collection[index].call(animation, prop, value)) {
            return tween;
          }
        }
      }
      function defaultPrefilter(elem, props, opts) {
        var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display, isBox = "width" in props || "height" in props, anim = this, orig = {}, style = elem.style, hidden = elem.nodeType && isHiddenWithinTree(elem), dataShow = dataPriv.get(elem, "fxshow");
        if (!opts.queue) {
          hooks = jQuery._queueHooks(elem, "fx");
          if (hooks.unqueued == null) {
            hooks.unqueued = 0;
            oldfire = hooks.empty.fire;
            hooks.empty.fire = function() {
              if (!hooks.unqueued) {
                oldfire();
              }
            };
          }
          hooks.unqueued++;
          anim.always(function() {
            anim.always(function() {
              hooks.unqueued--;
              if (!jQuery.queue(elem, "fx").length) {
                hooks.empty.fire();
              }
            });
          });
        }
        for (prop in props) {
          value = props[prop];
          if (rfxtypes.test(value)) {
            delete props[prop];
            toggle = toggle || value === "toggle";
            if (value === (hidden ? "hide" : "show")) {
              if (value === "show" && dataShow && dataShow[prop] !== void 0) {
                hidden = true;
              } else {
                continue;
              }
            }
            orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
          }
        }
        propTween = !jQuery.isEmptyObject(props);
        if (!propTween && jQuery.isEmptyObject(orig)) {
          return;
        }
        if (isBox && elem.nodeType === 1) {
          opts.overflow = [style.overflow, style.overflowX, style.overflowY];
          restoreDisplay = dataShow && dataShow.display;
          if (restoreDisplay == null) {
            restoreDisplay = dataPriv.get(elem, "display");
          }
          display = jQuery.css(elem, "display");
          if (display === "none") {
            if (restoreDisplay) {
              display = restoreDisplay;
            } else {
              showHide([elem], true);
              restoreDisplay = elem.style.display || restoreDisplay;
              display = jQuery.css(elem, "display");
              showHide([elem]);
            }
          }
          if (display === "inline" || display === "inline-block" && restoreDisplay != null) {
            if (jQuery.css(elem, "float") === "none") {
              if (!propTween) {
                anim.done(function() {
                  style.display = restoreDisplay;
                });
                if (restoreDisplay == null) {
                  display = style.display;
                  restoreDisplay = display === "none" ? "" : display;
                }
              }
              style.display = "inline-block";
            }
          }
        }
        if (opts.overflow) {
          style.overflow = "hidden";
          anim.always(function() {
            style.overflow = opts.overflow[0];
            style.overflowX = opts.overflow[1];
            style.overflowY = opts.overflow[2];
          });
        }
        propTween = false;
        for (prop in orig) {
          if (!propTween) {
            if (dataShow) {
              if ("hidden" in dataShow) {
                hidden = dataShow.hidden;
              }
            } else {
              dataShow = dataPriv.access(elem, "fxshow", { display: restoreDisplay });
            }
            if (toggle) {
              dataShow.hidden = !hidden;
            }
            if (hidden) {
              showHide([elem], true);
            }
            anim.done(function() {
              if (!hidden) {
                showHide([elem]);
              }
              dataPriv.remove(elem, "fxshow");
              for (prop in orig) {
                jQuery.style(elem, prop, orig[prop]);
              }
            });
          }
          propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
          if (!(prop in dataShow)) {
            dataShow[prop] = propTween.start;
            if (hidden) {
              propTween.end = propTween.start;
              propTween.start = 0;
            }
          }
        }
      }
      function propFilter(props, specialEasing) {
        var index, name, easing, value, hooks;
        for (index in props) {
          name = camelCase(index);
          easing = specialEasing[name];
          value = props[index];
          if (Array.isArray(value)) {
            easing = value[1];
            value = props[index] = value[0];
          }
          if (index !== name) {
            props[name] = value;
            delete props[index];
          }
          hooks = jQuery.cssHooks[name];
          if (hooks && "expand" in hooks) {
            value = hooks.expand(value);
            delete props[name];
            for (index in value) {
              if (!(index in props)) {
                props[index] = value[index];
                specialEasing[index] = easing;
              }
            }
          } else {
            specialEasing[name] = easing;
          }
        }
      }
      function Animation(elem, properties, options) {
        var result, stopped, index = 0, length = Animation.prefilters.length, deferred = jQuery.Deferred().always(function() {
          delete tick.elem;
        }), tick = function() {
          if (stopped) {
            return false;
          }
          var currentTime = fxNow || createFxNow(), remaining = Math.max(0, animation.startTime + animation.duration - currentTime), temp = remaining / animation.duration || 0, percent = 1 - temp, index2 = 0, length2 = animation.tweens.length;
          for (; index2 < length2; index2++) {
            animation.tweens[index2].run(percent);
          }
          deferred.notifyWith(elem, [animation, percent, remaining]);
          if (percent < 1 && length2) {
            return remaining;
          }
          if (!length2) {
            deferred.notifyWith(elem, [animation, 1, 0]);
          }
          deferred.resolveWith(elem, [animation]);
          return false;
        }, animation = deferred.promise({
          elem,
          props: jQuery.extend({}, properties),
          opts: jQuery.extend(true, {
            specialEasing: {},
            easing: jQuery.easing._default
          }, options),
          originalProperties: properties,
          originalOptions: options,
          startTime: fxNow || createFxNow(),
          duration: options.duration,
          tweens: [],
          createTween: function(prop, end) {
            var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
            animation.tweens.push(tween);
            return tween;
          },
          stop: function(gotoEnd) {
            var index2 = 0, length2 = gotoEnd ? animation.tweens.length : 0;
            if (stopped) {
              return this;
            }
            stopped = true;
            for (; index2 < length2; index2++) {
              animation.tweens[index2].run(1);
            }
            if (gotoEnd) {
              deferred.notifyWith(elem, [animation, 1, 0]);
              deferred.resolveWith(elem, [animation, gotoEnd]);
            } else {
              deferred.rejectWith(elem, [animation, gotoEnd]);
            }
            return this;
          }
        }), props = animation.props;
        propFilter(props, animation.opts.specialEasing);
        for (; index < length; index++) {
          result = Animation.prefilters[index].call(animation, elem, props, animation.opts);
          if (result) {
            if (isFunction(result.stop)) {
              jQuery._queueHooks(animation.elem, animation.opts.queue).stop = result.stop.bind(result);
            }
            return result;
          }
        }
        jQuery.map(props, createTween, animation);
        if (isFunction(animation.opts.start)) {
          animation.opts.start.call(elem, animation);
        }
        animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
        jQuery.fx.timer(jQuery.extend(tick, {
          elem,
          anim: animation,
          queue: animation.opts.queue
        }));
        return animation;
      }
      jQuery.Animation = jQuery.extend(Animation, {
        tweeners: {
          "*": [function(prop, value) {
            var tween = this.createTween(prop, value);
            adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
            return tween;
          }]
        },
        tweener: function(props, callback) {
          if (isFunction(props)) {
            callback = props;
            props = ["*"];
          } else {
            props = props.match(rnothtmlwhite);
          }
          var prop, index = 0, length = props.length;
          for (; index < length; index++) {
            prop = props[index];
            Animation.tweeners[prop] = Animation.tweeners[prop] || [];
            Animation.tweeners[prop].unshift(callback);
          }
        },
        prefilters: [defaultPrefilter],
        prefilter: function(callback, prepend) {
          if (prepend) {
            Animation.prefilters.unshift(callback);
          } else {
            Animation.prefilters.push(callback);
          }
        }
      });
      jQuery.speed = function(speed, easing, fn) {
        var opt = speed && typeof speed === "object" ? jQuery.extend({}, speed) : {
          complete: fn || !fn && easing || isFunction(speed) && speed,
          duration: speed,
          easing: fn && easing || easing && !isFunction(easing) && easing
        };
        if (jQuery.fx.off) {
          opt.duration = 0;
        } else {
          if (typeof opt.duration !== "number") {
            if (opt.duration in jQuery.fx.speeds) {
              opt.duration = jQuery.fx.speeds[opt.duration];
            } else {
              opt.duration = jQuery.fx.speeds._default;
            }
          }
        }
        if (opt.queue == null || opt.queue === true) {
          opt.queue = "fx";
        }
        opt.old = opt.complete;
        opt.complete = function() {
          if (isFunction(opt.old)) {
            opt.old.call(this);
          }
          if (opt.queue) {
            jQuery.dequeue(this, opt.queue);
          }
        };
        return opt;
      };
      jQuery.fn.extend({
        fadeTo: function(speed, to, easing, callback) {
          return this.filter(isHiddenWithinTree).css("opacity", 0).show().end().animate({ opacity: to }, speed, easing, callback);
        },
        animate: function(prop, speed, easing, callback) {
          var empty = jQuery.isEmptyObject(prop), optall = jQuery.speed(speed, easing, callback), doAnimation = function() {
            var anim = Animation(this, jQuery.extend({}, prop), optall);
            if (empty || dataPriv.get(this, "finish")) {
              anim.stop(true);
            }
          };
          doAnimation.finish = doAnimation;
          return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
        },
        stop: function(type, clearQueue, gotoEnd) {
          var stopQueue = function(hooks) {
            var stop = hooks.stop;
            delete hooks.stop;
            stop(gotoEnd);
          };
          if (typeof type !== "string") {
            gotoEnd = clearQueue;
            clearQueue = type;
            type = void 0;
          }
          if (clearQueue) {
            this.queue(type || "fx", []);
          }
          return this.each(function() {
            var dequeue = true, index = type != null && type + "queueHooks", timers = jQuery.timers, data = dataPriv.get(this);
            if (index) {
              if (data[index] && data[index].stop) {
                stopQueue(data[index]);
              }
            } else {
              for (index in data) {
                if (data[index] && data[index].stop && rrun.test(index)) {
                  stopQueue(data[index]);
                }
              }
            }
            for (index = timers.length; index--; ) {
              if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
                timers[index].anim.stop(gotoEnd);
                dequeue = false;
                timers.splice(index, 1);
              }
            }
            if (dequeue || !gotoEnd) {
              jQuery.dequeue(this, type);
            }
          });
        },
        finish: function(type) {
          if (type !== false) {
            type = type || "fx";
          }
          return this.each(function() {
            var index, data = dataPriv.get(this), queue = data[type + "queue"], hooks = data[type + "queueHooks"], timers = jQuery.timers, length = queue ? queue.length : 0;
            data.finish = true;
            jQuery.queue(this, type, []);
            if (hooks && hooks.stop) {
              hooks.stop.call(this, true);
            }
            for (index = timers.length; index--; ) {
              if (timers[index].elem === this && timers[index].queue === type) {
                timers[index].anim.stop(true);
                timers.splice(index, 1);
              }
            }
            for (index = 0; index < length; index++) {
              if (queue[index] && queue[index].finish) {
                queue[index].finish.call(this);
              }
            }
            delete data.finish;
          });
        }
      });
      jQuery.each(["toggle", "show", "hide"], function(_i, name) {
        var cssFn = jQuery.fn[name];
        jQuery.fn[name] = function(speed, easing, callback) {
          return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
        };
      });
      jQuery.each({
        slideDown: genFx("show"),
        slideUp: genFx("hide"),
        slideToggle: genFx("toggle"),
        fadeIn: { opacity: "show" },
        fadeOut: { opacity: "hide" },
        fadeToggle: { opacity: "toggle" }
      }, function(name, props) {
        jQuery.fn[name] = function(speed, easing, callback) {
          return this.animate(props, speed, easing, callback);
        };
      });
      jQuery.timers = [];
      jQuery.fx.tick = function() {
        var timer, i = 0, timers = jQuery.timers;
        fxNow = Date.now();
        for (; i < timers.length; i++) {
          timer = timers[i];
          if (!timer() && timers[i] === timer) {
            timers.splice(i--, 1);
          }
        }
        if (!timers.length) {
          jQuery.fx.stop();
        }
        fxNow = void 0;
      };
      jQuery.fx.timer = function(timer) {
        jQuery.timers.push(timer);
        jQuery.fx.start();
      };
      jQuery.fx.interval = 13;
      jQuery.fx.start = function() {
        if (inProgress) {
          return;
        }
        inProgress = true;
        schedule();
      };
      jQuery.fx.stop = function() {
        inProgress = null;
      };
      jQuery.fx.speeds = {
        slow: 600,
        fast: 200,
        _default: 400
      };
      jQuery.fn.delay = function(time, type) {
        time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
        type = type || "fx";
        return this.queue(type, function(next, hooks) {
          var timeout = window2.setTimeout(next, time);
          hooks.stop = function() {
            window2.clearTimeout(timeout);
          };
        });
      };
      (function() {
        var input = document2.createElement("input"), select = document2.createElement("select"), opt = select.appendChild(document2.createElement("option"));
        input.type = "checkbox";
        support.checkOn = input.value !== "";
        support.optSelected = opt.selected;
        input = document2.createElement("input");
        input.value = "t";
        input.type = "radio";
        support.radioValue = input.value === "t";
      })();
      var boolHook, attrHandle = jQuery.expr.attrHandle;
      jQuery.fn.extend({
        attr: function(name, value) {
          return access(this, jQuery.attr, name, value, arguments.length > 1);
        },
        removeAttr: function(name) {
          return this.each(function() {
            jQuery.removeAttr(this, name);
          });
        }
      });
      jQuery.extend({
        attr: function(elem, name, value) {
          var ret, hooks, nType = elem.nodeType;
          if (nType === 3 || nType === 8 || nType === 2) {
            return;
          }
          if (typeof elem.getAttribute === "undefined") {
            return jQuery.prop(elem, name, value);
          }
          if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
            hooks = jQuery.attrHooks[name.toLowerCase()] || (jQuery.expr.match.bool.test(name) ? boolHook : void 0);
          }
          if (value !== void 0) {
            if (value === null) {
              jQuery.removeAttr(elem, name);
              return;
            }
            if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== void 0) {
              return ret;
            }
            elem.setAttribute(name, value + "");
            return value;
          }
          if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
            return ret;
          }
          ret = jQuery.find.attr(elem, name);
          return ret == null ? void 0 : ret;
        },
        attrHooks: {
          type: {
            set: function(elem, value) {
              if (!support.radioValue && value === "radio" && nodeName(elem, "input")) {
                var val = elem.value;
                elem.setAttribute("type", value);
                if (val) {
                  elem.value = val;
                }
                return value;
              }
            }
          }
        },
        removeAttr: function(elem, value) {
          var name, i = 0, attrNames = value && value.match(rnothtmlwhite);
          if (attrNames && elem.nodeType === 1) {
            while (name = attrNames[i++]) {
              elem.removeAttribute(name);
            }
          }
        }
      });
      boolHook = {
        set: function(elem, value, name) {
          if (value === false) {
            jQuery.removeAttr(elem, name);
          } else {
            elem.setAttribute(name, name);
          }
          return name;
        }
      };
      jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function(_i, name) {
        var getter = attrHandle[name] || jQuery.find.attr;
        attrHandle[name] = function(elem, name2, isXML) {
          var ret, handle, lowercaseName = name2.toLowerCase();
          if (!isXML) {
            handle = attrHandle[lowercaseName];
            attrHandle[lowercaseName] = ret;
            ret = getter(elem, name2, isXML) != null ? lowercaseName : null;
            attrHandle[lowercaseName] = handle;
          }
          return ret;
        };
      });
      var rfocusable = /^(?:input|select|textarea|button)$/i, rclickable = /^(?:a|area)$/i;
      jQuery.fn.extend({
        prop: function(name, value) {
          return access(this, jQuery.prop, name, value, arguments.length > 1);
        },
        removeProp: function(name) {
          return this.each(function() {
            delete this[jQuery.propFix[name] || name];
          });
        }
      });
      jQuery.extend({
        prop: function(elem, name, value) {
          var ret, hooks, nType = elem.nodeType;
          if (nType === 3 || nType === 8 || nType === 2) {
            return;
          }
          if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
            name = jQuery.propFix[name] || name;
            hooks = jQuery.propHooks[name];
          }
          if (value !== void 0) {
            if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== void 0) {
              return ret;
            }
            return elem[name] = value;
          }
          if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
            return ret;
          }
          return elem[name];
        },
        propHooks: {
          tabIndex: {
            get: function(elem) {
              var tabindex = jQuery.find.attr(elem, "tabindex");
              if (tabindex) {
                return parseInt(tabindex, 10);
              }
              if (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) {
                return 0;
              }
              return -1;
            }
          }
        },
        propFix: {
          "for": "htmlFor",
          "class": "className"
        }
      });
      if (!support.optSelected) {
        jQuery.propHooks.selected = {
          get: function(elem) {
            var parent = elem.parentNode;
            if (parent && parent.parentNode) {
              parent.parentNode.selectedIndex;
            }
            return null;
          },
          set: function(elem) {
            var parent = elem.parentNode;
            if (parent) {
              parent.selectedIndex;
              if (parent.parentNode) {
                parent.parentNode.selectedIndex;
              }
            }
          }
        };
      }
      jQuery.each([
        "tabIndex",
        "readOnly",
        "maxLength",
        "cellSpacing",
        "cellPadding",
        "rowSpan",
        "colSpan",
        "useMap",
        "frameBorder",
        "contentEditable"
      ], function() {
        jQuery.propFix[this.toLowerCase()] = this;
      });
      function stripAndCollapse(value) {
        var tokens = value.match(rnothtmlwhite) || [];
        return tokens.join(" ");
      }
      function getClass(elem) {
        return elem.getAttribute && elem.getAttribute("class") || "";
      }
      function classesToArray(value) {
        if (Array.isArray(value)) {
          return value;
        }
        if (typeof value === "string") {
          return value.match(rnothtmlwhite) || [];
        }
        return [];
      }
      jQuery.fn.extend({
        addClass: function(value) {
          var classNames, cur, curValue, className, i, finalValue;
          if (isFunction(value)) {
            return this.each(function(j) {
              jQuery(this).addClass(value.call(this, j, getClass(this)));
            });
          }
          classNames = classesToArray(value);
          if (classNames.length) {
            return this.each(function() {
              curValue = getClass(this);
              cur = this.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";
              if (cur) {
                for (i = 0; i < classNames.length; i++) {
                  className = classNames[i];
                  if (cur.indexOf(" " + className + " ") < 0) {
                    cur += className + " ";
                  }
                }
                finalValue = stripAndCollapse(cur);
                if (curValue !== finalValue) {
                  this.setAttribute("class", finalValue);
                }
              }
            });
          }
          return this;
        },
        removeClass: function(value) {
          var classNames, cur, curValue, className, i, finalValue;
          if (isFunction(value)) {
            return this.each(function(j) {
              jQuery(this).removeClass(value.call(this, j, getClass(this)));
            });
          }
          if (!arguments.length) {
            return this.attr("class", "");
          }
          classNames = classesToArray(value);
          if (classNames.length) {
            return this.each(function() {
              curValue = getClass(this);
              cur = this.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";
              if (cur) {
                for (i = 0; i < classNames.length; i++) {
                  className = classNames[i];
                  while (cur.indexOf(" " + className + " ") > -1) {
                    cur = cur.replace(" " + className + " ", " ");
                  }
                }
                finalValue = stripAndCollapse(cur);
                if (curValue !== finalValue) {
                  this.setAttribute("class", finalValue);
                }
              }
            });
          }
          return this;
        },
        toggleClass: function(value, stateVal) {
          var classNames, className, i, self2, type = typeof value, isValidValue = type === "string" || Array.isArray(value);
          if (isFunction(value)) {
            return this.each(function(i2) {
              jQuery(this).toggleClass(value.call(this, i2, getClass(this), stateVal), stateVal);
            });
          }
          if (typeof stateVal === "boolean" && isValidValue) {
            return stateVal ? this.addClass(value) : this.removeClass(value);
          }
          classNames = classesToArray(value);
          return this.each(function() {
            if (isValidValue) {
              self2 = jQuery(this);
              for (i = 0; i < classNames.length; i++) {
                className = classNames[i];
                if (self2.hasClass(className)) {
                  self2.removeClass(className);
                } else {
                  self2.addClass(className);
                }
              }
            } else if (value === void 0 || type === "boolean") {
              className = getClass(this);
              if (className) {
                dataPriv.set(this, "__className__", className);
              }
              if (this.setAttribute) {
                this.setAttribute("class", className || value === false ? "" : dataPriv.get(this, "__className__") || "");
              }
            }
          });
        },
        hasClass: function(selector) {
          var className, elem, i = 0;
          className = " " + selector + " ";
          while (elem = this[i++]) {
            if (elem.nodeType === 1 && (" " + stripAndCollapse(getClass(elem)) + " ").indexOf(className) > -1) {
              return true;
            }
          }
          return false;
        }
      });
      var rreturn = /\r/g;
      jQuery.fn.extend({
        val: function(value) {
          var hooks, ret, valueIsFunction, elem = this[0];
          if (!arguments.length) {
            if (elem) {
              hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];
              if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== void 0) {
                return ret;
              }
              ret = elem.value;
              if (typeof ret === "string") {
                return ret.replace(rreturn, "");
              }
              return ret == null ? "" : ret;
            }
            return;
          }
          valueIsFunction = isFunction(value);
          return this.each(function(i) {
            var val;
            if (this.nodeType !== 1) {
              return;
            }
            if (valueIsFunction) {
              val = value.call(this, i, jQuery(this).val());
            } else {
              val = value;
            }
            if (val == null) {
              val = "";
            } else if (typeof val === "number") {
              val += "";
            } else if (Array.isArray(val)) {
              val = jQuery.map(val, function(value2) {
                return value2 == null ? "" : value2 + "";
              });
            }
            hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];
            if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === void 0) {
              this.value = val;
            }
          });
        }
      });
      jQuery.extend({
        valHooks: {
          option: {
            get: function(elem) {
              var val = jQuery.find.attr(elem, "value");
              return val != null ? val : stripAndCollapse(jQuery.text(elem));
            }
          },
          select: {
            get: function(elem) {
              var value, option, i, options = elem.options, index = elem.selectedIndex, one = elem.type === "select-one", values = one ? null : [], max = one ? index + 1 : options.length;
              if (index < 0) {
                i = max;
              } else {
                i = one ? index : 0;
              }
              for (; i < max; i++) {
                option = options[i];
                if ((option.selected || i === index) && !option.disabled && (!option.parentNode.disabled || !nodeName(option.parentNode, "optgroup"))) {
                  value = jQuery(option).val();
                  if (one) {
                    return value;
                  }
                  values.push(value);
                }
              }
              return values;
            },
            set: function(elem, value) {
              var optionSet, option, options = elem.options, values = jQuery.makeArray(value), i = options.length;
              while (i--) {
                option = options[i];
                if (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1) {
                  optionSet = true;
                }
              }
              if (!optionSet) {
                elem.selectedIndex = -1;
              }
              return values;
            }
          }
        }
      });
      jQuery.each(["radio", "checkbox"], function() {
        jQuery.valHooks[this] = {
          set: function(elem, value) {
            if (Array.isArray(value)) {
              return elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1;
            }
          }
        };
        if (!support.checkOn) {
          jQuery.valHooks[this].get = function(elem) {
            return elem.getAttribute("value") === null ? "on" : elem.value;
          };
        }
      });
      support.focusin = "onfocusin" in window2;
      var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/, stopPropagationCallback = function(e) {
        e.stopPropagation();
      };
      jQuery.extend(jQuery.event, {
        trigger: function(event, data, elem, onlyHandlers) {
          var i, cur, tmp, bubbleType, ontype, handle, special, lastElement, eventPath = [elem || document2], type = hasOwn.call(event, "type") ? event.type : event, namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];
          cur = lastElement = tmp = elem = elem || document2;
          if (elem.nodeType === 3 || elem.nodeType === 8) {
            return;
          }
          if (rfocusMorph.test(type + jQuery.event.triggered)) {
            return;
          }
          if (type.indexOf(".") > -1) {
            namespaces = type.split(".");
            type = namespaces.shift();
            namespaces.sort();
          }
          ontype = type.indexOf(":") < 0 && "on" + type;
          event = event[jQuery.expando] ? event : new jQuery.Event(type, typeof event === "object" && event);
          event.isTrigger = onlyHandlers ? 2 : 3;
          event.namespace = namespaces.join(".");
          event.rnamespace = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;
          event.result = void 0;
          if (!event.target) {
            event.target = elem;
          }
          data = data == null ? [event] : jQuery.makeArray(data, [event]);
          special = jQuery.event.special[type] || {};
          if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
            return;
          }
          if (!onlyHandlers && !special.noBubble && !isWindow(elem)) {
            bubbleType = special.delegateType || type;
            if (!rfocusMorph.test(bubbleType + type)) {
              cur = cur.parentNode;
            }
            for (; cur; cur = cur.parentNode) {
              eventPath.push(cur);
              tmp = cur;
            }
            if (tmp === (elem.ownerDocument || document2)) {
              eventPath.push(tmp.defaultView || tmp.parentWindow || window2);
            }
          }
          i = 0;
          while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
            lastElement = cur;
            event.type = i > 1 ? bubbleType : special.bindType || type;
            handle = (dataPriv.get(cur, "events") || /* @__PURE__ */ Object.create(null))[event.type] && dataPriv.get(cur, "handle");
            if (handle) {
              handle.apply(cur, data);
            }
            handle = ontype && cur[ontype];
            if (handle && handle.apply && acceptData(cur)) {
              event.result = handle.apply(cur, data);
              if (event.result === false) {
                event.preventDefault();
              }
            }
          }
          event.type = type;
          if (!onlyHandlers && !event.isDefaultPrevented()) {
            if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {
              if (ontype && isFunction(elem[type]) && !isWindow(elem)) {
                tmp = elem[ontype];
                if (tmp) {
                  elem[ontype] = null;
                }
                jQuery.event.triggered = type;
                if (event.isPropagationStopped()) {
                  lastElement.addEventListener(type, stopPropagationCallback);
                }
                elem[type]();
                if (event.isPropagationStopped()) {
                  lastElement.removeEventListener(type, stopPropagationCallback);
                }
                jQuery.event.triggered = void 0;
                if (tmp) {
                  elem[ontype] = tmp;
                }
              }
            }
          }
          return event.result;
        },
        simulate: function(type, elem, event) {
          var e = jQuery.extend(new jQuery.Event(), event, {
            type,
            isSimulated: true
          });
          jQuery.event.trigger(e, null, elem);
        }
      });
      jQuery.fn.extend({
        trigger: function(type, data) {
          return this.each(function() {
            jQuery.event.trigger(type, data, this);
          });
        },
        triggerHandler: function(type, data) {
          var elem = this[0];
          if (elem) {
            return jQuery.event.trigger(type, data, elem, true);
          }
        }
      });
      if (!support.focusin) {
        jQuery.each({ focus: "focusin", blur: "focusout" }, function(orig, fix) {
          var handler = function(event) {
            jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));
          };
          jQuery.event.special[fix] = {
            setup: function() {
              var doc = this.ownerDocument || this.document || this, attaches = dataPriv.access(doc, fix);
              if (!attaches) {
                doc.addEventListener(orig, handler, true);
              }
              dataPriv.access(doc, fix, (attaches || 0) + 1);
            },
            teardown: function() {
              var doc = this.ownerDocument || this.document || this, attaches = dataPriv.access(doc, fix) - 1;
              if (!attaches) {
                doc.removeEventListener(orig, handler, true);
                dataPriv.remove(doc, fix);
              } else {
                dataPriv.access(doc, fix, attaches);
              }
            }
          };
        });
      }
      var location = window2.location;
      var nonce = { guid: Date.now() };
      var rquery = /\?/;
      jQuery.parseXML = function(data) {
        var xml, parserErrorElem;
        if (!data || typeof data !== "string") {
          return null;
        }
        try {
          xml = new window2.DOMParser().parseFromString(data, "text/xml");
        } catch (e) {
        }
        parserErrorElem = xml && xml.getElementsByTagName("parsererror")[0];
        if (!xml || parserErrorElem) {
          jQuery.error("Invalid XML: " + (parserErrorElem ? jQuery.map(parserErrorElem.childNodes, function(el) {
            return el.textContent;
          }).join("\n") : data));
        }
        return xml;
      };
      var rbracket = /\[\]$/, rCRLF = /\r?\n/g, rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i, rsubmittable = /^(?:input|select|textarea|keygen)/i;
      function buildParams(prefix, obj, traditional, add) {
        var name;
        if (Array.isArray(obj)) {
          jQuery.each(obj, function(i, v) {
            if (traditional || rbracket.test(prefix)) {
              add(prefix, v);
            } else {
              buildParams(prefix + "[" + (typeof v === "object" && v != null ? i : "") + "]", v, traditional, add);
            }
          });
        } else if (!traditional && toType(obj) === "object") {
          for (name in obj) {
            buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
          }
        } else {
          add(prefix, obj);
        }
      }
      jQuery.param = function(a, traditional) {
        var prefix, s = [], add = function(key, valueOrFunction) {
          var value = isFunction(valueOrFunction) ? valueOrFunction() : valueOrFunction;
          s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value == null ? "" : value);
        };
        if (a == null) {
          return "";
        }
        if (Array.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
          jQuery.each(a, function() {
            add(this.name, this.value);
          });
        } else {
          for (prefix in a) {
            buildParams(prefix, a[prefix], traditional, add);
          }
        }
        return s.join("&");
      };
      jQuery.fn.extend({
        serialize: function() {
          return jQuery.param(this.serializeArray());
        },
        serializeArray: function() {
          return this.map(function() {
            var elements = jQuery.prop(this, "elements");
            return elements ? jQuery.makeArray(elements) : this;
          }).filter(function() {
            var type = this.type;
            return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
          }).map(function(_i, elem) {
            var val = jQuery(this).val();
            if (val == null) {
              return null;
            }
            if (Array.isArray(val)) {
              return jQuery.map(val, function(val2) {
                return { name: elem.name, value: val2.replace(rCRLF, "\r\n") };
              });
            }
            return { name: elem.name, value: val.replace(rCRLF, "\r\n") };
          }).get();
        }
      });
      var r20 = /%20/g, rhash = /#.*$/, rantiCache = /([?&])_=[^&]*/, rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg, rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, rnoContent = /^(?:GET|HEAD)$/, rprotocol = /^\/\//, prefilters = {}, transports = {}, allTypes = "*/".concat("*"), originAnchor = document2.createElement("a");
      originAnchor.href = location.href;
      function addToPrefiltersOrTransports(structure) {
        return function(dataTypeExpression, func) {
          if (typeof dataTypeExpression !== "string") {
            func = dataTypeExpression;
            dataTypeExpression = "*";
          }
          var dataType, i = 0, dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];
          if (isFunction(func)) {
            while (dataType = dataTypes[i++]) {
              if (dataType[0] === "+") {
                dataType = dataType.slice(1) || "*";
                (structure[dataType] = structure[dataType] || []).unshift(func);
              } else {
                (structure[dataType] = structure[dataType] || []).push(func);
              }
            }
          }
        };
      }
      function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
        var inspected = {}, seekingTransport = structure === transports;
        function inspect(dataType) {
          var selected;
          inspected[dataType] = true;
          jQuery.each(structure[dataType] || [], function(_, prefilterOrFactory) {
            var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
            if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {
              options.dataTypes.unshift(dataTypeOrTransport);
              inspect(dataTypeOrTransport);
              return false;
            } else if (seekingTransport) {
              return !(selected = dataTypeOrTransport);
            }
          });
          return selected;
        }
        return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
      }
      function ajaxExtend(target, src) {
        var key, deep, flatOptions = jQuery.ajaxSettings.flatOptions || {};
        for (key in src) {
          if (src[key] !== void 0) {
            (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
          }
        }
        if (deep) {
          jQuery.extend(true, target, deep);
        }
        return target;
      }
      function ajaxHandleResponses(s, jqXHR, responses) {
        var ct, type, finalDataType, firstDataType, contents = s.contents, dataTypes = s.dataTypes;
        while (dataTypes[0] === "*") {
          dataTypes.shift();
          if (ct === void 0) {
            ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
          }
        }
        if (ct) {
          for (type in contents) {
            if (contents[type] && contents[type].test(ct)) {
              dataTypes.unshift(type);
              break;
            }
          }
        }
        if (dataTypes[0] in responses) {
          finalDataType = dataTypes[0];
        } else {
          for (type in responses) {
            if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
              finalDataType = type;
              break;
            }
            if (!firstDataType) {
              firstDataType = type;
            }
          }
          finalDataType = finalDataType || firstDataType;
        }
        if (finalDataType) {
          if (finalDataType !== dataTypes[0]) {
            dataTypes.unshift(finalDataType);
          }
          return responses[finalDataType];
        }
      }
      function ajaxConvert(s, response, jqXHR, isSuccess) {
        var conv2, current, conv, tmp, prev, converters = {}, dataTypes = s.dataTypes.slice();
        if (dataTypes[1]) {
          for (conv in s.converters) {
            converters[conv.toLowerCase()] = s.converters[conv];
          }
        }
        current = dataTypes.shift();
        while (current) {
          if (s.responseFields[current]) {
            jqXHR[s.responseFields[current]] = response;
          }
          if (!prev && isSuccess && s.dataFilter) {
            response = s.dataFilter(response, s.dataType);
          }
          prev = current;
          current = dataTypes.shift();
          if (current) {
            if (current === "*") {
              current = prev;
            } else if (prev !== "*" && prev !== current) {
              conv = converters[prev + " " + current] || converters["* " + current];
              if (!conv) {
                for (conv2 in converters) {
                  tmp = conv2.split(" ");
                  if (tmp[1] === current) {
                    conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
                    if (conv) {
                      if (conv === true) {
                        conv = converters[conv2];
                      } else if (converters[conv2] !== true) {
                        current = tmp[0];
                        dataTypes.unshift(tmp[1]);
                      }
                      break;
                    }
                  }
                }
              }
              if (conv !== true) {
                if (conv && s.throws) {
                  response = conv(response);
                } else {
                  try {
                    response = conv(response);
                  } catch (e) {
                    return {
                      state: "parsererror",
                      error: conv ? e : "No conversion from " + prev + " to " + current
                    };
                  }
                }
              }
            }
          }
        }
        return { state: "success", data: response };
      }
      jQuery.extend({
        active: 0,
        lastModified: {},
        etag: {},
        ajaxSettings: {
          url: location.href,
          type: "GET",
          isLocal: rlocalProtocol.test(location.protocol),
          global: true,
          processData: true,
          async: true,
          contentType: "application/x-www-form-urlencoded; charset=UTF-8",
          accepts: {
            "*": allTypes,
            text: "text/plain",
            html: "text/html",
            xml: "application/xml, text/xml",
            json: "application/json, text/javascript"
          },
          contents: {
            xml: /\bxml\b/,
            html: /\bhtml/,
            json: /\bjson\b/
          },
          responseFields: {
            xml: "responseXML",
            text: "responseText",
            json: "responseJSON"
          },
          converters: {
            "* text": String,
            "text html": true,
            "text json": JSON.parse,
            "text xml": jQuery.parseXML
          },
          flatOptions: {
            url: true,
            context: true
          }
        },
        ajaxSetup: function(target, settings) {
          return settings ? ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : ajaxExtend(jQuery.ajaxSettings, target);
        },
        ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
        ajaxTransport: addToPrefiltersOrTransports(transports),
        ajax: function(url, options) {
          if (typeof url === "object") {
            options = url;
            url = void 0;
          }
          options = options || {};
          var transport, cacheURL, responseHeadersString, responseHeaders, timeoutTimer, urlAnchor, completed2, fireGlobals, i, uncached, s = jQuery.ajaxSetup({}, options), callbackContext = s.context || s, globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event, deferred = jQuery.Deferred(), completeDeferred = jQuery.Callbacks("once memory"), statusCode = s.statusCode || {}, requestHeaders = {}, requestHeadersNames = {}, strAbort = "canceled", jqXHR = {
            readyState: 0,
            getResponseHeader: function(key) {
              var match;
              if (completed2) {
                if (!responseHeaders) {
                  responseHeaders = {};
                  while (match = rheaders.exec(responseHeadersString)) {
                    responseHeaders[match[1].toLowerCase() + " "] = (responseHeaders[match[1].toLowerCase() + " "] || []).concat(match[2]);
                  }
                }
                match = responseHeaders[key.toLowerCase() + " "];
              }
              return match == null ? null : match.join(", ");
            },
            getAllResponseHeaders: function() {
              return completed2 ? responseHeadersString : null;
            },
            setRequestHeader: function(name, value) {
              if (completed2 == null) {
                name = requestHeadersNames[name.toLowerCase()] = requestHeadersNames[name.toLowerCase()] || name;
                requestHeaders[name] = value;
              }
              return this;
            },
            overrideMimeType: function(type) {
              if (completed2 == null) {
                s.mimeType = type;
              }
              return this;
            },
            statusCode: function(map) {
              var code;
              if (map) {
                if (completed2) {
                  jqXHR.always(map[jqXHR.status]);
                } else {
                  for (code in map) {
                    statusCode[code] = [statusCode[code], map[code]];
                  }
                }
              }
              return this;
            },
            abort: function(statusText) {
              var finalText = statusText || strAbort;
              if (transport) {
                transport.abort(finalText);
              }
              done(0, finalText);
              return this;
            }
          };
          deferred.promise(jqXHR);
          s.url = ((url || s.url || location.href) + "").replace(rprotocol, location.protocol + "//");
          s.type = options.method || options.type || s.method || s.type;
          s.dataTypes = (s.dataType || "*").toLowerCase().match(rnothtmlwhite) || [""];
          if (s.crossDomain == null) {
            urlAnchor = document2.createElement("a");
            try {
              urlAnchor.href = s.url;
              urlAnchor.href = urlAnchor.href;
              s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !== urlAnchor.protocol + "//" + urlAnchor.host;
            } catch (e) {
              s.crossDomain = true;
            }
          }
          if (s.data && s.processData && typeof s.data !== "string") {
            s.data = jQuery.param(s.data, s.traditional);
          }
          inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);
          if (completed2) {
            return jqXHR;
          }
          fireGlobals = jQuery.event && s.global;
          if (fireGlobals && jQuery.active++ === 0) {
            jQuery.event.trigger("ajaxStart");
          }
          s.type = s.type.toUpperCase();
          s.hasContent = !rnoContent.test(s.type);
          cacheURL = s.url.replace(rhash, "");
          if (!s.hasContent) {
            uncached = s.url.slice(cacheURL.length);
            if (s.data && (s.processData || typeof s.data === "string")) {
              cacheURL += (rquery.test(cacheURL) ? "&" : "?") + s.data;
              delete s.data;
            }
            if (s.cache === false) {
              cacheURL = cacheURL.replace(rantiCache, "$1");
              uncached = (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce.guid++ + uncached;
            }
            s.url = cacheURL + uncached;
          } else if (s.data && s.processData && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0) {
            s.data = s.data.replace(r20, "+");
          }
          if (s.ifModified) {
            if (jQuery.lastModified[cacheURL]) {
              jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
            }
            if (jQuery.etag[cacheURL]) {
              jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
            }
          }
          if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
            jqXHR.setRequestHeader("Content-Type", s.contentType);
          }
          jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);
          for (i in s.headers) {
            jqXHR.setRequestHeader(i, s.headers[i]);
          }
          if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed2)) {
            return jqXHR.abort();
          }
          strAbort = "abort";
          completeDeferred.add(s.complete);
          jqXHR.done(s.success);
          jqXHR.fail(s.error);
          transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);
          if (!transport) {
            done(-1, "No Transport");
          } else {
            jqXHR.readyState = 1;
            if (fireGlobals) {
              globalEventContext.trigger("ajaxSend", [jqXHR, s]);
            }
            if (completed2) {
              return jqXHR;
            }
            if (s.async && s.timeout > 0) {
              timeoutTimer = window2.setTimeout(function() {
                jqXHR.abort("timeout");
              }, s.timeout);
            }
            try {
              completed2 = false;
              transport.send(requestHeaders, done);
            } catch (e) {
              if (completed2) {
                throw e;
              }
              done(-1, e);
            }
          }
          function done(status, nativeStatusText, responses, headers) {
            var isSuccess, success, error, response, modified, statusText = nativeStatusText;
            if (completed2) {
              return;
            }
            completed2 = true;
            if (timeoutTimer) {
              window2.clearTimeout(timeoutTimer);
            }
            transport = void 0;
            responseHeadersString = headers || "";
            jqXHR.readyState = status > 0 ? 4 : 0;
            isSuccess = status >= 200 && status < 300 || status === 304;
            if (responses) {
              response = ajaxHandleResponses(s, jqXHR, responses);
            }
            if (!isSuccess && jQuery.inArray("script", s.dataTypes) > -1 && jQuery.inArray("json", s.dataTypes) < 0) {
              s.converters["text script"] = function() {
              };
            }
            response = ajaxConvert(s, response, jqXHR, isSuccess);
            if (isSuccess) {
              if (s.ifModified) {
                modified = jqXHR.getResponseHeader("Last-Modified");
                if (modified) {
                  jQuery.lastModified[cacheURL] = modified;
                }
                modified = jqXHR.getResponseHeader("etag");
                if (modified) {
                  jQuery.etag[cacheURL] = modified;
                }
              }
              if (status === 204 || s.type === "HEAD") {
                statusText = "nocontent";
              } else if (status === 304) {
                statusText = "notmodified";
              } else {
                statusText = response.state;
                success = response.data;
                error = response.error;
                isSuccess = !error;
              }
            } else {
              error = statusText;
              if (status || !statusText) {
                statusText = "error";
                if (status < 0) {
                  status = 0;
                }
              }
            }
            jqXHR.status = status;
            jqXHR.statusText = (nativeStatusText || statusText) + "";
            if (isSuccess) {
              deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
            } else {
              deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
            }
            jqXHR.statusCode(statusCode);
            statusCode = void 0;
            if (fireGlobals) {
              globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);
            }
            completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);
            if (fireGlobals) {
              globalEventContext.trigger("ajaxComplete", [jqXHR, s]);
              if (!--jQuery.active) {
                jQuery.event.trigger("ajaxStop");
              }
            }
          }
          return jqXHR;
        },
        getJSON: function(url, data, callback) {
          return jQuery.get(url, data, callback, "json");
        },
        getScript: function(url, callback) {
          return jQuery.get(url, void 0, callback, "script");
        }
      });
      jQuery.each(["get", "post"], function(_i, method) {
        jQuery[method] = function(url, data, callback, type) {
          if (isFunction(data)) {
            type = type || callback;
            callback = data;
            data = void 0;
          }
          return jQuery.ajax(jQuery.extend({
            url,
            type: method,
            dataType: type,
            data,
            success: callback
          }, jQuery.isPlainObject(url) && url));
        };
      });
      jQuery.ajaxPrefilter(function(s) {
        var i;
        for (i in s.headers) {
          if (i.toLowerCase() === "content-type") {
            s.contentType = s.headers[i] || "";
          }
        }
      });
      jQuery._evalUrl = function(url, options, doc) {
        return jQuery.ajax({
          url,
          type: "GET",
          dataType: "script",
          cache: true,
          async: false,
          global: false,
          converters: {
            "text script": function() {
            }
          },
          dataFilter: function(response) {
            jQuery.globalEval(response, options, doc);
          }
        });
      };
      jQuery.fn.extend({
        wrapAll: function(html) {
          var wrap;
          if (this[0]) {
            if (isFunction(html)) {
              html = html.call(this[0]);
            }
            wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);
            if (this[0].parentNode) {
              wrap.insertBefore(this[0]);
            }
            wrap.map(function() {
              var elem = this;
              while (elem.firstElementChild) {
                elem = elem.firstElementChild;
              }
              return elem;
            }).append(this);
          }
          return this;
        },
        wrapInner: function(html) {
          if (isFunction(html)) {
            return this.each(function(i) {
              jQuery(this).wrapInner(html.call(this, i));
            });
          }
          return this.each(function() {
            var self2 = jQuery(this), contents = self2.contents();
            if (contents.length) {
              contents.wrapAll(html);
            } else {
              self2.append(html);
            }
          });
        },
        wrap: function(html) {
          var htmlIsFunction = isFunction(html);
          return this.each(function(i) {
            jQuery(this).wrapAll(htmlIsFunction ? html.call(this, i) : html);
          });
        },
        unwrap: function(selector) {
          this.parent(selector).not("body").each(function() {
            jQuery(this).replaceWith(this.childNodes);
          });
          return this;
        }
      });
      jQuery.expr.pseudos.hidden = function(elem) {
        return !jQuery.expr.pseudos.visible(elem);
      };
      jQuery.expr.pseudos.visible = function(elem) {
        return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);
      };
      jQuery.ajaxSettings.xhr = function() {
        try {
          return new window2.XMLHttpRequest();
        } catch (e) {
        }
      };
      var xhrSuccessStatus = {
        0: 200,
        1223: 204
      }, xhrSupported = jQuery.ajaxSettings.xhr();
      support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
      support.ajax = xhrSupported = !!xhrSupported;
      jQuery.ajaxTransport(function(options) {
        var callback, errorCallback;
        if (support.cors || xhrSupported && !options.crossDomain) {
          return {
            send: function(headers, complete) {
              var i, xhr = options.xhr();
              xhr.open(options.type, options.url, options.async, options.username, options.password);
              if (options.xhrFields) {
                for (i in options.xhrFields) {
                  xhr[i] = options.xhrFields[i];
                }
              }
              if (options.mimeType && xhr.overrideMimeType) {
                xhr.overrideMimeType(options.mimeType);
              }
              if (!options.crossDomain && !headers["X-Requested-With"]) {
                headers["X-Requested-With"] = "XMLHttpRequest";
              }
              for (i in headers) {
                xhr.setRequestHeader(i, headers[i]);
              }
              callback = function(type) {
                return function() {
                  if (callback) {
                    callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.ontimeout = xhr.onreadystatechange = null;
                    if (type === "abort") {
                      xhr.abort();
                    } else if (type === "error") {
                      if (typeof xhr.status !== "number") {
                        complete(0, "error");
                      } else {
                        complete(xhr.status, xhr.statusText);
                      }
                    } else {
                      complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, (xhr.responseType || "text") !== "text" || typeof xhr.responseText !== "string" ? { binary: xhr.response } : { text: xhr.responseText }, xhr.getAllResponseHeaders());
                    }
                  }
                };
              };
              xhr.onload = callback();
              errorCallback = xhr.onerror = xhr.ontimeout = callback("error");
              if (xhr.onabort !== void 0) {
                xhr.onabort = errorCallback;
              } else {
                xhr.onreadystatechange = function() {
                  if (xhr.readyState === 4) {
                    window2.setTimeout(function() {
                      if (callback) {
                        errorCallback();
                      }
                    });
                  }
                };
              }
              callback = callback("abort");
              try {
                xhr.send(options.hasContent && options.data || null);
              } catch (e) {
                if (callback) {
                  throw e;
                }
              }
            },
            abort: function() {
              if (callback) {
                callback();
              }
            }
          };
        }
      });
      jQuery.ajaxPrefilter(function(s) {
        if (s.crossDomain) {
          s.contents.script = false;
        }
      });
      jQuery.ajaxSetup({
        accepts: {
          script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
        },
        contents: {
          script: /\b(?:java|ecma)script\b/
        },
        converters: {
          "text script": function(text) {
            jQuery.globalEval(text);
            return text;
          }
        }
      });
      jQuery.ajaxPrefilter("script", function(s) {
        if (s.cache === void 0) {
          s.cache = false;
        }
        if (s.crossDomain) {
          s.type = "GET";
        }
      });
      jQuery.ajaxTransport("script", function(s) {
        if (s.crossDomain || s.scriptAttrs) {
          var script, callback;
          return {
            send: function(_, complete) {
              script = jQuery("<script>").attr(s.scriptAttrs || {}).prop({ charset: s.scriptCharset, src: s.url }).on("load error", callback = function(evt) {
                script.remove();
                callback = null;
                if (evt) {
                  complete(evt.type === "error" ? 404 : 200, evt.type);
                }
              });
              document2.head.appendChild(script[0]);
            },
            abort: function() {
              if (callback) {
                callback();
              }
            }
          };
        }
      });
      var oldCallbacks = [], rjsonp = /(=)\?(?=&|$)|\?\?/;
      jQuery.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function() {
          var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce.guid++;
          this[callback] = true;
          return callback;
        }
      });
      jQuery.ajaxPrefilter("json jsonp", function(s, originalSettings, jqXHR) {
        var callbackName, overwritten, responseContainer, jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0 && rjsonp.test(s.data) && "data");
        if (jsonProp || s.dataTypes[0] === "jsonp") {
          callbackName = s.jsonpCallback = isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;
          if (jsonProp) {
            s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
          } else if (s.jsonp !== false) {
            s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
          }
          s.converters["script json"] = function() {
            if (!responseContainer) {
              jQuery.error(callbackName + " was not called");
            }
            return responseContainer[0];
          };
          s.dataTypes[0] = "json";
          overwritten = window2[callbackName];
          window2[callbackName] = function() {
            responseContainer = arguments;
          };
          jqXHR.always(function() {
            if (overwritten === void 0) {
              jQuery(window2).removeProp(callbackName);
            } else {
              window2[callbackName] = overwritten;
            }
            if (s[callbackName]) {
              s.jsonpCallback = originalSettings.jsonpCallback;
              oldCallbacks.push(callbackName);
            }
            if (responseContainer && isFunction(overwritten)) {
              overwritten(responseContainer[0]);
            }
            responseContainer = overwritten = void 0;
          });
          return "script";
        }
      });
      support.createHTMLDocument = function() {
        var body = document2.implementation.createHTMLDocument("").body;
        body.innerHTML = "<form></form><form></form>";
        return body.childNodes.length === 2;
      }();
      jQuery.parseHTML = function(data, context, keepScripts) {
        if (typeof data !== "string") {
          return [];
        }
        if (typeof context === "boolean") {
          keepScripts = context;
          context = false;
        }
        var base, parsed, scripts;
        if (!context) {
          if (support.createHTMLDocument) {
            context = document2.implementation.createHTMLDocument("");
            base = context.createElement("base");
            base.href = document2.location.href;
            context.head.appendChild(base);
          } else {
            context = document2;
          }
        }
        parsed = rsingleTag.exec(data);
        scripts = !keepScripts && [];
        if (parsed) {
          return [context.createElement(parsed[1])];
        }
        parsed = buildFragment([data], context, scripts);
        if (scripts && scripts.length) {
          jQuery(scripts).remove();
        }
        return jQuery.merge([], parsed.childNodes);
      };
      jQuery.fn.load = function(url, params, callback) {
        var selector, type, response, self2 = this, off = url.indexOf(" ");
        if (off > -1) {
          selector = stripAndCollapse(url.slice(off));
          url = url.slice(0, off);
        }
        if (isFunction(params)) {
          callback = params;
          params = void 0;
        } else if (params && typeof params === "object") {
          type = "POST";
        }
        if (self2.length > 0) {
          jQuery.ajax({
            url,
            type: type || "GET",
            dataType: "html",
            data: params
          }).done(function(responseText) {
            response = arguments;
            self2.html(selector ? jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) : responseText);
          }).always(callback && function(jqXHR, status) {
            self2.each(function() {
              callback.apply(this, response || [jqXHR.responseText, status, jqXHR]);
            });
          });
        }
        return this;
      };
      jQuery.expr.pseudos.animated = function(elem) {
        return jQuery.grep(jQuery.timers, function(fn) {
          return elem === fn.elem;
        }).length;
      };
      jQuery.offset = {
        setOffset: function(elem, options, i) {
          var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition, position = jQuery.css(elem, "position"), curElem = jQuery(elem), props = {};
          if (position === "static") {
            elem.style.position = "relative";
          }
          curOffset = curElem.offset();
          curCSSTop = jQuery.css(elem, "top");
          curCSSLeft = jQuery.css(elem, "left");
          calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1;
          if (calculatePosition) {
            curPosition = curElem.position();
            curTop = curPosition.top;
            curLeft = curPosition.left;
          } else {
            curTop = parseFloat(curCSSTop) || 0;
            curLeft = parseFloat(curCSSLeft) || 0;
          }
          if (isFunction(options)) {
            options = options.call(elem, i, jQuery.extend({}, curOffset));
          }
          if (options.top != null) {
            props.top = options.top - curOffset.top + curTop;
          }
          if (options.left != null) {
            props.left = options.left - curOffset.left + curLeft;
          }
          if ("using" in options) {
            options.using.call(elem, props);
          } else {
            curElem.css(props);
          }
        }
      };
      jQuery.fn.extend({
        offset: function(options) {
          if (arguments.length) {
            return options === void 0 ? this : this.each(function(i) {
              jQuery.offset.setOffset(this, options, i);
            });
          }
          var rect, win, elem = this[0];
          if (!elem) {
            return;
          }
          if (!elem.getClientRects().length) {
            return { top: 0, left: 0 };
          }
          rect = elem.getBoundingClientRect();
          win = elem.ownerDocument.defaultView;
          return {
            top: rect.top + win.pageYOffset,
            left: rect.left + win.pageXOffset
          };
        },
        position: function() {
          if (!this[0]) {
            return;
          }
          var offsetParent, offset, doc, elem = this[0], parentOffset = { top: 0, left: 0 };
          if (jQuery.css(elem, "position") === "fixed") {
            offset = elem.getBoundingClientRect();
          } else {
            offset = this.offset();
            doc = elem.ownerDocument;
            offsetParent = elem.offsetParent || doc.documentElement;
            while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && jQuery.css(offsetParent, "position") === "static") {
              offsetParent = offsetParent.parentNode;
            }
            if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {
              parentOffset = jQuery(offsetParent).offset();
              parentOffset.top += jQuery.css(offsetParent, "borderTopWidth", true);
              parentOffset.left += jQuery.css(offsetParent, "borderLeftWidth", true);
            }
          }
          return {
            top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
            left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
          };
        },
        offsetParent: function() {
          return this.map(function() {
            var offsetParent = this.offsetParent;
            while (offsetParent && jQuery.css(offsetParent, "position") === "static") {
              offsetParent = offsetParent.offsetParent;
            }
            return offsetParent || documentElement;
          });
        }
      });
      jQuery.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function(method, prop) {
        var top = prop === "pageYOffset";
        jQuery.fn[method] = function(val) {
          return access(this, function(elem, method2, val2) {
            var win;
            if (isWindow(elem)) {
              win = elem;
            } else if (elem.nodeType === 9) {
              win = elem.defaultView;
            }
            if (val2 === void 0) {
              return win ? win[prop] : elem[method2];
            }
            if (win) {
              win.scrollTo(!top ? val2 : win.pageXOffset, top ? val2 : win.pageYOffset);
            } else {
              elem[method2] = val2;
            }
          }, method, val, arguments.length);
        };
      });
      jQuery.each(["top", "left"], function(_i, prop) {
        jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function(elem, computed) {
          if (computed) {
            computed = curCSS(elem, prop);
            return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;
          }
        });
      });
      jQuery.each({ Height: "height", Width: "width" }, function(name, type) {
        jQuery.each({
          padding: "inner" + name,
          content: type,
          "": "outer" + name
        }, function(defaultExtra, funcName) {
          jQuery.fn[funcName] = function(margin, value) {
            var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"), extra = defaultExtra || (margin === true || value === true ? "margin" : "border");
            return access(this, function(elem, type2, value2) {
              var doc;
              if (isWindow(elem)) {
                return funcName.indexOf("outer") === 0 ? elem["inner" + name] : elem.document.documentElement["client" + name];
              }
              if (elem.nodeType === 9) {
                doc = elem.documentElement;
                return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
              }
              return value2 === void 0 ? jQuery.css(elem, type2, extra) : jQuery.style(elem, type2, value2, extra);
            }, type, chainable ? margin : void 0, chainable);
          };
        });
      });
      jQuery.each([
        "ajaxStart",
        "ajaxStop",
        "ajaxComplete",
        "ajaxError",
        "ajaxSuccess",
        "ajaxSend"
      ], function(_i, type) {
        jQuery.fn[type] = function(fn) {
          return this.on(type, fn);
        };
      });
      jQuery.fn.extend({
        bind: function(types, data, fn) {
          return this.on(types, null, data, fn);
        },
        unbind: function(types, fn) {
          return this.off(types, null, fn);
        },
        delegate: function(selector, types, data, fn) {
          return this.on(types, selector, data, fn);
        },
        undelegate: function(selector, types, fn) {
          return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
        },
        hover: function(fnOver, fnOut) {
          return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
        }
      });
      jQuery.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "), function(_i, name) {
        jQuery.fn[name] = function(data, fn) {
          return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
        };
      });
      var rtrim = /^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;
      jQuery.proxy = function(fn, context) {
        var tmp, args, proxy;
        if (typeof context === "string") {
          tmp = fn[context];
          context = fn;
          fn = tmp;
        }
        if (!isFunction(fn)) {
          return void 0;
        }
        args = slice.call(arguments, 2);
        proxy = function() {
          return fn.apply(context || this, args.concat(slice.call(arguments)));
        };
        proxy.guid = fn.guid = fn.guid || jQuery.guid++;
        return proxy;
      };
      jQuery.holdReady = function(hold) {
        if (hold) {
          jQuery.readyWait++;
        } else {
          jQuery.ready(true);
        }
      };
      jQuery.isArray = Array.isArray;
      jQuery.parseJSON = JSON.parse;
      jQuery.nodeName = nodeName;
      jQuery.isFunction = isFunction;
      jQuery.isWindow = isWindow;
      jQuery.camelCase = camelCase;
      jQuery.type = toType;
      jQuery.now = Date.now;
      jQuery.isNumeric = function(obj) {
        var type = jQuery.type(obj);
        return (type === "number" || type === "string") && !isNaN(obj - parseFloat(obj));
      };
      jQuery.trim = function(text) {
        return text == null ? "" : (text + "").replace(rtrim, "$1");
      };
      if (typeof define === "function" && define.amd) {
        define("jquery", [], function() {
          return jQuery;
        });
      }
      var _jQuery = window2.jQuery, _$ = window2.$;
      jQuery.noConflict = function(deep) {
        if (window2.$ === jQuery) {
          window2.$ = _$;
        }
        if (deep && window2.jQuery === jQuery) {
          window2.jQuery = _jQuery;
        }
        return jQuery;
      };
      if (typeof noGlobal === "undefined") {
        window2.jQuery = window2.$ = jQuery;
      }
      return jQuery;
    });
  }
});

// node_modules/@publishkit/pklib/dist/pklib.js
var require_pklib = __commonJS({
  "node_modules/@publishkit/pklib/dist/pklib.js"(exports, module2) {
    "use strict";
    var t = require_lib();
    var e = require("node:fs");
    var n = require("node:path");
    var r = require("node:events");
    var i = require("node:assert");
    require("node:util");
    var s = require_filesize();
    var a = require_front_matter();
    var o = require("node:punycode");
    var u = require_jquery();
    function l(t2) {
      var e2 = /* @__PURE__ */ Object.create(null);
      return t2 && Object.keys(t2).forEach(function(n2) {
        if (n2 !== "default") {
          var r2 = Object.getOwnPropertyDescriptor(t2, n2);
          Object.defineProperty(e2, n2, r2.get ? r2 : { enumerable: true, get: function() {
            return t2[n2];
          } });
        }
      }), e2.default = t2, Object.freeze(e2);
    }
    function c(t2, e2) {
      return e2.forEach(function(e3) {
        e3 && typeof e3 != "string" && !Array.isArray(e3) && Object.keys(e3).forEach(function(n2) {
          if (n2 !== "default" && !(n2 in t2)) {
            var r2 = Object.getOwnPropertyDescriptor(e3, n2);
            Object.defineProperty(t2, n2, r2.get ? r2 : { enumerable: true, get: function() {
              return e3[n2];
            } });
          }
        });
      }), Object.freeze(t2);
    }
    var _ = l(s);
    var h = Object.freeze({ __proto__: null, timeout: (t2 = 0) => new Promise((e2) => {
      setTimeout(() => {
        e2();
      }, t2);
    }) });
    var p = new class {
      constructor() {
        __publicField(this, "lib");
        __publicField(this, "encrypt", async (t2, e2) => {
          const n2 = new TextEncoder().encode(e2), r2 = await this.lib.subtle.digest("SHA-256", n2), i2 = this.lib.getRandomValues(new Uint8Array(12)), s2 = Array.from(i2).map((t3) => String.fromCharCode(t3)).join(""), a2 = { name: "AES-GCM", iv: i2 }, o2 = await this.lib.subtle.importKey("raw", r2, a2, false, ["encrypt"]), u2 = new TextEncoder().encode(t2), l2 = await this.lib.subtle.encrypt(a2, o2, u2), c2 = Array.from(new Uint8Array(l2)).map((t3) => String.fromCharCode(t3)).join("");
          return btoa(s2 + c2);
        });
        __publicField(this, "decrypt", async (t2, e2) => {
          const n2 = new TextEncoder().encode(e2), r2 = await this.lib.subtle.digest("SHA-256", n2), i2 = atob(t2).slice(0, 12), s2 = { name: "AES-GCM", iv: new Uint8Array(Array.from(i2).map((t3) => t3.charCodeAt(0))) }, a2 = await this.lib.subtle.importKey("raw", r2, s2, false, ["decrypt"]), o2 = atob(t2).slice(12), u2 = new Uint8Array(Array.from(o2).map((t3) => t3.charCodeAt(0)));
          try {
            const t3 = await this.lib.subtle.decrypt(s2, a2, u2);
            return new TextDecoder().decode(t3);
          } catch (t3) {
            throw new Error("decrypt failed");
          }
        });
        try {
          this.lib = window.crypto;
        } catch (t2) {
        }
      }
    }();
    var f = async function(t2) {
      const e2 = new TextEncoder().encode(t2), n2 = await p.lib.subtle.digest("SHA-256", e2);
      return Array.from(new Uint8Array(n2)).map((t3) => t3.toString(16).padStart(2, "0")).join("");
    };
    var d = Object.freeze({ __proto__: null, setLib: (t2) => {
      p.lib = t2;
    }, encrypt: async (t2, e2) => p.encrypt(t2, e2), decrypt: async (t2, e2) => p.decrypt(t2, e2), sha256: f, getHash: async (t2) => (await f(t2)).slice(0, 32) });
    require_jquery();
    var g = (t2, { delim: e2 = ",", trim: n2 = true, uniq: r2 = true, compact: i2 = true } = {}) => {
      if (!t2)
        return [];
      let s2 = typeof t2 == "string" ? t2.split(e2) : t2 || [];
      return n2 && (s2 = s2.map((t3) => {
        var _a2;
        return ((_a2 = t3 == null ? void 0 : t3.trim) == null ? void 0 : _a2.call(t3)) || t3;
      })), i2 && (s2 = s2.filter(Boolean)), r2 && (s2 = [...new Set(s2)]), s2;
    };
    var m = (t2) => {
      for (var e2 = t2.concat(), n2 = 0; n2 < e2.length; ++n2)
        for (var r2 = n2 + 1; r2 < e2.length; ++r2)
          e2[n2] === e2[r2] && e2.splice(r2--, 1);
      return e2;
    };
    var b = Object.freeze({ __proto__: null, asArray: g, unique: m, clean: (t2) => m(t2.flat().filter(Boolean)) });
    var y = (t2) => t2 && typeof t2 == "object" && !Array.isArray(t2);
    var k = (t2, ...e2) => {
      if (!e2.length)
        return t2;
      const n2 = e2.shift();
      if (y(t2) && y(n2))
        for (const e3 in n2)
          y(n2[e3]) ? (t2[e3] || Object.assign(t2, { [e3]: {} }), k(t2[e3], n2[e3])) : Object.assign(t2, { [e3]: n2[e3] });
      return k(t2, ...e2);
    };
    var v = (t2, e2) => e2.split(".").reduce((t3, e3) => t3 && t3[e3], t2);
    var w = (t2, e2, n2) => {
      e2 = function(t3) {
        if (typeof t3 != "string")
          return t3;
        let e3 = [];
        return t3.split(".").forEach(function(t4) {
          t4.split(/\[([^}]+)\]/g).forEach(function(t5) {
            t5.length > 0 && e3.push(t5);
          });
        }), e3;
      }(e2);
      let r2 = e2.length, i2 = t2;
      e2.forEach(function(t3, e3) {
        let s2 = t3.slice(-2) === "[]";
        t3 = s2 ? t3.slice(0, -2) : t3, s2 && !Array.isArray(i2[t3]) && (i2[t3] = []), e3 === r2 - 1 ? s2 ? i2[t3].push(n2) : i2[t3] = n2 : (i2[t3] || (i2[t3] = {}), i2 = i2[t3]);
      });
    };
    var x = Object.freeze({ __proto__: null, isObject: y, merge: k, get: v, put: w, clone: (t2, e2) => {
      const n2 = e2 ? g(e2) : [], r2 = JSON.parse(JSON.stringify(t2));
      return n2.forEach((t3) => delete r2[t3]), r2;
    } });
    var E = typeof globalThis != "undefined" ? globalThis : typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : {};
    function A(t2) {
      return t2 && t2.__esModule && Object.prototype.hasOwnProperty.call(t2, "default") ? t2.default : t2;
    }
    var C;
    var O = {};
    var S = {};
    var T = {};
    var D = { get exports() {
      return T;
    }, set exports(t2) {
      T = t2;
    } };
    var R = {};
    var L = {};
    function N() {
      if (C)
        return L;
      function t2(t3) {
        this.__parent = t3, this.__character_count = 0, this.__indent_count = -1, this.__alignment_count = 0, this.__wrap_point_index = 0, this.__wrap_point_character_count = 0, this.__wrap_point_indent_count = -1, this.__wrap_point_alignment_count = 0, this.__items = [];
      }
      function e2(t3, e3) {
        this.__cache = [""], this.__indent_size = t3.indent_size, this.__indent_string = t3.indent_char, t3.indent_with_tabs || (this.__indent_string = new Array(t3.indent_size + 1).join(t3.indent_char)), e3 = e3 || "", t3.indent_level > 0 && (e3 = new Array(t3.indent_level + 1).join(this.__indent_string)), this.__base_string = e3, this.__base_string_length = e3.length;
      }
      function n2(n3, r2) {
        this.__indent_cache = new e2(n3, r2), this.raw = false, this._end_with_newline = n3.end_with_newline, this.indent_size = n3.indent_size, this.wrap_line_length = n3.wrap_line_length, this.indent_empty_lines = n3.indent_empty_lines, this.__lines = [], this.previous_line = null, this.current_line = null, this.next_line = new t2(this), this.space_before_token = false, this.non_breaking_space = false, this.previous_token_wrapped = false, this.__add_outputline();
      }
      return C = 1, t2.prototype.clone_empty = function() {
        var e3 = new t2(this.__parent);
        return e3.set_indent(this.__indent_count, this.__alignment_count), e3;
      }, t2.prototype.item = function(t3) {
        return t3 < 0 ? this.__items[this.__items.length + t3] : this.__items[t3];
      }, t2.prototype.has_match = function(t3) {
        for (var e3 = this.__items.length - 1; e3 >= 0; e3--)
          if (this.__items[e3].match(t3))
            return true;
        return false;
      }, t2.prototype.set_indent = function(t3, e3) {
        this.is_empty() && (this.__indent_count = t3 || 0, this.__alignment_count = e3 || 0, this.__character_count = this.__parent.get_indent_size(this.__indent_count, this.__alignment_count));
      }, t2.prototype._set_wrap_point = function() {
        this.__parent.wrap_line_length && (this.__wrap_point_index = this.__items.length, this.__wrap_point_character_count = this.__character_count, this.__wrap_point_indent_count = this.__parent.next_line.__indent_count, this.__wrap_point_alignment_count = this.__parent.next_line.__alignment_count);
      }, t2.prototype._should_wrap = function() {
        return this.__wrap_point_index && this.__character_count > this.__parent.wrap_line_length && this.__wrap_point_character_count > this.__parent.next_line.__character_count;
      }, t2.prototype._allow_wrap = function() {
        if (this._should_wrap()) {
          this.__parent.add_new_line();
          var t3 = this.__parent.current_line;
          return t3.set_indent(this.__wrap_point_indent_count, this.__wrap_point_alignment_count), t3.__items = this.__items.slice(this.__wrap_point_index), this.__items = this.__items.slice(0, this.__wrap_point_index), t3.__character_count += this.__character_count - this.__wrap_point_character_count, this.__character_count = this.__wrap_point_character_count, t3.__items[0] === " " && (t3.__items.splice(0, 1), t3.__character_count -= 1), true;
        }
        return false;
      }, t2.prototype.is_empty = function() {
        return this.__items.length === 0;
      }, t2.prototype.last = function() {
        return this.is_empty() ? null : this.__items[this.__items.length - 1];
      }, t2.prototype.push = function(t3) {
        this.__items.push(t3);
        var e3 = t3.lastIndexOf("\n");
        e3 !== -1 ? this.__character_count = t3.length - e3 : this.__character_count += t3.length;
      }, t2.prototype.pop = function() {
        var t3 = null;
        return this.is_empty() || (t3 = this.__items.pop(), this.__character_count -= t3.length), t3;
      }, t2.prototype._remove_indent = function() {
        this.__indent_count > 0 && (this.__indent_count -= 1, this.__character_count -= this.__parent.indent_size);
      }, t2.prototype._remove_wrap_indent = function() {
        this.__wrap_point_indent_count > 0 && (this.__wrap_point_indent_count -= 1);
      }, t2.prototype.trim = function() {
        for (; this.last() === " "; )
          this.__items.pop(), this.__character_count -= 1;
      }, t2.prototype.toString = function() {
        var t3 = "";
        return this.is_empty() ? this.__parent.indent_empty_lines && (t3 = this.__parent.get_indent_string(this.__indent_count)) : (t3 = this.__parent.get_indent_string(this.__indent_count, this.__alignment_count), t3 += this.__items.join("")), t3;
      }, e2.prototype.get_indent_size = function(t3, e3) {
        var n3 = this.__base_string_length;
        return e3 = e3 || 0, t3 < 0 && (n3 = 0), n3 += t3 * this.__indent_size, n3 += e3;
      }, e2.prototype.get_indent_string = function(t3, e3) {
        var n3 = this.__base_string;
        return e3 = e3 || 0, t3 < 0 && (t3 = 0, n3 = ""), e3 += t3 * this.__indent_size, this.__ensure_cache(e3), n3 += this.__cache[e3];
      }, e2.prototype.__ensure_cache = function(t3) {
        for (; t3 >= this.__cache.length; )
          this.__add_column();
      }, e2.prototype.__add_column = function() {
        var t3 = this.__cache.length, e3 = 0, n3 = "";
        this.__indent_size && t3 >= this.__indent_size && (t3 -= (e3 = Math.floor(t3 / this.__indent_size)) * this.__indent_size, n3 = new Array(e3 + 1).join(this.__indent_string)), t3 && (n3 += new Array(t3 + 1).join(" ")), this.__cache.push(n3);
      }, n2.prototype.__add_outputline = function() {
        this.previous_line = this.current_line, this.current_line = this.next_line.clone_empty(), this.__lines.push(this.current_line);
      }, n2.prototype.get_line_number = function() {
        return this.__lines.length;
      }, n2.prototype.get_indent_string = function(t3, e3) {
        return this.__indent_cache.get_indent_string(t3, e3);
      }, n2.prototype.get_indent_size = function(t3, e3) {
        return this.__indent_cache.get_indent_size(t3, e3);
      }, n2.prototype.is_empty = function() {
        return !this.previous_line && this.current_line.is_empty();
      }, n2.prototype.add_new_line = function(t3) {
        return !(this.is_empty() || !t3 && this.just_added_newline()) && (this.raw || this.__add_outputline(), true);
      }, n2.prototype.get_code = function(t3) {
        this.trim(true);
        var e3 = this.current_line.pop();
        e3 && (e3[e3.length - 1] === "\n" && (e3 = e3.replace(/\n+$/g, "")), this.current_line.push(e3)), this._end_with_newline && this.__add_outputline();
        var n3 = this.__lines.join("\n");
        return t3 !== "\n" && (n3 = n3.replace(/[\n]/g, t3)), n3;
      }, n2.prototype.set_wrap_point = function() {
        this.current_line._set_wrap_point();
      }, n2.prototype.set_indent = function(t3, e3) {
        return t3 = t3 || 0, e3 = e3 || 0, this.next_line.set_indent(t3, e3), this.__lines.length > 1 ? (this.current_line.set_indent(t3, e3), true) : (this.current_line.set_indent(), false);
      }, n2.prototype.add_raw_token = function(t3) {
        for (var e3 = 0; e3 < t3.newlines; e3++)
          this.__add_outputline();
        this.current_line.set_indent(-1), this.current_line.push(t3.whitespace_before), this.current_line.push(t3.text), this.space_before_token = false, this.non_breaking_space = false, this.previous_token_wrapped = false;
      }, n2.prototype.add_token = function(t3) {
        this.__add_space_before_token(), this.current_line.push(t3), this.space_before_token = false, this.non_breaking_space = false, this.previous_token_wrapped = this.current_line._allow_wrap();
      }, n2.prototype.__add_space_before_token = function() {
        this.space_before_token && !this.just_added_newline() && (this.non_breaking_space || this.set_wrap_point(), this.current_line.push(" "));
      }, n2.prototype.remove_indent = function(t3) {
        for (var e3 = this.__lines.length; t3 < e3; )
          this.__lines[t3]._remove_indent(), t3++;
        this.current_line._remove_wrap_indent();
      }, n2.prototype.trim = function(t3) {
        for (t3 = t3 !== void 0 && t3, this.current_line.trim(); t3 && this.__lines.length > 1 && this.current_line.is_empty(); )
          this.__lines.pop(), this.current_line = this.__lines[this.__lines.length - 1], this.current_line.trim();
        this.previous_line = this.__lines.length > 1 ? this.__lines[this.__lines.length - 2] : null;
      }, n2.prototype.just_added_newline = function() {
        return this.current_line.is_empty();
      }, n2.prototype.just_added_blankline = function() {
        return this.is_empty() || this.current_line.is_empty() && this.previous_line.is_empty();
      }, n2.prototype.ensure_empty_line_above = function(e3, n3) {
        for (var r2 = this.__lines.length - 2; r2 >= 0; ) {
          var i2 = this.__lines[r2];
          if (i2.is_empty())
            break;
          if (i2.item(0).indexOf(e3) !== 0 && i2.item(-1) !== n3) {
            this.__lines.splice(r2 + 1, 0, new t2(this)), this.previous_line = this.__lines[this.__lines.length - 2];
            break;
          }
          r2--;
        }
      }, L.Output = n2, L;
    }
    var j;
    var q = {};
    function M() {
      if (j)
        return q;
      return j = 1, q.Token = function(t2, e2, n2, r2) {
        this.type = t2, this.text = e2, this.comments_before = null, this.newlines = n2 || 0, this.whitespace_before = r2 || "", this.parent = null, this.next = null, this.previous = null, this.opened = null, this.closed = null, this.directives = null;
      }, q;
    }
    var F;
    var z = {};
    function I() {
      return F || (F = 1, i2 = "(?:\\\\u[0-9a-fA-F]{4}|[\\x23\\x24\\x40\\x41-\\x5a\\x5f\\x61-\\x7a" + (n2 = "\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc") + "])", s2 = "(?:\\\\u[0-9a-fA-F]{4}|[" + (e2 = "\\x24\\x30-\\x39\\x41-\\x5a\\x5f\\x61-\\x7a") + n2 + (r2 = "\\u0300-\\u036f\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u0620-\\u0649\\u0672-\\u06d3\\u06e7-\\u06e8\\u06fb-\\u06fc\\u0730-\\u074a\\u0800-\\u0814\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0840-\\u0857\\u08e4-\\u08fe\\u0900-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962-\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09d7\\u09df-\\u09e0\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2-\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b5f-\\u0b60\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c01-\\u0c03\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62-\\u0c63\\u0c66-\\u0c6f\\u0c82\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2-\\u0ce3\\u0ce6-\\u0cef\\u0d02\\u0d03\\u0d46-\\u0d48\\u0d57\\u0d62-\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0df2\\u0df3\\u0e34-\\u0e3a\\u0e40-\\u0e45\\u0e50-\\u0e59\\u0eb4-\\u0eb9\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f41-\\u0f47\\u0f71-\\u0f84\\u0f86-\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u1000-\\u1029\\u1040-\\u1049\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u170e-\\u1710\\u1720-\\u1730\\u1740-\\u1750\\u1772\\u1773\\u1780-\\u17b2\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u1920-\\u192b\\u1930-\\u193b\\u1951-\\u196d\\u19b0-\\u19c0\\u19c8-\\u19c9\\u19d0-\\u19d9\\u1a00-\\u1a15\\u1a20-\\u1a53\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1b46-\\u1b4b\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c00-\\u1c22\\u1c40-\\u1c49\\u1c5b-\\u1c7d\\u1cd0-\\u1cd2\\u1d00-\\u1dbe\\u1e01-\\u1f15\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2d81-\\u2d96\\u2de0-\\u2dff\\u3021-\\u3028\\u3099\\u309a\\ua640-\\ua66d\\ua674-\\ua67d\\ua69f\\ua6f0-\\ua6f1\\ua7f8-\\ua800\\ua806\\ua80b\\ua823-\\ua827\\ua880-\\ua881\\ua8b4-\\ua8c4\\ua8d0-\\ua8d9\\ua8f3-\\ua8f7\\ua900-\\ua909\\ua926-\\ua92d\\ua930-\\ua945\\ua980-\\ua983\\ua9b3-\\ua9c0\\uaa00-\\uaa27\\uaa40-\\uaa41\\uaa4c-\\uaa4d\\uaa50-\\uaa59\\uaa7b\\uaae0-\\uaae9\\uaaf2-\\uaaf3\\uabc0-\\uabe1\\uabec\\uabed\\uabf0-\\uabf9\\ufb20-\\ufb28\\ufe00-\\ufe0f\\ufe20-\\ufe26\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f") + "])*", (t2 = z).identifier = new RegExp(i2 + s2, "g"), t2.identifierStart = new RegExp(i2), t2.identifierMatch = new RegExp("(?:\\\\u[0-9a-fA-F]{4}|[" + e2 + n2 + r2 + "])+"), t2.newline = /[\n\r\u2028\u2029]/, t2.lineBreak = new RegExp("\r\n|" + t2.newline.source), t2.allLineBreaks = new RegExp(t2.lineBreak.source, "g")), z;
      var t2, e2, n2, r2, i2, s2;
    }
    var P;
    var B;
    var U = {};
    var W = {};
    function G() {
      if (P)
        return W;
      function t2(t3, n3) {
        this.raw_options = e2(t3, n3), this.disabled = this._get_boolean("disabled"), this.eol = this._get_characters("eol", "auto"), this.end_with_newline = this._get_boolean("end_with_newline"), this.indent_size = this._get_number("indent_size", 4), this.indent_char = this._get_characters("indent_char", " "), this.indent_level = this._get_number("indent_level"), this.preserve_newlines = this._get_boolean("preserve_newlines", true), this.max_preserve_newlines = this._get_number("max_preserve_newlines", 32786), this.preserve_newlines || (this.max_preserve_newlines = 0), this.indent_with_tabs = this._get_boolean("indent_with_tabs", this.indent_char === "	"), this.indent_with_tabs && (this.indent_char = "	", this.indent_size === 1 && (this.indent_size = 4)), this.wrap_line_length = this._get_number("wrap_line_length", this._get_number("max_char")), this.indent_empty_lines = this._get_boolean("indent_empty_lines"), this.templating = this._get_selection_list("templating", ["auto", "none", "django", "erb", "handlebars", "php", "smarty"], ["auto"]);
      }
      function e2(t3, e3) {
        var r2, i2 = {};
        for (r2 in t3 = n2(t3))
          r2 !== e3 && (i2[r2] = t3[r2]);
        if (e3 && t3[e3])
          for (r2 in t3[e3])
            i2[r2] = t3[e3][r2];
        return i2;
      }
      function n2(t3) {
        var e3, n3 = {};
        for (e3 in t3) {
          n3[e3.replace(/-/g, "_")] = t3[e3];
        }
        return n3;
      }
      return P = 1, t2.prototype._get_array = function(t3, e3) {
        var n3 = this.raw_options[t3], r2 = e3 || [];
        return typeof n3 == "object" ? n3 !== null && typeof n3.concat == "function" && (r2 = n3.concat()) : typeof n3 == "string" && (r2 = n3.split(/[^a-zA-Z0-9_\/\-]+/)), r2;
      }, t2.prototype._get_boolean = function(t3, e3) {
        var n3 = this.raw_options[t3];
        return n3 === void 0 ? !!e3 : !!n3;
      }, t2.prototype._get_characters = function(t3, e3) {
        var n3 = this.raw_options[t3], r2 = e3 || "";
        return typeof n3 == "string" && (r2 = n3.replace(/\\r/, "\r").replace(/\\n/, "\n").replace(/\\t/, "	")), r2;
      }, t2.prototype._get_number = function(t3, e3) {
        var n3 = this.raw_options[t3];
        e3 = parseInt(e3, 10), isNaN(e3) && (e3 = 0);
        var r2 = parseInt(n3, 10);
        return isNaN(r2) && (r2 = e3), r2;
      }, t2.prototype._get_selection = function(t3, e3, n3) {
        var r2 = this._get_selection_list(t3, e3, n3);
        if (r2.length !== 1)
          throw new Error("Invalid Option Value: The option '" + t3 + "' can only be one of the following values:\n" + e3 + "\nYou passed in: '" + this.raw_options[t3] + "'");
        return r2[0];
      }, t2.prototype._get_selection_list = function(t3, e3, n3) {
        if (!e3 || e3.length === 0)
          throw new Error("Selection list cannot be empty.");
        if (n3 = n3 || [e3[0]], !this._is_valid_selection(n3, e3))
          throw new Error("Invalid Default Value!");
        var r2 = this._get_array(t3, n3);
        if (!this._is_valid_selection(r2, e3))
          throw new Error("Invalid Option Value: The option '" + t3 + "' can contain only the following values:\n" + e3 + "\nYou passed in: '" + this.raw_options[t3] + "'");
        return r2;
      }, t2.prototype._is_valid_selection = function(t3, e3) {
        return t3.length && e3.length && !t3.some(function(t4) {
          return e3.indexOf(t4) === -1;
        });
      }, W.Options = t2, W.normalizeOpts = n2, W.mergeOpts = e2, W;
    }
    function V() {
      if (B)
        return U;
      B = 1;
      var t2 = G().Options, e2 = ["before-newline", "after-newline", "preserve-newline"];
      function n2(n3) {
        t2.call(this, n3, "js");
        var r2 = this.raw_options.brace_style || null;
        r2 === "expand-strict" ? this.raw_options.brace_style = "expand" : r2 === "collapse-preserve-inline" ? this.raw_options.brace_style = "collapse,preserve-inline" : this.raw_options.braces_on_own_line !== void 0 && (this.raw_options.brace_style = this.raw_options.braces_on_own_line ? "expand" : "collapse");
        var i2 = this._get_selection_list("brace_style", ["collapse", "expand", "end-expand", "none", "preserve-inline"]);
        this.brace_preserve_inline = false, this.brace_style = "collapse";
        for (var s2 = 0; s2 < i2.length; s2++)
          i2[s2] === "preserve-inline" ? this.brace_preserve_inline = true : this.brace_style = i2[s2];
        this.unindent_chained_methods = this._get_boolean("unindent_chained_methods"), this.break_chained_methods = this._get_boolean("break_chained_methods"), this.space_in_paren = this._get_boolean("space_in_paren"), this.space_in_empty_paren = this._get_boolean("space_in_empty_paren"), this.jslint_happy = this._get_boolean("jslint_happy"), this.space_after_anon_function = this._get_boolean("space_after_anon_function"), this.space_after_named_function = this._get_boolean("space_after_named_function"), this.keep_array_indentation = this._get_boolean("keep_array_indentation"), this.space_before_conditional = this._get_boolean("space_before_conditional", true), this.unescape_strings = this._get_boolean("unescape_strings"), this.e4x = this._get_boolean("e4x"), this.comma_first = this._get_boolean("comma_first"), this.operator_position = this._get_selection("operator_position", e2), this.test_output_raw = this._get_boolean("test_output_raw"), this.jslint_happy && (this.space_after_anon_function = true);
      }
      return n2.prototype = new t2(), U.Options = n2, U;
    }
    var K;
    var H = {};
    var Z = {};
    function X() {
      if (K)
        return Z;
      K = 1;
      var t2 = RegExp.prototype.hasOwnProperty("sticky");
      function e2(t3) {
        this.__input = t3 || "", this.__input_length = this.__input.length, this.__position = 0;
      }
      return e2.prototype.restart = function() {
        this.__position = 0;
      }, e2.prototype.back = function() {
        this.__position > 0 && (this.__position -= 1);
      }, e2.prototype.hasNext = function() {
        return this.__position < this.__input_length;
      }, e2.prototype.next = function() {
        var t3 = null;
        return this.hasNext() && (t3 = this.__input.charAt(this.__position), this.__position += 1), t3;
      }, e2.prototype.peek = function(t3) {
        var e3 = null;
        return t3 = t3 || 0, (t3 += this.__position) >= 0 && t3 < this.__input_length && (e3 = this.__input.charAt(t3)), e3;
      }, e2.prototype.__match = function(e3, n2) {
        e3.lastIndex = n2;
        var r2 = e3.exec(this.__input);
        return !r2 || t2 && e3.sticky || r2.index !== n2 && (r2 = null), r2;
      }, e2.prototype.test = function(t3, e3) {
        return e3 = e3 || 0, (e3 += this.__position) >= 0 && e3 < this.__input_length && !!this.__match(t3, e3);
      }, e2.prototype.testChar = function(t3, e3) {
        var n2 = this.peek(e3);
        return t3.lastIndex = 0, n2 !== null && t3.test(n2);
      }, e2.prototype.match = function(t3) {
        var e3 = this.__match(t3, this.__position);
        return e3 ? this.__position += e3[0].length : e3 = null, e3;
      }, e2.prototype.read = function(t3, e3, n2) {
        var r2, i2 = "";
        return t3 && (r2 = this.match(t3)) && (i2 += r2[0]), !e3 || !r2 && t3 || (i2 += this.readUntil(e3, n2)), i2;
      }, e2.prototype.readUntil = function(t3, e3) {
        var n2, r2 = this.__position;
        t3.lastIndex = this.__position;
        var i2 = t3.exec(this.__input);
        return i2 ? (r2 = i2.index, e3 && (r2 += i2[0].length)) : r2 = this.__input_length, n2 = this.__input.substring(this.__position, r2), this.__position = r2, n2;
      }, e2.prototype.readUntilAfter = function(t3) {
        return this.readUntil(t3, true);
      }, e2.prototype.get_regexp = function(e3, n2) {
        var r2 = null, i2 = "g";
        return n2 && t2 && (i2 = "y"), typeof e3 == "string" && e3 !== "" ? r2 = new RegExp(e3, i2) : e3 && (r2 = new RegExp(e3.source, i2)), r2;
      }, e2.prototype.get_literal_regexp = function(t3) {
        return RegExp(t3.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&"));
      }, e2.prototype.peekUntilAfter = function(t3) {
        var e3 = this.__position, n2 = this.readUntilAfter(t3);
        return this.__position = e3, n2;
      }, e2.prototype.lookBack = function(t3) {
        var e3 = this.__position - 1;
        return e3 >= t3.length && this.__input.substring(e3 - t3.length, e3).toLowerCase() === t3;
      }, Z.InputScanner = e2, Z;
    }
    var Q;
    var J = {};
    var Y = {};
    var tt;
    var et;
    var nt;
    var rt = {};
    var it = {};
    function st() {
      if (tt)
        return it;
      function t2(t3, e2) {
        this._input = t3, this._starting_pattern = null, this._match_pattern = null, this._until_pattern = null, this._until_after = false, e2 && (this._starting_pattern = this._input.get_regexp(e2._starting_pattern, true), this._match_pattern = this._input.get_regexp(e2._match_pattern, true), this._until_pattern = this._input.get_regexp(e2._until_pattern), this._until_after = e2._until_after);
      }
      return tt = 1, t2.prototype.read = function() {
        var t3 = this._input.read(this._starting_pattern);
        return this._starting_pattern && !t3 || (t3 += this._input.read(this._match_pattern, this._until_pattern, this._until_after)), t3;
      }, t2.prototype.read_match = function() {
        return this._input.match(this._match_pattern);
      }, t2.prototype.until_after = function(t3) {
        var e2 = this._create();
        return e2._until_after = true, e2._until_pattern = this._input.get_regexp(t3), e2._update(), e2;
      }, t2.prototype.until = function(t3) {
        var e2 = this._create();
        return e2._until_after = false, e2._until_pattern = this._input.get_regexp(t3), e2._update(), e2;
      }, t2.prototype.starting_with = function(t3) {
        var e2 = this._create();
        return e2._starting_pattern = this._input.get_regexp(t3, true), e2._update(), e2;
      }, t2.prototype.matching = function(t3) {
        var e2 = this._create();
        return e2._match_pattern = this._input.get_regexp(t3, true), e2._update(), e2;
      }, t2.prototype._create = function() {
        return new t2(this._input, this);
      }, t2.prototype._update = function() {
      }, it.Pattern = t2, it;
    }
    function at() {
      if (nt)
        return J;
      nt = 1;
      var t2 = X().InputScanner, e2 = M().Token, n2 = function() {
        if (Q)
          return Y;
        function t3(t4) {
          this.__tokens = [], this.__tokens_length = this.__tokens.length, this.__position = 0, this.__parent_token = t4;
        }
        return Q = 1, t3.prototype.restart = function() {
          this.__position = 0;
        }, t3.prototype.isEmpty = function() {
          return this.__tokens_length === 0;
        }, t3.prototype.hasNext = function() {
          return this.__position < this.__tokens_length;
        }, t3.prototype.next = function() {
          var t4 = null;
          return this.hasNext() && (t4 = this.__tokens[this.__position], this.__position += 1), t4;
        }, t3.prototype.peek = function(t4) {
          var e3 = null;
          return t4 = t4 || 0, (t4 += this.__position) >= 0 && t4 < this.__tokens_length && (e3 = this.__tokens[t4]), e3;
        }, t3.prototype.add = function(t4) {
          this.__parent_token && (t4.parent = this.__parent_token), this.__tokens.push(t4), this.__tokens_length += 1;
        }, Y.TokenStream = t3, Y;
      }().TokenStream, r2 = function() {
        if (et)
          return rt;
        et = 1;
        var t3 = st().Pattern;
        function e3(e4, n3) {
          t3.call(this, e4, n3), n3 ? this._line_regexp = this._input.get_regexp(n3._line_regexp) : this.__set_whitespace_patterns("", ""), this.newline_count = 0, this.whitespace_before_token = "";
        }
        return e3.prototype = new t3(), e3.prototype.__set_whitespace_patterns = function(t4, e4) {
          t4 += "\\t ", e4 += "\\n\\r", this._match_pattern = this._input.get_regexp("[" + t4 + e4 + "]+", true), this._newline_regexp = this._input.get_regexp("\\r\\n|[" + e4 + "]");
        }, e3.prototype.read = function() {
          this.newline_count = 0, this.whitespace_before_token = "";
          var t4 = this._input.read(this._match_pattern);
          if (t4 === " ")
            this.whitespace_before_token = " ";
          else if (t4) {
            var e4 = this.__split(this._newline_regexp, t4);
            this.newline_count = e4.length - 1, this.whitespace_before_token = e4[this.newline_count];
          }
          return t4;
        }, e3.prototype.matching = function(t4, e4) {
          var n3 = this._create();
          return n3.__set_whitespace_patterns(t4, e4), n3._update(), n3;
        }, e3.prototype._create = function() {
          return new e3(this._input, this);
        }, e3.prototype.__split = function(t4, e4) {
          t4.lastIndex = 0;
          for (var n3 = 0, r3 = [], i3 = t4.exec(e4); i3; )
            r3.push(e4.substring(n3, i3.index)), n3 = i3.index + i3[0].length, i3 = t4.exec(e4);
          return n3 < e4.length ? r3.push(e4.substring(n3, e4.length)) : r3.push(""), r3;
        }, rt.WhitespacePattern = e3, rt;
      }().WhitespacePattern, i2 = { START: "TK_START", RAW: "TK_RAW", EOF: "TK_EOF" }, s2 = function(e3, n3) {
        this._input = new t2(e3), this._options = n3 || {}, this.__tokens = null, this._patterns = {}, this._patterns.whitespace = new r2(this._input);
      };
      return s2.prototype.tokenize = function() {
        var t3;
        this._input.restart(), this.__tokens = new n2(), this._reset();
        for (var r3 = new e2(i2.START, ""), s3 = null, a2 = [], o2 = new n2(); r3.type !== i2.EOF; ) {
          for (t3 = this._get_next_token(r3, s3); this._is_comment(t3); )
            o2.add(t3), t3 = this._get_next_token(r3, s3);
          o2.isEmpty() || (t3.comments_before = o2, o2 = new n2()), t3.parent = s3, this._is_opening(t3) ? (a2.push(s3), s3 = t3) : s3 && this._is_closing(t3, s3) && (t3.opened = s3, s3.closed = t3, s3 = a2.pop(), t3.parent = s3), t3.previous = r3, r3.next = t3, this.__tokens.add(t3), r3 = t3;
        }
        return this.__tokens;
      }, s2.prototype._is_first_token = function() {
        return this.__tokens.isEmpty();
      }, s2.prototype._reset = function() {
      }, s2.prototype._get_next_token = function(t3, e3) {
        this._readWhitespace();
        var n3 = this._input.read(/.+/g);
        return n3 ? this._create_token(i2.RAW, n3) : this._create_token(i2.EOF, "");
      }, s2.prototype._is_comment = function(t3) {
        return false;
      }, s2.prototype._is_opening = function(t3) {
        return false;
      }, s2.prototype._is_closing = function(t3, e3) {
        return false;
      }, s2.prototype._create_token = function(t3, n3) {
        return new e2(t3, n3, this._patterns.whitespace.newline_count, this._patterns.whitespace.whitespace_before_token);
      }, s2.prototype._readWhitespace = function() {
        return this._patterns.whitespace.read();
      }, J.Tokenizer = s2, J.TOKEN = i2, J;
    }
    var ot;
    var ut = {};
    function lt() {
      if (ot)
        return ut;
      function t2(t3, e2) {
        t3 = typeof t3 == "string" ? t3 : t3.source, e2 = typeof e2 == "string" ? e2 : e2.source, this.__directives_block_pattern = new RegExp(t3 + / beautify( \w+[:]\w+)+ /.source + e2, "g"), this.__directive_pattern = / (\w+)[:](\w+)/g, this.__directives_end_ignore_pattern = new RegExp(t3 + /\sbeautify\signore:end\s/.source + e2, "g");
      }
      return ot = 1, t2.prototype.get_directives = function(t3) {
        if (!t3.match(this.__directives_block_pattern))
          return null;
        var e2 = {};
        this.__directive_pattern.lastIndex = 0;
        for (var n2 = this.__directive_pattern.exec(t3); n2; )
          e2[n2[1]] = n2[2], n2 = this.__directive_pattern.exec(t3);
        return e2;
      }, t2.prototype.readIgnored = function(t3) {
        return t3.readUntilAfter(this.__directives_end_ignore_pattern);
      }, ut.Directives = t2, ut;
    }
    var ct;
    var _t;
    var ht;
    var pt;
    var ft = {};
    function dt() {
      if (ct)
        return ft;
      ct = 1;
      var t2 = st().Pattern, e2 = { django: false, erb: false, handlebars: false, php: false, smarty: false };
      function n2(n3, r2) {
        t2.call(this, n3, r2), this.__template_pattern = null, this._disabled = Object.assign({}, e2), this._excluded = Object.assign({}, e2), r2 && (this.__template_pattern = this._input.get_regexp(r2.__template_pattern), this._excluded = Object.assign(this._excluded, r2._excluded), this._disabled = Object.assign(this._disabled, r2._disabled));
        var i2 = new t2(n3);
        this.__patterns = { handlebars_comment: i2.starting_with(/{{!--/).until_after(/--}}/), handlebars_unescaped: i2.starting_with(/{{{/).until_after(/}}}/), handlebars: i2.starting_with(/{{/).until_after(/}}/), php: i2.starting_with(/<\?(?:[= ]|php)/).until_after(/\?>/), erb: i2.starting_with(/<%[^%]/).until_after(/[^%]%>/), django: i2.starting_with(/{%/).until_after(/%}/), django_value: i2.starting_with(/{{/).until_after(/}}/), django_comment: i2.starting_with(/{#/).until_after(/#}/), smarty: i2.starting_with(/{(?=[^}{\s\n])/).until_after(/[^\s\n]}/), smarty_comment: i2.starting_with(/{\*/).until_after(/\*}/), smarty_literal: i2.starting_with(/{literal}/).until_after(/{\/literal}/) };
      }
      return n2.prototype = new t2(), n2.prototype._create = function() {
        return new n2(this._input, this);
      }, n2.prototype._update = function() {
        this.__set_templated_pattern();
      }, n2.prototype.disable = function(t3) {
        var e3 = this._create();
        return e3._disabled[t3] = true, e3._update(), e3;
      }, n2.prototype.read_options = function(t3) {
        var n3 = this._create();
        for (var r2 in e2)
          n3._disabled[r2] = t3.templating.indexOf(r2) === -1;
        return n3._update(), n3;
      }, n2.prototype.exclude = function(t3) {
        var e3 = this._create();
        return e3._excluded[t3] = true, e3._update(), e3;
      }, n2.prototype.read = function() {
        var t3 = "";
        t3 = this._match_pattern ? this._input.read(this._starting_pattern) : this._input.read(this._starting_pattern, this.__template_pattern);
        for (var e3 = this._read_template(); e3; )
          this._match_pattern ? e3 += this._input.read(this._match_pattern) : e3 += this._input.readUntil(this.__template_pattern), t3 += e3, e3 = this._read_template();
        return this._until_after && (t3 += this._input.readUntilAfter(this._until_pattern)), t3;
      }, n2.prototype.__set_templated_pattern = function() {
        var t3 = [];
        this._disabled.php || t3.push(this.__patterns.php._starting_pattern.source), this._disabled.handlebars || t3.push(this.__patterns.handlebars._starting_pattern.source), this._disabled.erb || t3.push(this.__patterns.erb._starting_pattern.source), this._disabled.django || (t3.push(this.__patterns.django._starting_pattern.source), t3.push(this.__patterns.django_value._starting_pattern.source), t3.push(this.__patterns.django_comment._starting_pattern.source)), this._disabled.smarty || t3.push(this.__patterns.smarty._starting_pattern.source), this._until_pattern && t3.push(this._until_pattern.source), this.__template_pattern = this._input.get_regexp("(?:" + t3.join("|") + ")");
      }, n2.prototype._read_template = function() {
        var t3 = "", e3 = this._input.peek();
        if (e3 === "<") {
          var n3 = this._input.peek(1);
          this._disabled.php || this._excluded.php || n3 !== "?" || (t3 = t3 || this.__patterns.php.read()), this._disabled.erb || this._excluded.erb || n3 !== "%" || (t3 = t3 || this.__patterns.erb.read());
        } else
          e3 === "{" && (this._disabled.handlebars || this._excluded.handlebars || (t3 = (t3 = (t3 = t3 || this.__patterns.handlebars_comment.read()) || this.__patterns.handlebars_unescaped.read()) || this.__patterns.handlebars.read()), this._disabled.django || (this._excluded.django || this._excluded.handlebars || (t3 = t3 || this.__patterns.django_value.read()), this._excluded.django || (t3 = (t3 = t3 || this.__patterns.django_comment.read()) || this.__patterns.django.read())), this._disabled.smarty || this._disabled.django && this._disabled.handlebars && (t3 = (t3 = (t3 = t3 || this.__patterns.smarty_comment.read()) || this.__patterns.smarty_literal.read()) || this.__patterns.smarty.read()));
        return t3;
      }, ft.TemplatablePattern = n2, ft;
    }
    function gt() {
      if (_t)
        return H;
      _t = 1;
      var t2 = X().InputScanner, e2 = at().Tokenizer, n2 = at().TOKEN, r2 = lt().Directives, i2 = I(), s2 = st().Pattern, a2 = dt().TemplatablePattern;
      function o2(t3, e3) {
        return e3.indexOf(t3) !== -1;
      }
      var u2 = { START_EXPR: "TK_START_EXPR", END_EXPR: "TK_END_EXPR", START_BLOCK: "TK_START_BLOCK", END_BLOCK: "TK_END_BLOCK", WORD: "TK_WORD", RESERVED: "TK_RESERVED", SEMICOLON: "TK_SEMICOLON", STRING: "TK_STRING", EQUALS: "TK_EQUALS", OPERATOR: "TK_OPERATOR", COMMA: "TK_COMMA", BLOCK_COMMENT: "TK_BLOCK_COMMENT", COMMENT: "TK_COMMENT", DOT: "TK_DOT", UNKNOWN: "TK_UNKNOWN", START: n2.START, RAW: n2.RAW, EOF: n2.EOF }, l2 = new r2(/\/\*/, /\*\//), c2 = /0[xX][0123456789abcdefABCDEF_]*n?|0[oO][01234567_]*n?|0[bB][01_]*n?|\d[\d_]*n|(?:\.\d[\d_]*|\d[\d_]*\.?[\d_]*)(?:[eE][+-]?[\d_]+)?/, _2 = /[0-9]/, h2 = /[^\d\.]/, p2 = ">>> === !== &&= ??= ||= << && >= ** != == <= >> || ?? |> < / - + > : & % ? ^ | *".split(" "), f2 = ">>>= ... >>= <<= === >>> !== **= &&= ??= ||= => ^= :: /= << <= == && -= >= >> != -- += ** || ?? ++ %= &= *= |= |> = ! ? > < : / ^ - + * & % ~ |";
      f2 = (f2 = "\\?\\.(?!\\d) " + (f2 = f2.replace(/[-[\]{}()*+?.,\\^$|#]/g, "\\$&"))).replace(/ /g, "|");
      var d2, g2 = new RegExp(f2), m2 = "continue,try,throw,return,var,let,const,if,switch,case,default,for,while,break,function,import,export".split(","), b2 = m2.concat(["do", "in", "of", "else", "get", "set", "new", "catch", "finally", "typeof", "yield", "async", "await", "from", "as", "class", "extends"]), y2 = new RegExp("^(?:" + b2.join("|") + ")$"), k2 = function(t3, n3) {
        e2.call(this, t3, n3), this._patterns.whitespace = this._patterns.whitespace.matching(/\u00A0\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff/.source, /\u2028\u2029/.source);
        var r3 = new s2(this._input), o3 = new a2(this._input).read_options(this._options);
        this.__patterns = { template: o3, identifier: o3.starting_with(i2.identifier).matching(i2.identifierMatch), number: r3.matching(c2), punct: r3.matching(g2), comment: r3.starting_with(/\/\//).until(/[\n\r\u2028\u2029]/), block_comment: r3.starting_with(/\/\*/).until_after(/\*\//), html_comment_start: r3.matching(/<!--/), html_comment_end: r3.matching(/-->/), include: r3.starting_with(/#include/).until_after(i2.lineBreak), shebang: r3.starting_with(/#!/).until_after(i2.lineBreak), xml: r3.matching(/[\s\S]*?<(\/?)([-a-zA-Z:0-9_.]+|{[^}]+?}|!\[CDATA\[[^\]]*?\]\]|)(\s*{[^}]+?}|\s+[-a-zA-Z:0-9_.]+|\s+[-a-zA-Z:0-9_.]+\s*=\s*('[^']*'|"[^"]*"|{([^{}]|{[^}]+?})+?}))*\s*(\/?)\s*>/), single_quote: o3.until(/['\\\n\r\u2028\u2029]/), double_quote: o3.until(/["\\\n\r\u2028\u2029]/), template_text: o3.until(/[`\\$]/), template_expression: o3.until(/[`}\\]/) };
      };
      return (k2.prototype = new e2())._is_comment = function(t3) {
        return t3.type === u2.COMMENT || t3.type === u2.BLOCK_COMMENT || t3.type === u2.UNKNOWN;
      }, k2.prototype._is_opening = function(t3) {
        return t3.type === u2.START_BLOCK || t3.type === u2.START_EXPR;
      }, k2.prototype._is_closing = function(t3, e3) {
        return (t3.type === u2.END_BLOCK || t3.type === u2.END_EXPR) && e3 && (t3.text === "]" && e3.text === "[" || t3.text === ")" && e3.text === "(" || t3.text === "}" && e3.text === "{");
      }, k2.prototype._reset = function() {
        d2 = false;
      }, k2.prototype._get_next_token = function(t3, e3) {
        var n3 = null;
        this._readWhitespace();
        var r3 = this._input.peek();
        return r3 === null ? this._create_token(u2.EOF, "") : n3 = (n3 = (n3 = (n3 = (n3 = (n3 = (n3 = (n3 = (n3 = n3 || this._read_non_javascript(r3)) || this._read_string(r3)) || this._read_word(t3)) || this._read_singles(r3)) || this._read_comment(r3)) || this._read_regexp(r3, t3)) || this._read_xml(r3, t3)) || this._read_punctuation()) || this._create_token(u2.UNKNOWN, this._input.next());
      }, k2.prototype._read_word = function(t3) {
        var e3;
        return (e3 = this.__patterns.identifier.read()) !== "" ? (e3 = e3.replace(i2.allLineBreaks, "\n"), t3.type !== u2.DOT && (t3.type !== u2.RESERVED || t3.text !== "set" && t3.text !== "get") && y2.test(e3) ? e3 !== "in" && e3 !== "of" || t3.type !== u2.WORD && t3.type !== u2.STRING ? this._create_token(u2.RESERVED, e3) : this._create_token(u2.OPERATOR, e3) : this._create_token(u2.WORD, e3)) : (e3 = this.__patterns.number.read()) !== "" ? this._create_token(u2.WORD, e3) : void 0;
      }, k2.prototype._read_singles = function(t3) {
        var e3 = null;
        return t3 === "(" || t3 === "[" ? e3 = this._create_token(u2.START_EXPR, t3) : t3 === ")" || t3 === "]" ? e3 = this._create_token(u2.END_EXPR, t3) : t3 === "{" ? e3 = this._create_token(u2.START_BLOCK, t3) : t3 === "}" ? e3 = this._create_token(u2.END_BLOCK, t3) : t3 === ";" ? e3 = this._create_token(u2.SEMICOLON, t3) : t3 === "." && h2.test(this._input.peek(1)) ? e3 = this._create_token(u2.DOT, t3) : t3 === "," && (e3 = this._create_token(u2.COMMA, t3)), e3 && this._input.next(), e3;
      }, k2.prototype._read_punctuation = function() {
        var t3 = this.__patterns.punct.read();
        if (t3 !== "")
          return t3 === "=" ? this._create_token(u2.EQUALS, t3) : t3 === "?." ? this._create_token(u2.DOT, t3) : this._create_token(u2.OPERATOR, t3);
      }, k2.prototype._read_non_javascript = function(t3) {
        var e3 = "";
        if (t3 === "#") {
          if (this._is_first_token() && (e3 = this.__patterns.shebang.read()))
            return this._create_token(u2.UNKNOWN, e3.trim() + "\n");
          if (e3 = this.__patterns.include.read())
            return this._create_token(u2.UNKNOWN, e3.trim() + "\n");
          t3 = this._input.next();
          var n3 = "#";
          if (this._input.hasNext() && this._input.testChar(_2)) {
            do {
              n3 += t3 = this._input.next();
            } while (this._input.hasNext() && t3 !== "#" && t3 !== "=");
            return t3 === "#" || (this._input.peek() === "[" && this._input.peek(1) === "]" ? (n3 += "[]", this._input.next(), this._input.next()) : this._input.peek() === "{" && this._input.peek(1) === "}" && (n3 += "{}", this._input.next(), this._input.next())), this._create_token(u2.WORD, n3);
          }
          this._input.back();
        } else if (t3 === "<" && this._is_first_token()) {
          if (e3 = this.__patterns.html_comment_start.read()) {
            for (; this._input.hasNext() && !this._input.testChar(i2.newline); )
              e3 += this._input.next();
            return d2 = true, this._create_token(u2.COMMENT, e3);
          }
        } else if (d2 && t3 === "-" && (e3 = this.__patterns.html_comment_end.read()))
          return d2 = false, this._create_token(u2.COMMENT, e3);
        return null;
      }, k2.prototype._read_comment = function(t3) {
        var e3 = null;
        if (t3 === "/") {
          var n3 = "";
          if (this._input.peek(1) === "*") {
            n3 = this.__patterns.block_comment.read();
            var r3 = l2.get_directives(n3);
            r3 && r3.ignore === "start" && (n3 += l2.readIgnored(this._input)), n3 = n3.replace(i2.allLineBreaks, "\n"), (e3 = this._create_token(u2.BLOCK_COMMENT, n3)).directives = r3;
          } else
            this._input.peek(1) === "/" && (n3 = this.__patterns.comment.read(), e3 = this._create_token(u2.COMMENT, n3));
        }
        return e3;
      }, k2.prototype._read_string = function(e3) {
        if (e3 === "`" || e3 === "'" || e3 === '"') {
          var n3 = this._input.next();
          return this.has_char_escapes = false, n3 += e3 === "`" ? this._read_string_recursive("`", true, "${") : this._read_string_recursive(e3), this.has_char_escapes && this._options.unescape_strings && (n3 = function(e4) {
            var n4 = "", r3 = 0, i3 = new t2(e4), s3 = null;
            for (; i3.hasNext(); )
              if ((s3 = i3.match(/([\s]|[^\\]|\\\\)+/g)) && (n4 += s3[0]), i3.peek() === "\\") {
                if (i3.next(), i3.peek() === "x")
                  s3 = i3.match(/x([0-9A-Fa-f]{2})/g);
                else {
                  if (i3.peek() !== "u") {
                    n4 += "\\", i3.hasNext() && (n4 += i3.next());
                    continue;
                  }
                  s3 = i3.match(/u([0-9A-Fa-f]{4})/g);
                }
                if (!s3)
                  return e4;
                if ((r3 = parseInt(s3[1], 16)) > 126 && r3 <= 255 && s3[0].indexOf("x") === 0)
                  return e4;
                if (r3 >= 0 && r3 < 32) {
                  n4 += "\\" + s3[0];
                  continue;
                }
                n4 += r3 === 34 || r3 === 39 || r3 === 92 ? "\\" + String.fromCharCode(r3) : String.fromCharCode(r3);
              }
            return n4;
          }(n3)), this._input.peek() === e3 && (n3 += this._input.next()), n3 = n3.replace(i2.allLineBreaks, "\n"), this._create_token(u2.STRING, n3);
        }
        return null;
      }, k2.prototype._allow_regexp_or_xml = function(t3) {
        return t3.type === u2.RESERVED && o2(t3.text, ["return", "case", "throw", "else", "do", "typeof", "yield"]) || t3.type === u2.END_EXPR && t3.text === ")" && t3.opened.previous.type === u2.RESERVED && o2(t3.opened.previous.text, ["if", "while", "for"]) || o2(t3.type, [u2.COMMENT, u2.START_EXPR, u2.START_BLOCK, u2.START, u2.END_BLOCK, u2.OPERATOR, u2.EQUALS, u2.EOF, u2.SEMICOLON, u2.COMMA]);
      }, k2.prototype._read_regexp = function(t3, e3) {
        if (t3 === "/" && this._allow_regexp_or_xml(e3)) {
          for (var n3 = this._input.next(), r3 = false, s3 = false; this._input.hasNext() && (r3 || s3 || this._input.peek() !== t3) && !this._input.testChar(i2.newline); )
            n3 += this._input.peek(), r3 ? r3 = false : (r3 = this._input.peek() === "\\", this._input.peek() === "[" ? s3 = true : this._input.peek() === "]" && (s3 = false)), this._input.next();
          return this._input.peek() === t3 && (n3 += this._input.next(), n3 += this._input.read(i2.identifier)), this._create_token(u2.STRING, n3);
        }
        return null;
      }, k2.prototype._read_xml = function(t3, e3) {
        if (this._options.e4x && t3 === "<" && this._allow_regexp_or_xml(e3)) {
          var n3 = "", r3 = this.__patterns.xml.read_match();
          if (r3) {
            for (var s3 = r3[2].replace(/^{\s+/, "{").replace(/\s+}$/, "}"), a3 = s3.indexOf("{") === 0, o3 = 0; r3; ) {
              var l3 = !!r3[1], c3 = r3[2];
              if (!(!!r3[r3.length - 1] || c3.slice(0, 8) === "![CDATA[") && (c3 === s3 || a3 && c3.replace(/^{\s+/, "{").replace(/\s+}$/, "}")) && (l3 ? --o3 : ++o3), n3 += r3[0], o3 <= 0)
                break;
              r3 = this.__patterns.xml.read_match();
            }
            return r3 || (n3 += this._input.match(/[\s\S]*/g)[0]), n3 = n3.replace(i2.allLineBreaks, "\n"), this._create_token(u2.STRING, n3);
          }
        }
        return null;
      }, k2.prototype._read_string_recursive = function(t3, e3, n3) {
        var r3, s3;
        t3 === "'" ? s3 = this.__patterns.single_quote : t3 === '"' ? s3 = this.__patterns.double_quote : t3 === "`" ? s3 = this.__patterns.template_text : t3 === "}" && (s3 = this.__patterns.template_expression);
        for (var a3 = s3.read(), o3 = ""; this._input.hasNext(); ) {
          if ((o3 = this._input.next()) === t3 || !e3 && i2.newline.test(o3)) {
            this._input.back();
            break;
          }
          o3 === "\\" && this._input.hasNext() ? ((r3 = this._input.peek()) === "x" || r3 === "u" ? this.has_char_escapes = true : r3 === "\r" && this._input.peek(1) === "\n" && this._input.next(), o3 += this._input.next()) : n3 && (n3 === "${" && o3 === "$" && this._input.peek() === "{" && (o3 += this._input.next()), n3 === o3 && (o3 += t3 === "`" ? this._read_string_recursive("}", e3, "`") : this._read_string_recursive("`", e3, "${"), this._input.hasNext() && (o3 += this._input.next()))), a3 += o3 += s3.read();
        }
        return a3;
      }, H.Tokenizer = k2, H.TOKEN = u2, H.positionable_operators = p2.slice(), H.line_starters = m2.slice(), H;
    }
    function mt() {
      if (ht)
        return R;
      ht = 1;
      var t2 = N().Output, e2 = M().Token, n2 = I(), r2 = V().Options, i2 = gt().Tokenizer, s2 = gt().line_starters, a2 = gt().positionable_operators, o2 = gt().TOKEN;
      function u2(t3, e3) {
        return e3.indexOf(t3) !== -1;
      }
      function l2(t3, e3) {
        return t3 && t3.type === o2.RESERVED && t3.text === e3;
      }
      function c2(t3, e3) {
        return t3 && t3.type === o2.RESERVED && u2(t3.text, e3);
      }
      var _2 = ["case", "return", "do", "if", "throw", "else", "await", "break", "continue", "async"], h2 = function(t3) {
        for (var e3 = {}, n3 = 0; n3 < t3.length; n3++)
          e3[t3[n3].replace(/-/g, "_")] = t3[n3];
        return e3;
      }(["before-newline", "after-newline", "preserve-newline"]), p2 = [h2.before_newline, h2.preserve_newline], f2 = "BlockStatement", d2 = "Statement", g2 = "ObjectLiteral", m2 = "ArrayLiteral", b2 = "ForInitializer", y2 = "Conditional", k2 = "Expression";
      function v2(t3, e3) {
        e3.multiline_frame || e3.mode === b2 || e3.mode === y2 || t3.remove_indent(e3.start_line_index);
      }
      function w2(t3) {
        return t3 === m2;
      }
      function x2(t3) {
        return u2(t3, [k2, b2, y2]);
      }
      function E2(t3, e3) {
        e3 = e3 || {}, this._source_text = t3 || "", this._output = null, this._tokens = null, this._last_last_text = null, this._flags = null, this._previous_flags = null, this._flag_store = null, this._options = new r2(e3);
      }
      E2.prototype.create_flags = function(t3, n3) {
        var r3 = 0;
        return t3 && (r3 = t3.indentation_level, !this._output.just_added_newline() && t3.line_indent_level > r3 && (r3 = t3.line_indent_level)), { mode: n3, parent: t3, last_token: t3 ? t3.last_token : new e2(o2.START_BLOCK, ""), last_word: t3 ? t3.last_word : "", declaration_statement: false, declaration_assignment: false, multiline_frame: false, inline_frame: false, if_block: false, else_block: false, class_start_block: false, do_block: false, do_while: false, import_block: false, in_case_statement: false, in_case: false, case_body: false, case_block: false, indentation_level: r3, alignment: 0, line_indent_level: t3 ? t3.line_indent_level : r3, start_line_index: this._output.get_line_number(), ternary_depth: 0 };
      }, E2.prototype._reset = function(e3) {
        var n3 = e3.match(/^[\t ]*/)[0];
        this._last_last_text = "", this._output = new t2(this._options, n3), this._output.raw = this._options.test_output_raw, this._flag_store = [], this.set_mode(f2);
        var r3 = new i2(e3, this._options);
        return this._tokens = r3.tokenize(), e3;
      }, E2.prototype.beautify = function() {
        if (this._options.disabled)
          return this._source_text;
        var t3 = this._reset(this._source_text), e3 = this._options.eol;
        this._options.eol === "auto" && (e3 = "\n", t3 && n2.lineBreak.test(t3 || "") && (e3 = t3.match(n2.lineBreak)[0]));
        for (var r3 = this._tokens.next(); r3; )
          this.handle_token(r3), this._last_last_text = this._flags.last_token.text, this._flags.last_token = r3, r3 = this._tokens.next();
        return this._output.get_code(e3);
      }, E2.prototype.handle_token = function(t3, e3) {
        t3.type === o2.START_EXPR ? this.handle_start_expr(t3) : t3.type === o2.END_EXPR ? this.handle_end_expr(t3) : t3.type === o2.START_BLOCK ? this.handle_start_block(t3) : t3.type === o2.END_BLOCK ? this.handle_end_block(t3) : t3.type === o2.WORD || t3.type === o2.RESERVED ? this.handle_word(t3) : t3.type === o2.SEMICOLON ? this.handle_semicolon(t3) : t3.type === o2.STRING ? this.handle_string(t3) : t3.type === o2.EQUALS ? this.handle_equals(t3) : t3.type === o2.OPERATOR ? this.handle_operator(t3) : t3.type === o2.COMMA ? this.handle_comma(t3) : t3.type === o2.BLOCK_COMMENT ? this.handle_block_comment(t3, e3) : t3.type === o2.COMMENT ? this.handle_comment(t3, e3) : t3.type === o2.DOT ? this.handle_dot(t3) : t3.type === o2.EOF ? this.handle_eof(t3) : (t3.type, o2.UNKNOWN, this.handle_unknown(t3, e3));
      }, E2.prototype.handle_whitespace_and_comments = function(t3, e3) {
        var n3 = t3.newlines, r3 = this._options.keep_array_indentation && w2(this._flags.mode);
        if (t3.comments_before)
          for (var i3 = t3.comments_before.next(); i3; )
            this.handle_whitespace_and_comments(i3, e3), this.handle_token(i3, e3), i3 = t3.comments_before.next();
        if (r3)
          for (var s3 = 0; s3 < n3; s3 += 1)
            this.print_newline(s3 > 0, e3);
        else if (this._options.max_preserve_newlines && n3 > this._options.max_preserve_newlines && (n3 = this._options.max_preserve_newlines), this._options.preserve_newlines && n3 > 1) {
          this.print_newline(false, e3);
          for (var a3 = 1; a3 < n3; a3 += 1)
            this.print_newline(true, e3);
        }
      };
      var A2 = ["async", "break", "continue", "return", "throw", "yield"];
      return E2.prototype.allow_wrap_or_preserved_newline = function(t3, e3) {
        if (e3 = e3 !== void 0 && e3, !this._output.just_added_newline()) {
          var n3 = this._options.preserve_newlines && t3.newlines || e3;
          if (u2(this._flags.last_token.text, a2) || u2(t3.text, a2)) {
            var r3 = u2(this._flags.last_token.text, a2) && u2(this._options.operator_position, p2) || u2(t3.text, a2);
            n3 = n3 && r3;
          }
          if (n3)
            this.print_newline(false, true);
          else if (this._options.wrap_line_length) {
            if (c2(this._flags.last_token, A2))
              return;
            this._output.set_wrap_point();
          }
        }
      }, E2.prototype.print_newline = function(t3, e3) {
        if (!e3 && this._flags.last_token.text !== ";" && this._flags.last_token.text !== "," && this._flags.last_token.text !== "=" && (this._flags.last_token.type !== o2.OPERATOR || this._flags.last_token.text === "--" || this._flags.last_token.text === "++"))
          for (var n3 = this._tokens.peek(); !(this._flags.mode !== d2 || this._flags.if_block && l2(n3, "else") || this._flags.do_block); )
            this.restore_mode();
        this._output.add_new_line(t3) && (this._flags.multiline_frame = true);
      }, E2.prototype.print_token_line_indentation = function(t3) {
        this._output.just_added_newline() && (this._options.keep_array_indentation && t3.newlines && (t3.text === "[" || w2(this._flags.mode)) ? (this._output.current_line.set_indent(-1), this._output.current_line.push(t3.whitespace_before), this._output.space_before_token = false) : this._output.set_indent(this._flags.indentation_level, this._flags.alignment) && (this._flags.line_indent_level = this._flags.indentation_level));
      }, E2.prototype.print_token = function(t3) {
        if (this._output.raw)
          this._output.add_raw_token(t3);
        else {
          if (this._options.comma_first && t3.previous && t3.previous.type === o2.COMMA && this._output.just_added_newline() && this._output.previous_line.last() === ",") {
            var e3 = this._output.previous_line.pop();
            this._output.previous_line.is_empty() && (this._output.previous_line.push(e3), this._output.trim(true), this._output.current_line.pop(), this._output.trim()), this.print_token_line_indentation(t3), this._output.add_token(","), this._output.space_before_token = true;
          }
          this.print_token_line_indentation(t3), this._output.non_breaking_space = true, this._output.add_token(t3.text), this._output.previous_token_wrapped && (this._flags.multiline_frame = true);
        }
      }, E2.prototype.indent = function() {
        this._flags.indentation_level += 1, this._output.set_indent(this._flags.indentation_level, this._flags.alignment);
      }, E2.prototype.deindent = function() {
        this._flags.indentation_level > 0 && (!this._flags.parent || this._flags.indentation_level > this._flags.parent.indentation_level) && (this._flags.indentation_level -= 1, this._output.set_indent(this._flags.indentation_level, this._flags.alignment));
      }, E2.prototype.set_mode = function(t3) {
        this._flags ? (this._flag_store.push(this._flags), this._previous_flags = this._flags) : this._previous_flags = this.create_flags(null, t3), this._flags = this.create_flags(this._previous_flags, t3), this._output.set_indent(this._flags.indentation_level, this._flags.alignment);
      }, E2.prototype.restore_mode = function() {
        this._flag_store.length > 0 && (this._previous_flags = this._flags, this._flags = this._flag_store.pop(), this._previous_flags.mode === d2 && v2(this._output, this._previous_flags), this._output.set_indent(this._flags.indentation_level, this._flags.alignment));
      }, E2.prototype.start_of_object_property = function() {
        return this._flags.parent.mode === g2 && this._flags.mode === d2 && (this._flags.last_token.text === ":" && this._flags.ternary_depth === 0 || c2(this._flags.last_token, ["get", "set"]));
      }, E2.prototype.start_of_statement = function(t3) {
        var e3 = false;
        return !!(e3 = (e3 = (e3 = (e3 = (e3 = (e3 = (e3 = e3 || c2(this._flags.last_token, ["var", "let", "const"]) && t3.type === o2.WORD) || l2(this._flags.last_token, "do")) || !(this._flags.parent.mode === g2 && this._flags.mode === d2) && c2(this._flags.last_token, A2) && !t3.newlines) || l2(this._flags.last_token, "else") && !(l2(t3, "if") && !t3.comments_before)) || this._flags.last_token.type === o2.END_EXPR && (this._previous_flags.mode === b2 || this._previous_flags.mode === y2)) || this._flags.last_token.type === o2.WORD && this._flags.mode === f2 && !this._flags.in_case && !(t3.text === "--" || t3.text === "++") && this._last_last_text !== "function" && t3.type !== o2.WORD && t3.type !== o2.RESERVED) || this._flags.mode === g2 && (this._flags.last_token.text === ":" && this._flags.ternary_depth === 0 || c2(this._flags.last_token, ["get", "set"]))) && (this.set_mode(d2), this.indent(), this.handle_whitespace_and_comments(t3, true), this.start_of_object_property() || this.allow_wrap_or_preserved_newline(t3, c2(t3, ["do", "for", "if", "while"])), true);
      }, E2.prototype.handle_start_expr = function(t3) {
        this.start_of_statement(t3) || this.handle_whitespace_and_comments(t3);
        var e3 = k2;
        if (t3.text === "[") {
          if (this._flags.last_token.type === o2.WORD || this._flags.last_token.text === ")")
            return c2(this._flags.last_token, s2) && (this._output.space_before_token = true), this.print_token(t3), this.set_mode(e3), this.indent(), void (this._options.space_in_paren && (this._output.space_before_token = true));
          e3 = m2, w2(this._flags.mode) && (this._flags.last_token.text !== "[" && (this._flags.last_token.text !== "," || this._last_last_text !== "]" && this._last_last_text !== "}") || this._options.keep_array_indentation || this.print_newline()), u2(this._flags.last_token.type, [o2.START_EXPR, o2.END_EXPR, o2.WORD, o2.OPERATOR, o2.DOT]) || (this._output.space_before_token = true);
        } else {
          if (this._flags.last_token.type === o2.RESERVED)
            this._flags.last_token.text === "for" ? (this._output.space_before_token = this._options.space_before_conditional, e3 = b2) : u2(this._flags.last_token.text, ["if", "while", "switch"]) ? (this._output.space_before_token = this._options.space_before_conditional, e3 = y2) : u2(this._flags.last_word, ["await", "async"]) ? this._output.space_before_token = true : this._flags.last_token.text === "import" && t3.whitespace_before === "" ? this._output.space_before_token = false : (u2(this._flags.last_token.text, s2) || this._flags.last_token.text === "catch") && (this._output.space_before_token = true);
          else if (this._flags.last_token.type === o2.EQUALS || this._flags.last_token.type === o2.OPERATOR)
            this.start_of_object_property() || this.allow_wrap_or_preserved_newline(t3);
          else if (this._flags.last_token.type === o2.WORD) {
            this._output.space_before_token = false;
            var n3 = this._tokens.peek(-3);
            if (this._options.space_after_named_function && n3) {
              var r3 = this._tokens.peek(-4);
              c2(n3, ["async", "function"]) || n3.text === "*" && c2(r3, ["async", "function"]) ? this._output.space_before_token = true : this._flags.mode === g2 ? n3.text !== "{" && n3.text !== "," && (n3.text !== "*" || r3.text !== "{" && r3.text !== ",") || (this._output.space_before_token = true) : this._flags.parent && this._flags.parent.class_start_block && (this._output.space_before_token = true);
            }
          } else
            this.allow_wrap_or_preserved_newline(t3);
          (this._flags.last_token.type === o2.RESERVED && (this._flags.last_word === "function" || this._flags.last_word === "typeof") || this._flags.last_token.text === "*" && (u2(this._last_last_text, ["function", "yield"]) || this._flags.mode === g2 && u2(this._last_last_text, ["{", ","]))) && (this._output.space_before_token = this._options.space_after_anon_function);
        }
        this._flags.last_token.text === ";" || this._flags.last_token.type === o2.START_BLOCK ? this.print_newline() : this._flags.last_token.type !== o2.END_EXPR && this._flags.last_token.type !== o2.START_EXPR && this._flags.last_token.type !== o2.END_BLOCK && this._flags.last_token.text !== "." && this._flags.last_token.type !== o2.COMMA || this.allow_wrap_or_preserved_newline(t3, t3.newlines), this.print_token(t3), this.set_mode(e3), this._options.space_in_paren && (this._output.space_before_token = true), this.indent();
      }, E2.prototype.handle_end_expr = function(t3) {
        for (; this._flags.mode === d2; )
          this.restore_mode();
        this.handle_whitespace_and_comments(t3), this._flags.multiline_frame && this.allow_wrap_or_preserved_newline(t3, t3.text === "]" && w2(this._flags.mode) && !this._options.keep_array_indentation), this._options.space_in_paren && (this._flags.last_token.type !== o2.START_EXPR || this._options.space_in_empty_paren ? this._output.space_before_token = true : (this._output.trim(), this._output.space_before_token = false)), this.deindent(), this.print_token(t3), this.restore_mode(), v2(this._output, this._previous_flags), this._flags.do_while && this._previous_flags.mode === y2 && (this._previous_flags.mode = k2, this._flags.do_block = false, this._flags.do_while = false);
      }, E2.prototype.handle_start_block = function(t3) {
        this.handle_whitespace_and_comments(t3);
        var e3 = this._tokens.peek(), n3 = this._tokens.peek(1);
        this._flags.last_word === "switch" && this._flags.last_token.type === o2.END_EXPR ? (this.set_mode(f2), this._flags.in_case_statement = true) : this._flags.case_body ? this.set_mode(f2) : n3 && (u2(n3.text, [":", ","]) && u2(e3.type, [o2.STRING, o2.WORD, o2.RESERVED]) || u2(e3.text, ["get", "set", "..."]) && u2(n3.type, [o2.WORD, o2.RESERVED])) ? u2(this._last_last_text, ["class", "interface"]) && !u2(n3.text, [":", ","]) ? this.set_mode(f2) : this.set_mode(g2) : this._flags.last_token.type === o2.OPERATOR && this._flags.last_token.text === "=>" ? this.set_mode(f2) : u2(this._flags.last_token.type, [o2.EQUALS, o2.START_EXPR, o2.COMMA, o2.OPERATOR]) || c2(this._flags.last_token, ["return", "throw", "import", "default"]) ? this.set_mode(g2) : this.set_mode(f2), this._flags.last_token && c2(this._flags.last_token.previous, ["class", "extends"]) && (this._flags.class_start_block = true);
        var r3 = !e3.comments_before && e3.text === "}", i3 = r3 && this._flags.last_word === "function" && this._flags.last_token.type === o2.END_EXPR;
        if (this._options.brace_preserve_inline) {
          var s3 = 0, a3 = null;
          this._flags.inline_frame = true;
          do {
            if (s3 += 1, (a3 = this._tokens.peek(s3 - 1)).newlines) {
              this._flags.inline_frame = false;
              break;
            }
          } while (a3.type !== o2.EOF && (a3.type !== o2.END_BLOCK || a3.opened !== t3));
        }
        (this._options.brace_style === "expand" || this._options.brace_style === "none" && t3.newlines) && !this._flags.inline_frame ? this._flags.last_token.type !== o2.OPERATOR && (i3 || this._flags.last_token.type === o2.EQUALS || c2(this._flags.last_token, _2) && this._flags.last_token.text !== "else") ? this._output.space_before_token = true : this.print_newline(false, true) : (!w2(this._previous_flags.mode) || this._flags.last_token.type !== o2.START_EXPR && this._flags.last_token.type !== o2.COMMA || ((this._flags.last_token.type === o2.COMMA || this._options.space_in_paren) && (this._output.space_before_token = true), (this._flags.last_token.type === o2.COMMA || this._flags.last_token.type === o2.START_EXPR && this._flags.inline_frame) && (this.allow_wrap_or_preserved_newline(t3), this._previous_flags.multiline_frame = this._previous_flags.multiline_frame || this._flags.multiline_frame, this._flags.multiline_frame = false)), this._flags.last_token.type !== o2.OPERATOR && this._flags.last_token.type !== o2.START_EXPR && (this._flags.last_token.type !== o2.START_BLOCK || this._flags.inline_frame ? this._output.space_before_token = true : this.print_newline())), this.print_token(t3), this.indent(), r3 || this._options.brace_preserve_inline && this._flags.inline_frame || this.print_newline();
      }, E2.prototype.handle_end_block = function(t3) {
        for (this.handle_whitespace_and_comments(t3); this._flags.mode === d2; )
          this.restore_mode();
        var e3 = this._flags.last_token.type === o2.START_BLOCK;
        this._flags.inline_frame && !e3 ? this._output.space_before_token = true : this._options.brace_style === "expand" ? e3 || this.print_newline() : e3 || (w2(this._flags.mode) && this._options.keep_array_indentation ? (this._options.keep_array_indentation = false, this.print_newline(), this._options.keep_array_indentation = true) : this.print_newline()), this.restore_mode(), this.print_token(t3);
      }, E2.prototype.handle_word = function(t3) {
        if (t3.type === o2.RESERVED) {
          if (u2(t3.text, ["set", "get"]) && this._flags.mode !== g2)
            t3.type = o2.WORD;
          else if (t3.text === "import" && u2(this._tokens.peek().text, ["(", "."]))
            t3.type = o2.WORD;
          else if (u2(t3.text, ["as", "from"]) && !this._flags.import_block)
            t3.type = o2.WORD;
          else if (this._flags.mode === g2) {
            this._tokens.peek().text === ":" && (t3.type = o2.WORD);
          }
        }
        if (this.start_of_statement(t3) ? c2(this._flags.last_token, ["var", "let", "const"]) && t3.type === o2.WORD && (this._flags.declaration_statement = true) : !t3.newlines || x2(this._flags.mode) || this._flags.last_token.type === o2.OPERATOR && this._flags.last_token.text !== "--" && this._flags.last_token.text !== "++" || this._flags.last_token.type === o2.EQUALS || !this._options.preserve_newlines && c2(this._flags.last_token, ["var", "let", "const", "set", "get"]) ? this.handle_whitespace_and_comments(t3) : (this.handle_whitespace_and_comments(t3), this.print_newline()), this._flags.do_block && !this._flags.do_while) {
          if (l2(t3, "while"))
            return this._output.space_before_token = true, this.print_token(t3), this._output.space_before_token = true, void (this._flags.do_while = true);
          this.print_newline(), this._flags.do_block = false;
        }
        if (this._flags.if_block)
          if (!this._flags.else_block && l2(t3, "else"))
            this._flags.else_block = true;
          else {
            for (; this._flags.mode === d2; )
              this.restore_mode();
            this._flags.if_block = false, this._flags.else_block = false;
          }
        if (this._flags.in_case_statement && c2(t3, ["case", "default"]))
          return this.print_newline(), this._flags.case_block || !this._flags.case_body && !this._options.jslint_happy || this.deindent(), this._flags.case_body = false, this.print_token(t3), void (this._flags.in_case = true);
        if (this._flags.last_token.type !== o2.COMMA && this._flags.last_token.type !== o2.START_EXPR && this._flags.last_token.type !== o2.EQUALS && this._flags.last_token.type !== o2.OPERATOR || this.start_of_object_property() || this.allow_wrap_or_preserved_newline(t3), l2(t3, "function"))
          return (u2(this._flags.last_token.text, ["}", ";"]) || this._output.just_added_newline() && !u2(this._flags.last_token.text, ["(", "[", "{", ":", "=", ","]) && this._flags.last_token.type !== o2.OPERATOR) && (this._output.just_added_blankline() || t3.comments_before || (this.print_newline(), this.print_newline(true))), this._flags.last_token.type === o2.RESERVED || this._flags.last_token.type === o2.WORD ? c2(this._flags.last_token, ["get", "set", "new", "export"]) || c2(this._flags.last_token, A2) || l2(this._flags.last_token, "default") && this._last_last_text === "export" || this._flags.last_token.text === "declare" ? this._output.space_before_token = true : this.print_newline() : this._flags.last_token.type === o2.OPERATOR || this._flags.last_token.text === "=" ? this._output.space_before_token = true : (this._flags.multiline_frame || !x2(this._flags.mode) && !w2(this._flags.mode)) && this.print_newline(), this.print_token(t3), void (this._flags.last_word = t3.text);
        var e3 = "NONE";
        (this._flags.last_token.type === o2.END_BLOCK ? this._previous_flags.inline_frame ? e3 = "SPACE" : c2(t3, ["else", "catch", "finally", "from"]) ? this._options.brace_style === "expand" || this._options.brace_style === "end-expand" || this._options.brace_style === "none" && t3.newlines ? e3 = "NEWLINE" : (e3 = "SPACE", this._output.space_before_token = true) : e3 = "NEWLINE" : this._flags.last_token.type === o2.SEMICOLON && this._flags.mode === f2 ? e3 = "NEWLINE" : this._flags.last_token.type === o2.SEMICOLON && x2(this._flags.mode) ? e3 = "SPACE" : this._flags.last_token.type === o2.STRING ? e3 = "NEWLINE" : this._flags.last_token.type === o2.RESERVED || this._flags.last_token.type === o2.WORD || this._flags.last_token.text === "*" && (u2(this._last_last_text, ["function", "yield"]) || this._flags.mode === g2 && u2(this._last_last_text, ["{", ","])) ? e3 = "SPACE" : this._flags.last_token.type === o2.START_BLOCK ? e3 = this._flags.inline_frame ? "SPACE" : "NEWLINE" : this._flags.last_token.type === o2.END_EXPR && (this._output.space_before_token = true, e3 = "NEWLINE"), c2(t3, s2) && this._flags.last_token.text !== ")" && (e3 = this._flags.inline_frame || this._flags.last_token.text === "else" || this._flags.last_token.text === "export" ? "SPACE" : "NEWLINE"), c2(t3, ["else", "catch", "finally"])) ? (this._flags.last_token.type !== o2.END_BLOCK || this._previous_flags.mode !== f2 || this._options.brace_style === "expand" || this._options.brace_style === "end-expand" || this._options.brace_style === "none" && t3.newlines) && !this._flags.inline_frame ? this.print_newline() : (this._output.trim(true), this._output.current_line.last() !== "}" && this.print_newline(), this._output.space_before_token = true) : e3 === "NEWLINE" ? c2(this._flags.last_token, _2) || this._flags.last_token.text === "declare" && c2(t3, ["var", "let", "const"]) ? this._output.space_before_token = true : this._flags.last_token.type !== o2.END_EXPR ? this._flags.last_token.type === o2.START_EXPR && c2(t3, ["var", "let", "const"]) || this._flags.last_token.text === ":" || (l2(t3, "if") && l2(t3.previous, "else") ? this._output.space_before_token = true : this.print_newline()) : c2(t3, s2) && this._flags.last_token.text !== ")" && this.print_newline() : this._flags.multiline_frame && w2(this._flags.mode) && this._flags.last_token.text === "," && this._last_last_text === "}" ? this.print_newline() : e3 === "SPACE" && (this._output.space_before_token = true);
        !t3.previous || t3.previous.type !== o2.WORD && t3.previous.type !== o2.RESERVED || (this._output.space_before_token = true), this.print_token(t3), this._flags.last_word = t3.text, t3.type === o2.RESERVED && (t3.text === "do" ? this._flags.do_block = true : t3.text === "if" ? this._flags.if_block = true : t3.text === "import" ? this._flags.import_block = true : this._flags.import_block && l2(t3, "from") && (this._flags.import_block = false));
      }, E2.prototype.handle_semicolon = function(t3) {
        this.start_of_statement(t3) ? this._output.space_before_token = false : this.handle_whitespace_and_comments(t3);
        for (var e3 = this._tokens.peek(); !(this._flags.mode !== d2 || this._flags.if_block && l2(e3, "else") || this._flags.do_block); )
          this.restore_mode();
        this._flags.import_block && (this._flags.import_block = false), this.print_token(t3);
      }, E2.prototype.handle_string = function(t3) {
        (!t3.text.startsWith("`") || t3.newlines !== 0 || t3.whitespace_before !== "" || t3.previous.text !== ")" && this._flags.last_token.type !== o2.WORD) && (this.start_of_statement(t3) ? this._output.space_before_token = true : (this.handle_whitespace_and_comments(t3), this._flags.last_token.type === o2.RESERVED || this._flags.last_token.type === o2.WORD || this._flags.inline_frame ? this._output.space_before_token = true : this._flags.last_token.type === o2.COMMA || this._flags.last_token.type === o2.START_EXPR || this._flags.last_token.type === o2.EQUALS || this._flags.last_token.type === o2.OPERATOR ? this.start_of_object_property() || this.allow_wrap_or_preserved_newline(t3) : !t3.text.startsWith("`") || this._flags.last_token.type !== o2.END_EXPR || t3.previous.text !== "]" && t3.previous.text !== ")" || t3.newlines !== 0 ? this.print_newline() : this._output.space_before_token = true)), this.print_token(t3);
      }, E2.prototype.handle_equals = function(t3) {
        this.start_of_statement(t3) || this.handle_whitespace_and_comments(t3), this._flags.declaration_statement && (this._flags.declaration_assignment = true), this._output.space_before_token = true, this.print_token(t3), this._output.space_before_token = true;
      }, E2.prototype.handle_comma = function(t3) {
        this.handle_whitespace_and_comments(t3, true), this.print_token(t3), this._output.space_before_token = true, this._flags.declaration_statement ? (x2(this._flags.parent.mode) && (this._flags.declaration_assignment = false), this._flags.declaration_assignment ? (this._flags.declaration_assignment = false, this.print_newline(false, true)) : this._options.comma_first && this.allow_wrap_or_preserved_newline(t3)) : this._flags.mode === g2 || this._flags.mode === d2 && this._flags.parent.mode === g2 ? (this._flags.mode === d2 && this.restore_mode(), this._flags.inline_frame || this.print_newline()) : this._options.comma_first && this.allow_wrap_or_preserved_newline(t3);
      }, E2.prototype.handle_operator = function(t3) {
        var e3 = t3.text === "*" && (c2(this._flags.last_token, ["function", "yield"]) || u2(this._flags.last_token.type, [o2.START_BLOCK, o2.COMMA, o2.END_BLOCK, o2.SEMICOLON])), n3 = u2(t3.text, ["-", "+"]) && (u2(this._flags.last_token.type, [o2.START_BLOCK, o2.START_EXPR, o2.EQUALS, o2.OPERATOR]) || u2(this._flags.last_token.text, s2) || this._flags.last_token.text === ",");
        if (this.start_of_statement(t3))
          ;
        else {
          var r3 = !e3;
          this.handle_whitespace_and_comments(t3, r3);
        }
        if (t3.text !== "*" || this._flags.last_token.type !== o2.DOT)
          if (t3.text !== "::") {
            if (this._flags.last_token.type === o2.OPERATOR && u2(this._options.operator_position, p2) && this.allow_wrap_or_preserved_newline(t3), t3.text === ":" && this._flags.in_case)
              return this.print_token(t3), this._flags.in_case = false, this._flags.case_body = true, void (this._tokens.peek().type !== o2.START_BLOCK ? (this.indent(), this.print_newline(), this._flags.case_block = false) : (this._flags.case_block = true, this._output.space_before_token = true));
            var i3 = true, l3 = true, g3 = false;
            if (t3.text === ":" ? this._flags.ternary_depth === 0 ? i3 = false : (this._flags.ternary_depth -= 1, g3 = true) : t3.text === "?" && (this._flags.ternary_depth += 1), !n3 && !e3 && this._options.preserve_newlines && u2(t3.text, a2)) {
              var m3 = t3.text === ":", b3 = m3 && g3, y3 = m3 && !g3;
              switch (this._options.operator_position) {
                case h2.before_newline:
                  return this._output.space_before_token = !y3, this.print_token(t3), m3 && !b3 || this.allow_wrap_or_preserved_newline(t3), void (this._output.space_before_token = true);
                case h2.after_newline:
                  return this._output.space_before_token = true, !m3 || b3 ? this._tokens.peek().newlines ? this.print_newline(false, true) : this.allow_wrap_or_preserved_newline(t3) : this._output.space_before_token = false, this.print_token(t3), void (this._output.space_before_token = true);
                case h2.preserve_newline:
                  return y3 || this.allow_wrap_or_preserved_newline(t3), i3 = !(this._output.just_added_newline() || y3), this._output.space_before_token = i3, this.print_token(t3), void (this._output.space_before_token = true);
              }
            }
            if (e3) {
              this.allow_wrap_or_preserved_newline(t3), i3 = false;
              var k3 = this._tokens.peek();
              l3 = k3 && u2(k3.type, [o2.WORD, o2.RESERVED]);
            } else if (t3.text === "...")
              this.allow_wrap_or_preserved_newline(t3), i3 = this._flags.last_token.type === o2.START_BLOCK, l3 = false;
            else if (u2(t3.text, ["--", "++", "!", "~"]) || n3) {
              if (this._flags.last_token.type !== o2.COMMA && this._flags.last_token.type !== o2.START_EXPR || this.allow_wrap_or_preserved_newline(t3), i3 = false, l3 = false, t3.newlines && (t3.text === "--" || t3.text === "++" || t3.text === "~")) {
                var v3 = c2(this._flags.last_token, _2) && t3.newlines;
                v3 && (this._previous_flags.if_block || this._previous_flags.else_block) && this.restore_mode(), this.print_newline(v3, true);
              }
              this._flags.last_token.text === ";" && x2(this._flags.mode) && (i3 = true), this._flags.last_token.type === o2.RESERVED ? i3 = true : this._flags.last_token.type === o2.END_EXPR ? i3 = !(this._flags.last_token.text === "]" && (t3.text === "--" || t3.text === "++")) : this._flags.last_token.type === o2.OPERATOR && (i3 = u2(t3.text, ["--", "-", "++", "+"]) && u2(this._flags.last_token.text, ["--", "-", "++", "+"]), u2(t3.text, ["+", "-"]) && u2(this._flags.last_token.text, ["--", "++"]) && (l3 = true)), (this._flags.mode !== f2 || this._flags.inline_frame) && this._flags.mode !== d2 || this._flags.last_token.text !== "{" && this._flags.last_token.text !== ";" || this.print_newline();
            }
            this._output.space_before_token = this._output.space_before_token || i3, this.print_token(t3), this._output.space_before_token = l3;
          } else
            this.print_token(t3);
        else
          this.print_token(t3);
      }, E2.prototype.handle_block_comment = function(t3, e3) {
        return this._output.raw ? (this._output.add_raw_token(t3), void (t3.directives && t3.directives.preserve === "end" && (this._output.raw = this._options.test_output_raw))) : t3.directives ? (this.print_newline(false, e3), this.print_token(t3), t3.directives.preserve === "start" && (this._output.raw = true), void this.print_newline(false, true)) : n2.newline.test(t3.text) || t3.newlines ? void this.print_block_commment(t3, e3) : (this._output.space_before_token = true, this.print_token(t3), void (this._output.space_before_token = true));
      }, E2.prototype.print_block_commment = function(t3, e3) {
        var r3, i3 = function(t4) {
          for (var e4 = [], r4 = (t4 = t4.replace(n2.allLineBreaks, "\n")).indexOf("\n"); r4 !== -1; )
            e4.push(t4.substring(0, r4)), r4 = (t4 = t4.substring(r4 + 1)).indexOf("\n");
          return t4.length && e4.push(t4), e4;
        }(t3.text), s3 = false, a3 = false, o3 = t3.whitespace_before, u3 = o3.length;
        if (this.print_newline(false, e3), this.print_token_line_indentation(t3), this._output.add_token(i3[0]), this.print_newline(false, e3), i3.length > 1) {
          for (s3 = function(t4, e4) {
            for (var n3 = 0; n3 < t4.length; n3++)
              if (t4[n3].trim().charAt(0) !== e4)
                return false;
            return true;
          }(i3 = i3.slice(1), "*"), a3 = function(t4, e4) {
            for (var n3, r4 = 0, i4 = t4.length; r4 < i4; r4++)
              if ((n3 = t4[r4]) && n3.indexOf(e4) !== 0)
                return false;
            return true;
          }(i3, o3), s3 && (this._flags.alignment = 1), r3 = 0; r3 < i3.length; r3++)
            s3 ? (this.print_token_line_indentation(t3), this._output.add_token(i3[r3].replace(/^\s+/g, ""))) : a3 && i3[r3] ? (this.print_token_line_indentation(t3), this._output.add_token(i3[r3].substring(u3))) : (this._output.current_line.set_indent(-1), this._output.add_token(i3[r3])), this.print_newline(false, e3);
          this._flags.alignment = 0;
        }
      }, E2.prototype.handle_comment = function(t3, e3) {
        t3.newlines ? this.print_newline(false, e3) : this._output.trim(true), this._output.space_before_token = true, this.print_token(t3), this.print_newline(false, e3);
      }, E2.prototype.handle_dot = function(t3) {
        this.start_of_statement(t3) || this.handle_whitespace_and_comments(t3, true), this._flags.last_token.text.match("^[0-9]+$") && (this._output.space_before_token = true), c2(this._flags.last_token, _2) ? this._output.space_before_token = false : this.allow_wrap_or_preserved_newline(t3, this._flags.last_token.text === ")" && this._options.break_chained_methods), this._options.unindent_chained_methods && this._output.just_added_newline() && this.deindent(), this.print_token(t3);
      }, E2.prototype.handle_unknown = function(t3, e3) {
        this.print_token(t3), t3.text[t3.text.length - 1] === "\n" && this.print_newline(false, e3);
      }, E2.prototype.handle_eof = function(t3) {
        for (; this._flags.mode === d2; )
          this.restore_mode();
        this.handle_whitespace_and_comments(t3);
      }, R.Beautifier = E2, R;
    }
    var bt;
    var yt;
    var kt;
    var vt = {};
    var wt = { get exports() {
      return vt;
    }, set exports(t2) {
      vt = t2;
    } };
    var xt = {};
    var Et = {};
    function At() {
      if (bt)
        return Et;
      bt = 1;
      var t2 = G().Options;
      function e2(e3) {
        t2.call(this, e3, "css"), this.selector_separator_newline = this._get_boolean("selector_separator_newline", true), this.newline_between_rules = this._get_boolean("newline_between_rules", true);
        var n2 = this._get_boolean("space_around_selector_separator");
        this.space_around_combinator = this._get_boolean("space_around_combinator") || n2;
        var r2 = this._get_selection_list("brace_style", ["collapse", "expand", "end-expand", "none", "preserve-inline"]);
        this.brace_style = "collapse";
        for (var i2 = 0; i2 < r2.length; i2++)
          r2[i2] !== "expand" ? this.brace_style = "collapse" : this.brace_style = r2[i2];
      }
      return e2.prototype = new t2(), Et.Options = e2, Et;
    }
    function Ct() {
      if (kt)
        return vt;
      kt = 1;
      var t2 = function() {
        if (yt)
          return xt;
        yt = 1;
        var t3 = At().Options, e3 = N().Output, n2 = X().InputScanner, r2 = new (0, lt().Directives)(/\/\*/, /\*\//), i2 = /\r\n|[\r\n]/, s2 = /\r\n|[\r\n]/g, a2 = /\s/, o2 = /(?:\s|\n)+/g, u2 = /\/\*(?:[\s\S]*?)((?:\*\/)|$)/g, l2 = /\/\/(?:[^\n\r\u2028\u2029]*)/g;
        function c2(e4, n3) {
          this._source_text = e4 || "", this._options = new t3(n3), this._ch = null, this._input = null, this.NESTED_AT_RULE = { "@page": true, "@font-face": true, "@keyframes": true, "@media": true, "@supports": true, "@document": true }, this.CONDITIONAL_GROUP_RULE = { "@media": true, "@supports": true, "@document": true }, this.NON_SEMICOLON_NEWLINE_PROPERTY = ["grid-template-areas", "grid-template"];
        }
        return c2.prototype.eatString = function(t4) {
          var e4 = "";
          for (this._ch = this._input.next(); this._ch; ) {
            if (e4 += this._ch, this._ch === "\\")
              e4 += this._input.next();
            else if (t4.indexOf(this._ch) !== -1 || this._ch === "\n")
              break;
            this._ch = this._input.next();
          }
          return e4;
        }, c2.prototype.eatWhitespace = function(t4) {
          for (var e4 = a2.test(this._input.peek()), n3 = 0; a2.test(this._input.peek()); )
            this._ch = this._input.next(), t4 && this._ch === "\n" && (n3 === 0 || n3 < this._options.max_preserve_newlines) && (n3++, this._output.add_new_line(true));
          return e4;
        }, c2.prototype.foundNestedPseudoClass = function() {
          for (var t4 = 0, e4 = 1, n3 = this._input.peek(e4); n3; ) {
            if (n3 === "{")
              return true;
            if (n3 === "(")
              t4 += 1;
            else if (n3 === ")") {
              if (t4 === 0)
                return false;
              t4 -= 1;
            } else if (n3 === ";" || n3 === "}")
              return false;
            e4++, n3 = this._input.peek(e4);
          }
          return false;
        }, c2.prototype.print_string = function(t4) {
          this._output.set_indent(this._indentLevel), this._output.non_breaking_space = true, this._output.add_token(t4);
        }, c2.prototype.preserveSingleSpace = function(t4) {
          t4 && (this._output.space_before_token = true);
        }, c2.prototype.indent = function() {
          this._indentLevel++;
        }, c2.prototype.outdent = function() {
          this._indentLevel > 0 && this._indentLevel--;
        }, c2.prototype.beautify = function() {
          if (this._options.disabled)
            return this._source_text;
          var t4 = this._source_text, c3 = this._options.eol;
          c3 === "auto" && (c3 = "\n", t4 && i2.test(t4 || "") && (c3 = t4.match(i2)[0]));
          var _2 = (t4 = t4.replace(s2, "\n")).match(/^[\t ]*/)[0];
          this._output = new e3(this._options, _2), this._input = new n2(t4), this._indentLevel = 0, this._nestedLevel = 0, this._ch = null;
          for (var h2, p2, f2 = 0, d2 = false, g2 = false, m2 = false, b2 = false, y2 = false, k2 = false, v2 = this._ch, w2 = false; h2 = this._input.read(o2) !== "", p2 = v2, this._ch = this._input.next(), this._ch === "\\" && this._input.hasNext() && (this._ch += this._input.next()), v2 = this._ch, this._ch; )
            if (this._ch === "/" && this._input.peek() === "*") {
              this._output.add_new_line(), this._input.back();
              var x2 = this._input.read(u2), E2 = r2.get_directives(x2);
              E2 && E2.ignore === "start" && (x2 += r2.readIgnored(this._input)), this.print_string(x2), this.eatWhitespace(true), this._output.add_new_line();
            } else if (this._ch === "/" && this._input.peek() === "/")
              this._output.space_before_token = true, this._input.back(), this.print_string(this._input.read(l2)), this.eatWhitespace(true);
            else if (this._ch === "@" || this._ch === "$")
              if (this.preserveSingleSpace(h2), this._input.peek() === "{")
                this.print_string(this._ch + this.eatString("}"));
              else {
                this.print_string(this._ch);
                var A2 = this._input.peekUntilAfter(/[: ,;{}()[\]\/='"]/g);
                A2.match(/[ :]$/) && (A2 = this.eatString(": ").replace(/\s$/, ""), this.print_string(A2), this._output.space_before_token = true), (A2 = A2.replace(/\s$/, "")) === "extend" ? b2 = true : A2 === "import" && (y2 = true), A2 in this.NESTED_AT_RULE ? (this._nestedLevel += 1, A2 in this.CONDITIONAL_GROUP_RULE && (m2 = true)) : d2 || f2 !== 0 || A2.indexOf(":") === -1 || (g2 = true, this.indent());
              }
            else if (this._ch === "#" && this._input.peek() === "{")
              this.preserveSingleSpace(h2), this.print_string(this._ch + this.eatString("}"));
            else if (this._ch === "{")
              g2 && (g2 = false, this.outdent()), m2 ? (m2 = false, d2 = this._indentLevel >= this._nestedLevel) : d2 = this._indentLevel >= this._nestedLevel - 1, this._options.newline_between_rules && d2 && this._output.previous_line && this._output.previous_line.item(-1) !== "{" && this._output.ensure_empty_line_above("/", ","), this._output.space_before_token = true, this._options.brace_style === "expand" ? (this._output.add_new_line(), this.print_string(this._ch), this.indent(), this._output.set_indent(this._indentLevel)) : (p2 === "(" ? this._output.space_before_token = false : p2 !== "," && this.indent(), this.print_string(this._ch)), this.eatWhitespace(true), this._output.add_new_line();
            else if (this._ch === "}")
              this.outdent(), this._output.add_new_line(), p2 === "{" && this._output.trim(true), y2 = false, b2 = false, g2 && (this.outdent(), g2 = false), this.print_string(this._ch), d2 = false, this._nestedLevel && this._nestedLevel--, this.eatWhitespace(true), this._output.add_new_line(), this._options.newline_between_rules && !this._output.just_added_blankline() && this._input.peek() !== "}" && this._output.add_new_line(true), this._input.peek() === ")" && (this._output.trim(true), this._options.brace_style === "expand" && this._output.add_new_line(true));
            else if (this._ch === ":") {
              for (var C2 = 0; C2 < this.NON_SEMICOLON_NEWLINE_PROPERTY.length; C2++)
                if (this._input.lookBack(this.NON_SEMICOLON_NEWLINE_PROPERTY[C2])) {
                  w2 = true;
                  break;
                }
              !d2 && !m2 || this._input.lookBack("&") || this.foundNestedPseudoClass() || this._input.lookBack("(") || b2 || f2 !== 0 ? (this._input.lookBack(" ") && (this._output.space_before_token = true), this._input.peek() === ":" ? (this._ch = this._input.next(), this.print_string("::")) : this.print_string(":")) : (this.print_string(":"), g2 || (g2 = true, this._output.space_before_token = true, this.eatWhitespace(true), this.indent()));
            } else if (this._ch === '"' || this._ch === "'") {
              var O2 = p2 === '"' || p2 === "'";
              this.preserveSingleSpace(O2 || h2), this.print_string(this._ch + this.eatString(this._ch)), this.eatWhitespace(true);
            } else if (this._ch === ";")
              w2 = false, f2 === 0 ? (g2 && (this.outdent(), g2 = false), b2 = false, y2 = false, this.print_string(this._ch), this.eatWhitespace(true), this._input.peek() !== "/" && this._output.add_new_line()) : (this.print_string(this._ch), this.eatWhitespace(true), this._output.space_before_token = true);
            else if (this._ch === "(")
              if (this._input.lookBack("url"))
                this.print_string(this._ch), this.eatWhitespace(), f2++, this.indent(), this._ch = this._input.next(), this._ch === ")" || this._ch === '"' || this._ch === "'" ? this._input.back() : this._ch && (this.print_string(this._ch + this.eatString(")")), f2 && (f2--, this.outdent()));
              else {
                var S2 = false;
                this._input.lookBack("with") && (S2 = true), this.preserveSingleSpace(h2 || S2), this.print_string(this._ch), g2 && p2 === "$" && this._options.selector_separator_newline ? (this._output.add_new_line(), k2 = true) : (this.eatWhitespace(), f2++, this.indent());
              }
            else if (this._ch === ")")
              f2 && (f2--, this.outdent()), k2 && this._input.peek() === ";" && this._options.selector_separator_newline && (k2 = false, this.outdent(), this._output.add_new_line()), this.print_string(this._ch);
            else if (this._ch === ",")
              this.print_string(this._ch), this.eatWhitespace(true), !this._options.selector_separator_newline || g2 && !k2 || f2 !== 0 || y2 || b2 ? this._output.space_before_token = true : this._output.add_new_line();
            else if (this._ch !== ">" && this._ch !== "+" && this._ch !== "~" || g2 || f2 !== 0)
              if (this._ch === "]")
                this.print_string(this._ch);
              else if (this._ch === "[")
                this.preserveSingleSpace(h2), this.print_string(this._ch);
              else if (this._ch === "=")
                this.eatWhitespace(), this.print_string("="), a2.test(this._ch) && (this._ch = "");
              else if (this._ch !== "!" || this._input.lookBack("\\")) {
                var T2 = p2 === '"' || p2 === "'";
                this.preserveSingleSpace(T2 || h2), this.print_string(this._ch), !this._output.just_added_newline() && this._input.peek() === "\n" && w2 && this._output.add_new_line();
              } else
                this._output.space_before_token = true, this.print_string(this._ch);
            else
              this._options.space_around_combinator ? (this._output.space_before_token = true, this.print_string(this._ch), this._output.space_before_token = true) : (this.print_string(this._ch), this.eatWhitespace(), this._ch && a2.test(this._ch) && (this._ch = ""));
          return this._output.get_code(c3);
        }, xt.Beautifier = c2, xt;
      }().Beautifier, e2 = At().Options;
      return wt.exports = function(e3, n2) {
        return new t2(e3, n2).beautify();
      }, vt.defaultOptions = function() {
        return new e2();
      }, vt;
    }
    var Ot;
    var St = {};
    var Tt = { get exports() {
      return St;
    }, set exports(t2) {
      St = t2;
    } };
    var Dt = {};
    var Rt = {};
    function Lt() {
      if (Ot)
        return Rt;
      Ot = 1;
      var t2 = G().Options;
      function e2(e3) {
        t2.call(this, e3, "html"), this.templating.length === 1 && this.templating[0] === "auto" && (this.templating = ["django", "erb", "handlebars", "php"]), this.indent_inner_html = this._get_boolean("indent_inner_html"), this.indent_body_inner_html = this._get_boolean("indent_body_inner_html", true), this.indent_head_inner_html = this._get_boolean("indent_head_inner_html", true), this.indent_handlebars = this._get_boolean("indent_handlebars", true), this.wrap_attributes = this._get_selection("wrap_attributes", ["auto", "force", "force-aligned", "force-expand-multiline", "aligned-multiple", "preserve", "preserve-aligned"]), this.wrap_attributes_indent_size = this._get_number("wrap_attributes_indent_size", this.indent_size), this.extra_liners = this._get_array("extra_liners", ["head", "body", "/html"]), this.inline = this._get_array("inline", ["a", "abbr", "area", "audio", "b", "bdi", "bdo", "br", "button", "canvas", "cite", "code", "data", "datalist", "del", "dfn", "em", "embed", "i", "iframe", "img", "input", "ins", "kbd", "keygen", "label", "map", "mark", "math", "meter", "noscript", "object", "output", "progress", "q", "ruby", "s", "samp", "select", "small", "span", "strong", "sub", "sup", "svg", "template", "textarea", "time", "u", "var", "video", "wbr", "text", "acronym", "big", "strike", "tt"]), this.void_elements = this._get_array("void_elements", ["area", "base", "br", "col", "embed", "hr", "img", "input", "keygen", "link", "menuitem", "meta", "param", "source", "track", "wbr", "!doctype", "?xml", "basefont", "isindex"]), this.unformatted = this._get_array("unformatted", []), this.content_unformatted = this._get_array("content_unformatted", ["pre", "textarea"]), this.unformatted_content_delimiter = this._get_characters("unformatted_content_delimiter"), this.indent_scripts = this._get_selection("indent_scripts", ["normal", "keep", "separate"]);
      }
      return e2.prototype = new t2(), Rt.Options = e2, Rt;
    }
    var Nt;
    var jt;
    var qt;
    var Mt;
    var Ft = {};
    function zt() {
      if (Nt)
        return Ft;
      Nt = 1;
      var t2 = at().Tokenizer, e2 = at().TOKEN, n2 = lt().Directives, r2 = dt().TemplatablePattern, i2 = st().Pattern, s2 = { TAG_OPEN: "TK_TAG_OPEN", TAG_CLOSE: "TK_TAG_CLOSE", ATTRIBUTE: "TK_ATTRIBUTE", EQUALS: "TK_EQUALS", VALUE: "TK_VALUE", COMMENT: "TK_COMMENT", TEXT: "TK_TEXT", UNKNOWN: "TK_UNKNOWN", START: e2.START, RAW: e2.RAW, EOF: e2.EOF }, a2 = new n2(/<\!--/, /-->/), o2 = function(e3, n3) {
        t2.call(this, e3, n3), this._current_tag_name = "";
        var s3 = new r2(this._input).read_options(this._options), a3 = new i2(this._input);
        if (this.__patterns = { word: s3.until(/[\n\r\t <]/), single_quote: s3.until_after(/'/), double_quote: s3.until_after(/"/), attribute: s3.until(/[\n\r\t =>]|\/>/), element_name: s3.until(/[\n\r\t >\/]/), handlebars_comment: a3.starting_with(/{{!--/).until_after(/--}}/), handlebars: a3.starting_with(/{{/).until_after(/}}/), handlebars_open: a3.until(/[\n\r\t }]/), handlebars_raw_close: a3.until(/}}/), comment: a3.starting_with(/<!--/).until_after(/-->/), cdata: a3.starting_with(/<!\[CDATA\[/).until_after(/]]>/), conditional_comment: a3.starting_with(/<!\[/).until_after(/]>/), processing: a3.starting_with(/<\?/).until_after(/\?>/) }, this._options.indent_handlebars && (this.__patterns.word = this.__patterns.word.exclude("handlebars")), this._unformatted_content_delimiter = null, this._options.unformatted_content_delimiter) {
          var o3 = this._input.get_literal_regexp(this._options.unformatted_content_delimiter);
          this.__patterns.unformatted_content_delimiter = a3.matching(o3).until_after(o3);
        }
      };
      return (o2.prototype = new t2())._is_comment = function(t3) {
        return false;
      }, o2.prototype._is_opening = function(t3) {
        return t3.type === s2.TAG_OPEN;
      }, o2.prototype._is_closing = function(t3, e3) {
        return t3.type === s2.TAG_CLOSE && e3 && ((t3.text === ">" || t3.text === "/>") && e3.text[0] === "<" || t3.text === "}}" && e3.text[0] === "{" && e3.text[1] === "{");
      }, o2.prototype._reset = function() {
        this._current_tag_name = "";
      }, o2.prototype._get_next_token = function(t3, e3) {
        var n3 = null;
        this._readWhitespace();
        var r3 = this._input.peek();
        return r3 === null ? this._create_token(s2.EOF, "") : n3 = (n3 = (n3 = (n3 = (n3 = (n3 = (n3 = (n3 = (n3 = n3 || this._read_open_handlebars(r3, e3)) || this._read_attribute(r3, t3, e3)) || this._read_close(r3, e3)) || this._read_raw_content(r3, t3, e3)) || this._read_content_word(r3)) || this._read_comment_or_cdata(r3)) || this._read_processing(r3)) || this._read_open(r3, e3)) || this._create_token(s2.UNKNOWN, this._input.next());
      }, o2.prototype._read_comment_or_cdata = function(t3) {
        var e3 = null, n3 = null, r3 = null;
        t3 === "<" && (this._input.peek(1) === "!" && ((n3 = this.__patterns.comment.read()) ? (r3 = a2.get_directives(n3)) && r3.ignore === "start" && (n3 += a2.readIgnored(this._input)) : n3 = this.__patterns.cdata.read()), n3 && ((e3 = this._create_token(s2.COMMENT, n3)).directives = r3));
        return e3;
      }, o2.prototype._read_processing = function(t3) {
        var e3 = null, n3 = null;
        if (t3 === "<") {
          var r3 = this._input.peek(1);
          r3 !== "!" && r3 !== "?" || (n3 = (n3 = this.__patterns.conditional_comment.read()) || this.__patterns.processing.read()), n3 && ((e3 = this._create_token(s2.COMMENT, n3)).directives = null);
        }
        return e3;
      }, o2.prototype._read_open = function(t3, e3) {
        var n3 = null, r3 = null;
        return e3 || t3 === "<" && (n3 = this._input.next(), this._input.peek() === "/" && (n3 += this._input.next()), n3 += this.__patterns.element_name.read(), r3 = this._create_token(s2.TAG_OPEN, n3)), r3;
      }, o2.prototype._read_open_handlebars = function(t3, e3) {
        var n3 = null, r3 = null;
        return e3 || this._options.indent_handlebars && t3 === "{" && this._input.peek(1) === "{" && (this._input.peek(2) === "!" ? (n3 = (n3 = this.__patterns.handlebars_comment.read()) || this.__patterns.handlebars.read(), r3 = this._create_token(s2.COMMENT, n3)) : (n3 = this.__patterns.handlebars_open.read(), r3 = this._create_token(s2.TAG_OPEN, n3))), r3;
      }, o2.prototype._read_close = function(t3, e3) {
        var n3 = null, r3 = null;
        return e3 && (e3.text[0] === "<" && (t3 === ">" || t3 === "/" && this._input.peek(1) === ">") ? (n3 = this._input.next(), t3 === "/" && (n3 += this._input.next()), r3 = this._create_token(s2.TAG_CLOSE, n3)) : e3.text[0] === "{" && t3 === "}" && this._input.peek(1) === "}" && (this._input.next(), this._input.next(), r3 = this._create_token(s2.TAG_CLOSE, "}}"))), r3;
      }, o2.prototype._read_attribute = function(t3, e3, n3) {
        var r3 = null, i3 = "";
        if (n3 && n3.text[0] === "<")
          if (t3 === "=")
            r3 = this._create_token(s2.EQUALS, this._input.next());
          else if (t3 === '"' || t3 === "'") {
            var a3 = this._input.next();
            a3 += t3 === '"' ? this.__patterns.double_quote.read() : this.__patterns.single_quote.read(), r3 = this._create_token(s2.VALUE, a3);
          } else
            (i3 = this.__patterns.attribute.read()) && (r3 = e3.type === s2.EQUALS ? this._create_token(s2.VALUE, i3) : this._create_token(s2.ATTRIBUTE, i3));
        return r3;
      }, o2.prototype._is_content_unformatted = function(t3) {
        return this._options.void_elements.indexOf(t3) === -1 && (this._options.content_unformatted.indexOf(t3) !== -1 || this._options.unformatted.indexOf(t3) !== -1);
      }, o2.prototype._read_raw_content = function(t3, e3, n3) {
        var r3 = "";
        if (n3 && n3.text[0] === "{")
          r3 = this.__patterns.handlebars_raw_close.read();
        else if (e3.type === s2.TAG_CLOSE && e3.opened.text[0] === "<" && e3.text[0] !== "/") {
          var i3 = e3.opened.text.substr(1).toLowerCase();
          if (i3 === "script" || i3 === "style") {
            var a3 = this._read_comment_or_cdata(t3);
            if (a3)
              return a3.type = s2.TEXT, a3;
            r3 = this._input.readUntil(new RegExp("</" + i3 + "[\\n\\r\\t ]*?>", "ig"));
          } else
            this._is_content_unformatted(i3) && (r3 = this._input.readUntil(new RegExp("</" + i3 + "[\\n\\r\\t ]*?>", "ig")));
        }
        return r3 ? this._create_token(s2.TEXT, r3) : null;
      }, o2.prototype._read_content_word = function(t3) {
        var e3 = "";
        if (this._options.unformatted_content_delimiter && t3 === this._options.unformatted_content_delimiter[0] && (e3 = this.__patterns.unformatted_content_delimiter.read()), e3 || (e3 = this.__patterns.word.read()), e3)
          return this._create_token(s2.TEXT, e3);
      }, Ft.Tokenizer = o2, Ft.TOKEN = s2, Ft;
    }
    function It() {
      if (jt)
        return Dt;
      jt = 1;
      var t2 = Lt().Options, e2 = N().Output, n2 = zt().Tokenizer, r2 = zt().TOKEN, i2 = /\r\n|[\r\n]/, s2 = /\r\n|[\r\n]/g, a2 = function(t3, n3) {
        this.indent_level = 0, this.alignment_size = 0, this.max_preserve_newlines = t3.max_preserve_newlines, this.preserve_newlines = t3.preserve_newlines, this._output = new e2(t3, n3);
      };
      a2.prototype.current_line_has_match = function(t3) {
        return this._output.current_line.has_match(t3);
      }, a2.prototype.set_space_before_token = function(t3, e3) {
        this._output.space_before_token = t3, this._output.non_breaking_space = e3;
      }, a2.prototype.set_wrap_point = function() {
        this._output.set_indent(this.indent_level, this.alignment_size), this._output.set_wrap_point();
      }, a2.prototype.add_raw_token = function(t3) {
        this._output.add_raw_token(t3);
      }, a2.prototype.print_preserved_newlines = function(t3) {
        var e3 = 0;
        t3.type !== r2.TEXT && t3.previous.type !== r2.TEXT && (e3 = t3.newlines ? 1 : 0), this.preserve_newlines && (e3 = t3.newlines < this.max_preserve_newlines + 1 ? t3.newlines : this.max_preserve_newlines + 1);
        for (var n3 = 0; n3 < e3; n3++)
          this.print_newline(n3 > 0);
        return e3 !== 0;
      }, a2.prototype.traverse_whitespace = function(t3) {
        return !(!t3.whitespace_before && !t3.newlines) && (this.print_preserved_newlines(t3) || (this._output.space_before_token = true), true);
      }, a2.prototype.previous_token_wrapped = function() {
        return this._output.previous_token_wrapped;
      }, a2.prototype.print_newline = function(t3) {
        this._output.add_new_line(t3);
      }, a2.prototype.print_token = function(t3) {
        t3.text && (this._output.set_indent(this.indent_level, this.alignment_size), this._output.add_token(t3.text));
      }, a2.prototype.indent = function() {
        this.indent_level++;
      }, a2.prototype.get_full_indent = function(t3) {
        return (t3 = this.indent_level + (t3 || 0)) < 1 ? "" : this._output.get_indent_string(t3);
      };
      var o2 = function(t3, e3) {
        var n3 = null, i3 = null;
        return e3.closed ? (t3 === "script" ? n3 = "text/javascript" : t3 === "style" && (n3 = "text/css"), n3 = function(t4) {
          for (var e4 = null, n4 = t4.next; n4.type !== r2.EOF && t4.closed !== n4; ) {
            if (n4.type === r2.ATTRIBUTE && n4.text === "type") {
              n4.next && n4.next.type === r2.EQUALS && n4.next.next && n4.next.next.type === r2.VALUE && (e4 = n4.next.next.text);
              break;
            }
            n4 = n4.next;
          }
          return e4;
        }(e3) || n3, n3.search("text/css") > -1 ? i3 = "css" : n3.search(/module|((text|application|dojo)\/(x-)?(javascript|ecmascript|jscript|livescript|(ld\+)?json|method|aspect))/) > -1 ? i3 = "javascript" : n3.search(/(text|application|dojo)\/(x-)?(html)/) > -1 ? i3 = "html" : n3.search(/test\/null/) > -1 && (i3 = "null"), i3) : null;
      };
      function u2(t3, e3) {
        return e3.indexOf(t3) !== -1;
      }
      function l2(t3, e3, n3) {
        this.parent = t3 || null, this.tag = e3 ? e3.tag_name : "", this.indent_level = n3 || 0, this.parser_token = e3 || null;
      }
      function c2(t3) {
        this._printer = t3, this._current_frame = null;
      }
      function _2(e3, n3, r3, i3) {
        this._source_text = e3 || "", n3 = n3 || {}, this._js_beautify = r3, this._css_beautify = i3, this._tag_stack = null;
        var s3 = new t2(n3, "html");
        this._options = s3, this._is_wrap_attributes_force = this._options.wrap_attributes.substr(0, "force".length) === "force", this._is_wrap_attributes_force_expand_multiline = this._options.wrap_attributes === "force-expand-multiline", this._is_wrap_attributes_force_aligned = this._options.wrap_attributes === "force-aligned", this._is_wrap_attributes_aligned_multiple = this._options.wrap_attributes === "aligned-multiple", this._is_wrap_attributes_preserve = this._options.wrap_attributes.substr(0, "preserve".length) === "preserve", this._is_wrap_attributes_preserve_aligned = this._options.wrap_attributes === "preserve-aligned";
      }
      c2.prototype.get_parser_token = function() {
        return this._current_frame ? this._current_frame.parser_token : null;
      }, c2.prototype.record_tag = function(t3) {
        var e3 = new l2(this._current_frame, t3, this._printer.indent_level);
        this._current_frame = e3;
      }, c2.prototype._try_pop_frame = function(t3) {
        var e3 = null;
        return t3 && (e3 = t3.parser_token, this._printer.indent_level = t3.indent_level, this._current_frame = t3.parent), e3;
      }, c2.prototype._get_frame = function(t3, e3) {
        for (var n3 = this._current_frame; n3 && t3.indexOf(n3.tag) === -1; ) {
          if (e3 && e3.indexOf(n3.tag) !== -1) {
            n3 = null;
            break;
          }
          n3 = n3.parent;
        }
        return n3;
      }, c2.prototype.try_pop = function(t3, e3) {
        var n3 = this._get_frame([t3], e3);
        return this._try_pop_frame(n3);
      }, c2.prototype.indent_to_tag = function(t3) {
        var e3 = this._get_frame(t3);
        e3 && (this._printer.indent_level = e3.indent_level);
      }, _2.prototype.beautify = function() {
        if (this._options.disabled)
          return this._source_text;
        var t3 = this._source_text, e3 = this._options.eol;
        this._options.eol === "auto" && (e3 = "\n", t3 && i2.test(t3) && (e3 = t3.match(i2)[0]));
        var o3 = (t3 = t3.replace(s2, "\n")).match(/^[\t ]*/)[0], u3 = { text: "", type: "" }, l3 = new h2(), _3 = new a2(this._options, o3), p3 = new n2(t3, this._options).tokenize();
        this._tag_stack = new c2(_3);
        for (var f3 = null, d2 = p3.next(); d2.type !== r2.EOF; )
          d2.type === r2.TAG_OPEN || d2.type === r2.COMMENT ? l3 = f3 = this._handle_tag_open(_3, d2, l3, u3) : d2.type === r2.ATTRIBUTE || d2.type === r2.EQUALS || d2.type === r2.VALUE || d2.type === r2.TEXT && !l3.tag_complete ? f3 = this._handle_inside_tag(_3, d2, l3, p3) : d2.type === r2.TAG_CLOSE ? f3 = this._handle_tag_close(_3, d2, l3) : d2.type === r2.TEXT ? f3 = this._handle_text(_3, d2, l3) : _3.add_raw_token(d2), u3 = f3, d2 = p3.next();
        return _3._output.get_code(e3);
      }, _2.prototype._handle_tag_close = function(t3, e3, n3) {
        var r3 = { text: e3.text, type: e3.type };
        return t3.alignment_size = 0, n3.tag_complete = true, t3.set_space_before_token(e3.newlines || e3.whitespace_before !== "", true), n3.is_unformatted ? t3.add_raw_token(e3) : (n3.tag_start_char === "<" && (t3.set_space_before_token(e3.text[0] === "/", true), this._is_wrap_attributes_force_expand_multiline && n3.has_wrapped_attrs && t3.print_newline(false)), t3.print_token(e3)), !n3.indent_content || n3.is_unformatted || n3.is_content_unformatted || (t3.indent(), n3.indent_content = false), n3.is_inline_element || n3.is_unformatted || n3.is_content_unformatted || t3.set_wrap_point(), r3;
      }, _2.prototype._handle_inside_tag = function(t3, e3, n3, i3) {
        var s3 = n3.has_wrapped_attrs, a3 = { text: e3.text, type: e3.type };
        if (t3.set_space_before_token(e3.newlines || e3.whitespace_before !== "", true), n3.is_unformatted)
          t3.add_raw_token(e3);
        else if (n3.tag_start_char === "{" && e3.type === r2.TEXT)
          t3.print_preserved_newlines(e3) ? (e3.newlines = 0, t3.add_raw_token(e3)) : t3.print_token(e3);
        else {
          if (e3.type === r2.ATTRIBUTE ? (t3.set_space_before_token(true), n3.attr_count += 1) : (e3.type === r2.EQUALS || e3.type === r2.VALUE && e3.previous.type === r2.EQUALS) && t3.set_space_before_token(false), e3.type === r2.ATTRIBUTE && n3.tag_start_char === "<" && ((this._is_wrap_attributes_preserve || this._is_wrap_attributes_preserve_aligned) && (t3.traverse_whitespace(e3), s3 = s3 || e3.newlines !== 0), this._is_wrap_attributes_force)) {
            var o3 = n3.attr_count > 1;
            if (this._is_wrap_attributes_force_expand_multiline && n3.attr_count === 1) {
              var u3, l3 = true, c3 = 0;
              do {
                if ((u3 = i3.peek(c3)).type === r2.ATTRIBUTE) {
                  l3 = false;
                  break;
                }
                c3 += 1;
              } while (c3 < 4 && u3.type !== r2.EOF && u3.type !== r2.TAG_CLOSE);
              o3 = !l3;
            }
            o3 && (t3.print_newline(false), s3 = true);
          }
          t3.print_token(e3), s3 = s3 || t3.previous_token_wrapped(), n3.has_wrapped_attrs = s3;
        }
        return a3;
      }, _2.prototype._handle_text = function(t3, e3, n3) {
        var r3 = { text: e3.text, type: "TK_CONTENT" };
        return n3.custom_beautifier_name ? this._print_custom_beatifier_text(t3, e3, n3) : n3.is_unformatted || n3.is_content_unformatted ? t3.add_raw_token(e3) : (t3.traverse_whitespace(e3), t3.print_token(e3)), r3;
      }, _2.prototype._print_custom_beatifier_text = function(t3, e3, n3) {
        var r3 = this;
        if (e3.text !== "") {
          var i3, s3 = e3.text, a3 = 1, o3 = "", u3 = "";
          n3.custom_beautifier_name === "javascript" && typeof this._js_beautify == "function" ? i3 = this._js_beautify : n3.custom_beautifier_name === "css" && typeof this._css_beautify == "function" ? i3 = this._css_beautify : n3.custom_beautifier_name === "html" && (i3 = function(t4, e4) {
            return new _2(t4, e4, r3._js_beautify, r3._css_beautify).beautify();
          }), this._options.indent_scripts === "keep" ? a3 = 0 : this._options.indent_scripts === "separate" && (a3 = -t3.indent_level);
          var l3 = t3.get_full_indent(a3);
          if (s3 = s3.replace(/\n[ \t]*$/, ""), n3.custom_beautifier_name !== "html" && s3[0] === "<" && s3.match(/^(<!--|<!\[CDATA\[)/)) {
            var c3 = /^(<!--[^\n]*|<!\[CDATA\[)(\n?)([ \t\n]*)([\s\S]*)(-->|]]>)$/.exec(s3);
            if (!c3)
              return void t3.add_raw_token(e3);
            o3 = l3 + c3[1] + "\n", s3 = c3[4], c3[5] && (u3 = l3 + c3[5]), s3 = s3.replace(/\n[ \t]*$/, ""), (c3[2] || c3[3].indexOf("\n") !== -1) && (c3 = c3[3].match(/[ \t]+$/)) && (e3.whitespace_before = c3[0]);
          }
          if (s3)
            if (i3) {
              var h3 = function() {
                this.eol = "\n";
              };
              h3.prototype = this._options.raw_options, s3 = i3(l3 + s3, new h3());
            } else {
              var p3 = e3.whitespace_before;
              p3 && (s3 = s3.replace(new RegExp("\n(" + p3 + ")?", "g"), "\n")), s3 = l3 + s3.replace(/\n/g, "\n" + l3);
            }
          o3 && (s3 = s3 ? o3 + s3 + "\n" + u3 : o3 + u3), t3.print_newline(false), s3 && (e3.text = s3, e3.whitespace_before = "", e3.newlines = 0, t3.add_raw_token(e3), t3.print_newline(true));
        }
      }, _2.prototype._handle_tag_open = function(t3, e3, n3, i3) {
        var s3 = this._get_tag_open_token(e3);
        return !n3.is_unformatted && !n3.is_content_unformatted || n3.is_empty_element || e3.type !== r2.TAG_OPEN || e3.text.indexOf("</") !== 0 ? (t3.traverse_whitespace(e3), this._set_tag_position(t3, e3, s3, n3, i3), s3.is_inline_element || t3.set_wrap_point(), t3.print_token(e3)) : (t3.add_raw_token(e3), s3.start_tag_token = this._tag_stack.try_pop(s3.tag_name)), (this._is_wrap_attributes_force_aligned || this._is_wrap_attributes_aligned_multiple || this._is_wrap_attributes_preserve_aligned) && (s3.alignment_size = e3.text.length + 1), s3.tag_complete || s3.is_unformatted || (t3.alignment_size = s3.alignment_size), s3;
      };
      var h2 = function(t3, e3) {
        if (this.parent = t3 || null, this.text = "", this.type = "TK_TAG_OPEN", this.tag_name = "", this.is_inline_element = false, this.is_unformatted = false, this.is_content_unformatted = false, this.is_empty_element = false, this.is_start_tag = false, this.is_end_tag = false, this.indent_content = false, this.multiline_content = false, this.custom_beautifier_name = null, this.start_tag_token = null, this.attr_count = 0, this.has_wrapped_attrs = false, this.alignment_size = 0, this.tag_complete = false, this.tag_start_char = "", this.tag_check = "", e3) {
          var n3;
          this.tag_start_char = e3.text[0], this.text = e3.text, this.tag_start_char === "<" ? (n3 = e3.text.match(/^<([^\s>]*)/), this.tag_check = n3 ? n3[1] : "") : (n3 = e3.text.match(/^{{~?(?:[\^]|#\*?)?([^\s}]+)/), this.tag_check = n3 ? n3[1] : "", (e3.text.startsWith("{{#>") || e3.text.startsWith("{{~#>")) && this.tag_check[0] === ">" && (this.tag_check === ">" && e3.next !== null ? this.tag_check = e3.next.text.split(" ")[0] : this.tag_check = e3.text.split(">")[1])), this.tag_check = this.tag_check.toLowerCase(), e3.type === r2.COMMENT && (this.tag_complete = true), this.is_start_tag = this.tag_check.charAt(0) !== "/", this.tag_name = this.is_start_tag ? this.tag_check : this.tag_check.substr(1), this.is_end_tag = !this.is_start_tag || e3.closed && e3.closed.text === "/>";
          var i3 = 2;
          this.tag_start_char === "{" && this.text.length >= 3 && this.text.charAt(2) === "~" && (i3 = 3), this.is_end_tag = this.is_end_tag || this.tag_start_char === "{" && (this.text.length < 3 || /[^#\^]/.test(this.text.charAt(i3)));
        } else
          this.tag_complete = true;
      };
      _2.prototype._get_tag_open_token = function(t3) {
        var e3 = new h2(this._tag_stack.get_parser_token(), t3);
        return e3.alignment_size = this._options.wrap_attributes_indent_size, e3.is_end_tag = e3.is_end_tag || u2(e3.tag_check, this._options.void_elements), e3.is_empty_element = e3.tag_complete || e3.is_start_tag && e3.is_end_tag, e3.is_unformatted = !e3.tag_complete && u2(e3.tag_check, this._options.unformatted), e3.is_content_unformatted = !e3.is_empty_element && u2(e3.tag_check, this._options.content_unformatted), e3.is_inline_element = u2(e3.tag_name, this._options.inline) || e3.tag_name.includes("-") || e3.tag_start_char === "{", e3;
      }, _2.prototype._set_tag_position = function(t3, e3, n3, i3, s3) {
        if (n3.is_empty_element || (n3.is_end_tag ? n3.start_tag_token = this._tag_stack.try_pop(n3.tag_name) : (this._do_optional_end_element(n3) && (n3.is_inline_element || t3.print_newline(false)), this._tag_stack.record_tag(n3), n3.tag_name !== "script" && n3.tag_name !== "style" || n3.is_unformatted || n3.is_content_unformatted || (n3.custom_beautifier_name = o2(n3.tag_check, e3)))), u2(n3.tag_check, this._options.extra_liners) && (t3.print_newline(false), t3._output.just_added_blankline() || t3.print_newline(true)), n3.is_empty_element) {
          if (n3.tag_start_char === "{" && n3.tag_check === "else")
            this._tag_stack.indent_to_tag(["if", "unless", "each"]), n3.indent_content = true, t3.current_line_has_match(/{{#if/) || t3.print_newline(false);
          n3.tag_name === "!--" && s3.type === r2.TAG_CLOSE && i3.is_end_tag && n3.text.indexOf("\n") === -1 || (n3.is_inline_element || n3.is_unformatted || t3.print_newline(false), this._calcluate_parent_multiline(t3, n3));
        } else if (n3.is_end_tag) {
          var a3 = false;
          a3 = (a3 = n3.start_tag_token && n3.start_tag_token.multiline_content) || !n3.is_inline_element && !(i3.is_inline_element || i3.is_unformatted) && !(s3.type === r2.TAG_CLOSE && n3.start_tag_token === i3) && s3.type !== "TK_CONTENT", (n3.is_content_unformatted || n3.is_unformatted) && (a3 = false), a3 && t3.print_newline(false);
        } else
          n3.indent_content = !n3.custom_beautifier_name, n3.tag_start_char === "<" && (n3.tag_name === "html" ? n3.indent_content = this._options.indent_inner_html : n3.tag_name === "head" ? n3.indent_content = this._options.indent_head_inner_html : n3.tag_name === "body" && (n3.indent_content = this._options.indent_body_inner_html)), n3.is_inline_element || n3.is_unformatted || s3.type === "TK_CONTENT" && !n3.is_content_unformatted || t3.print_newline(false), this._calcluate_parent_multiline(t3, n3);
      }, _2.prototype._calcluate_parent_multiline = function(t3, e3) {
        !e3.parent || !t3._output.just_added_newline() || (e3.is_inline_element || e3.is_unformatted) && e3.parent.is_inline_element || (e3.parent.multiline_content = true);
      };
      var p2 = ["address", "article", "aside", "blockquote", "details", "div", "dl", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "header", "hr", "main", "nav", "ol", "p", "pre", "section", "table", "ul"], f2 = ["a", "audio", "del", "ins", "map", "noscript", "video"];
      return _2.prototype._do_optional_end_element = function(t3) {
        var e3 = null;
        if (!t3.is_empty_element && t3.is_start_tag && t3.parent) {
          if (t3.tag_name === "body")
            e3 = e3 || this._tag_stack.try_pop("head");
          else if (t3.tag_name === "li")
            e3 = e3 || this._tag_stack.try_pop("li", ["ol", "ul"]);
          else if (t3.tag_name === "dd" || t3.tag_name === "dt")
            e3 = (e3 = e3 || this._tag_stack.try_pop("dt", ["dl"])) || this._tag_stack.try_pop("dd", ["dl"]);
          else if (t3.parent.tag_name === "p" && p2.indexOf(t3.tag_name) !== -1) {
            var n3 = t3.parent.parent;
            n3 && f2.indexOf(n3.tag_name) !== -1 || (e3 = e3 || this._tag_stack.try_pop("p"));
          } else
            t3.tag_name === "rp" || t3.tag_name === "rt" ? e3 = (e3 = e3 || this._tag_stack.try_pop("rt", ["ruby", "rtc"])) || this._tag_stack.try_pop("rp", ["ruby", "rtc"]) : t3.tag_name === "optgroup" ? e3 = e3 || this._tag_stack.try_pop("optgroup", ["select"]) : t3.tag_name === "option" ? e3 = e3 || this._tag_stack.try_pop("option", ["select", "datalist", "optgroup"]) : t3.tag_name === "colgroup" ? e3 = e3 || this._tag_stack.try_pop("caption", ["table"]) : t3.tag_name === "thead" ? e3 = (e3 = e3 || this._tag_stack.try_pop("caption", ["table"])) || this._tag_stack.try_pop("colgroup", ["table"]) : t3.tag_name === "tbody" || t3.tag_name === "tfoot" ? e3 = (e3 = (e3 = (e3 = e3 || this._tag_stack.try_pop("caption", ["table"])) || this._tag_stack.try_pop("colgroup", ["table"])) || this._tag_stack.try_pop("thead", ["table"])) || this._tag_stack.try_pop("tbody", ["table"]) : t3.tag_name === "tr" ? e3 = (e3 = (e3 = e3 || this._tag_stack.try_pop("caption", ["table"])) || this._tag_stack.try_pop("colgroup", ["table"])) || this._tag_stack.try_pop("tr", ["table", "thead", "tbody", "tfoot"]) : t3.tag_name !== "th" && t3.tag_name !== "td" || (e3 = (e3 = e3 || this._tag_stack.try_pop("td", ["table", "thead", "tbody", "tfoot", "tr"])) || this._tag_stack.try_pop("th", ["table", "thead", "tbody", "tfoot", "tr"]));
          return t3.parent = this._tag_stack.get_parser_token(), e3;
        }
      }, Dt.Beautifier = _2, Dt;
    }
    function Pt() {
      if (Mt)
        return S;
      Mt = 1;
      var t2 = function() {
        if (pt)
          return T;
        pt = 1;
        var t3 = mt().Beautifier, e3 = V().Options;
        return D.exports = function(e4, n3) {
          return new t3(e4, n3).beautify();
        }, T.defaultOptions = function() {
          return new e3();
        }, T;
      }(), e2 = Ct(), n2 = function() {
        if (qt)
          return St;
        qt = 1;
        var t3 = It().Beautifier, e3 = Lt().Options;
        return Tt.exports = function(e4, n3, r3, i2) {
          return new t3(e4, n3, r3, i2).beautify();
        }, St.defaultOptions = function() {
          return new e3();
        }, St;
      }();
      function r2(r3, i2, s2, a2) {
        return n2(r3, i2, s2 = s2 || t2, a2 = a2 || e2);
      }
      return r2.defaultOptions = n2.defaultOptions, S.js = t2, S.css = e2, S.html = r2, S;
    }
    !function(t2) {
      var e2 = Pt();
      e2.js_beautify = e2.js, e2.css_beautify = e2.css, e2.html_beautify = e2.html, t2.exports = function(t3, e3, n2) {
        var r2 = function(e4, n3) {
          return t3.js_beautify(e4, n3);
        };
        return r2.js = t3.js_beautify, r2.css = e3.css_beautify, r2.html = n2.html_beautify, r2.js_beautify = t3.js_beautify, r2.css_beautify = e3.css_beautify, r2.html_beautify = n2.html_beautify, r2;
      }(e2, e2, e2);
    }({ get exports() {
      return O;
    }, set exports(t2) {
      O = t2;
    } });
    var Bt = c({ __proto__: null, default: O }, [O]);
    var $t = Object.freeze({ __proto__: null, capitalize: (t2 = "") => t2.charAt(0).toUpperCase() + t2.slice(1), beautify: (t2, e2 = "html", n2) => Bt[e2](t2, { indent_size: 2, ...n2 }) });
    var Ut = { class: (t2, e2) => g(t2).forEach((t3) => {
      e2.querySelectorAll(t3).forEach((e3) => {
        e3.classList.remove(t3.replace(".", ""));
      });
    }), el: (t2, e2) => g(t2).forEach((t3) => {
      e2.querySelectorAll(t3).forEach((t4) => {
        var _a2;
        (_a2 = t4.parentElement) == null ? void 0 : _a2.removeChild(t4);
      });
    }), attr: (t2, e2) => g(t2).forEach((t3) => {
      e2.querySelectorAll(`[${t3}]`).forEach((e3) => {
        e3.removeAttribute(t3);
      });
    }), emptyAttr: (t2, e2) => g(t2).forEach((t3) => {
      e2.querySelectorAll(`[${t3}=""]`).forEach((e3) => {
        e3.removeAttribute(t3);
      });
    }), emptyTags: (t2, e2) => g(t2).forEach((t3) => {
      e2.querySelectorAll(`${t3}`).forEach((t4) => {
        var _a2;
        const e3 = (t4.innerHTML || "").trim();
        e3 !== "&nbsp;" && e3 || ((_a2 = t4.parentNode) == null ? void 0 : _a2.removeChild(t4));
      });
    }) };
    var Wt = Object.freeze({ __proto__: null, remove: Ut, parseUl: (t2, e2) => {
      var _a2;
      const { $: n2 } = t2;
      if (!e2)
        return { items: [] };
      const r2 = [];
      if (n2(e2).find("ul").length) {
        for (const t3 of n2(e2).find("> li")) {
          const e3 = ((_a2 = n2(t3).find("label")[0]) == null ? void 0 : _a2.innerHTML) || n2(t3).clone().children().remove().end().text().trim(), i2 = !n2(t3).find('[type="checkbox"][checked=""]')[0], s2 = [];
          n2(t3).find("ul li").map(function() {
            const t4 = n2(this).html().split("||").map((t5) => (t5 || "").trim());
            s2.push(t4);
          });
          const a2 = { label: e3, isOpen: i2, items: s2 };
          r2.push(a2);
        }
        return { nested: true, items: r2 };
      }
      for (const t3 of n2(e2).find("> li")) {
        const e3 = n2(t3).html().split("||").map((t4) => (t4 || "").trim());
        r2.push(e3);
      }
      return { nested: false, items: r2 };
    } });
    var Gt = {};
    var Vt = n;
    var Kt = process.platform === "win32";
    var Ht = e;
    var Zt = process.env.NODE_DEBUG && /fs/.test(process.env.NODE_DEBUG);
    function Xt(t2) {
      return typeof t2 == "function" ? t2 : function() {
        var t3;
        if (Zt) {
          var e2 = new Error();
          t3 = function(t4) {
            t4 && (e2.message = t4.message, n2(t4 = e2));
          };
        } else
          t3 = n2;
        return t3;
        function n2(t4) {
          if (t4) {
            if (process.throwDeprecation)
              throw t4;
            if (!process.noDeprecation) {
              var e3 = "fs: missing callback " + (t4.stack || t4.message);
              process.traceDeprecation ? console.trace(e3) : console.error(e3);
            }
          }
        }
      }();
    }
    if (Vt.normalize, Kt)
      var Qt = /(.*?)(?:[\/\\]+|$)/g;
    else
      Qt = /(.*?)(?:[\/]+|$)/g;
    if (Kt)
      var Jt = /^(?:[a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/][^\\\/]+)?[\\\/]*/;
    else
      Jt = /^[\/]*/;
    Gt.realpathSync = function(t2, e2) {
      if (t2 = Vt.resolve(t2), e2 && Object.prototype.hasOwnProperty.call(e2, t2))
        return e2[t2];
      var n2, r2, i2, s2, a2 = t2, o2 = {}, u2 = {};
      function l2() {
        var e3 = Jt.exec(t2);
        n2 = e3[0].length, r2 = e3[0], i2 = e3[0], s2 = "", Kt && !u2[i2] && (Ht.lstatSync(i2), u2[i2] = true);
      }
      for (l2(); n2 < t2.length; ) {
        Qt.lastIndex = n2;
        var c2 = Qt.exec(t2);
        if (s2 = r2, r2 += c2[0], i2 = s2 + c2[1], n2 = Qt.lastIndex, !(u2[i2] || e2 && e2[i2] === i2)) {
          var _2;
          if (e2 && Object.prototype.hasOwnProperty.call(e2, i2))
            _2 = e2[i2];
          else {
            var h2 = Ht.lstatSync(i2);
            if (!h2.isSymbolicLink()) {
              u2[i2] = true, e2 && (e2[i2] = i2);
              continue;
            }
            var p2 = null;
            if (!Kt) {
              var f2 = h2.dev.toString(32) + ":" + h2.ino.toString(32);
              o2.hasOwnProperty(f2) && (p2 = o2[f2]);
            }
            p2 === null && (Ht.statSync(i2), p2 = Ht.readlinkSync(i2)), _2 = Vt.resolve(s2, p2), e2 && (e2[i2] = _2), Kt || (o2[f2] = p2);
          }
          t2 = Vt.resolve(_2, t2.slice(n2)), l2();
        }
      }
      return e2 && (e2[a2] = t2), t2;
    }, Gt.realpath = function(t2, e2, n2) {
      if (typeof n2 != "function" && (n2 = Xt(e2), e2 = null), t2 = Vt.resolve(t2), e2 && Object.prototype.hasOwnProperty.call(e2, t2))
        return process.nextTick(n2.bind(null, null, e2[t2]));
      var r2, i2, s2, a2, o2 = t2, u2 = {}, l2 = {};
      function c2() {
        var e3 = Jt.exec(t2);
        r2 = e3[0].length, i2 = e3[0], s2 = e3[0], a2 = "", Kt && !l2[s2] ? Ht.lstat(s2, function(t3) {
          if (t3)
            return n2(t3);
          l2[s2] = true, _2();
        }) : process.nextTick(_2);
      }
      function _2() {
        if (r2 >= t2.length)
          return e2 && (e2[o2] = t2), n2(null, t2);
        Qt.lastIndex = r2;
        var u3 = Qt.exec(t2);
        return a2 = i2, i2 += u3[0], s2 = a2 + u3[1], r2 = Qt.lastIndex, l2[s2] || e2 && e2[s2] === s2 ? process.nextTick(_2) : e2 && Object.prototype.hasOwnProperty.call(e2, s2) ? f2(e2[s2]) : Ht.lstat(s2, h2);
      }
      function h2(t3, r3) {
        if (t3)
          return n2(t3);
        if (!r3.isSymbolicLink())
          return l2[s2] = true, e2 && (e2[s2] = s2), process.nextTick(_2);
        if (!Kt) {
          var i3 = r3.dev.toString(32) + ":" + r3.ino.toString(32);
          if (u2.hasOwnProperty(i3))
            return p2(null, u2[i3], s2);
        }
        Ht.stat(s2, function(t4) {
          if (t4)
            return n2(t4);
          Ht.readlink(s2, function(t5, e3) {
            Kt || (u2[i3] = e3), p2(t5, e3);
          });
        });
      }
      function p2(t3, r3, i3) {
        if (t3)
          return n2(t3);
        var s3 = Vt.resolve(a2, r3);
        e2 && (e2[i3] = s3), f2(s3);
      }
      function f2(e3) {
        t2 = Vt.resolve(e3, t2.slice(r2)), c2();
      }
      c2();
    };
    var Yt = oe;
    oe.realpath = oe, oe.sync = ue, oe.realpathSync = ue, oe.monkeypatch = function() {
      te.realpath = oe, te.realpathSync = ue;
    }, oe.unmonkeypatch = function() {
      te.realpath = ee, te.realpathSync = ne;
    };
    var te = e;
    var ee = te.realpath;
    var ne = te.realpathSync;
    var re = process.version;
    var ie = /^v[0-5]\./.test(re);
    var se = Gt;
    function ae(t2) {
      return t2 && t2.syscall === "realpath" && (t2.code === "ELOOP" || t2.code === "ENOMEM" || t2.code === "ENAMETOOLONG");
    }
    function oe(t2, e2, n2) {
      if (ie)
        return ee(t2, e2, n2);
      typeof e2 == "function" && (n2 = e2, e2 = null), ee(t2, e2, function(r2, i2) {
        ae(r2) ? se.realpath(t2, e2, n2) : n2(r2, i2);
      });
    }
    function ue(t2, e2) {
      if (ie)
        return ne(t2, e2);
      try {
        return ne(t2, e2);
      } catch (n2) {
        if (ae(n2))
          return se.realpathSync(t2, e2);
        throw n2;
      }
    }
    var le = typeof process == "object" && process && process.platform === "win32" ? { sep: "\\" } : { sep: "/" };
    var ce = _e;
    function _e(t2, e2, n2) {
      t2 instanceof RegExp && (t2 = he(t2, n2)), e2 instanceof RegExp && (e2 = he(e2, n2));
      var r2 = pe(t2, e2, n2);
      return r2 && { start: r2[0], end: r2[1], pre: n2.slice(0, r2[0]), body: n2.slice(r2[0] + t2.length, r2[1]), post: n2.slice(r2[1] + e2.length) };
    }
    function he(t2, e2) {
      var n2 = e2.match(t2);
      return n2 ? n2[0] : null;
    }
    function pe(t2, e2, n2) {
      var r2, i2, s2, a2, o2, u2 = n2.indexOf(t2), l2 = n2.indexOf(e2, u2 + 1), c2 = u2;
      if (u2 >= 0 && l2 > 0) {
        if (t2 === e2)
          return [u2, l2];
        for (r2 = [], s2 = n2.length; c2 >= 0 && !o2; )
          c2 == u2 ? (r2.push(c2), u2 = n2.indexOf(t2, c2 + 1)) : r2.length == 1 ? o2 = [r2.pop(), l2] : ((i2 = r2.pop()) < s2 && (s2 = i2, a2 = l2), l2 = n2.indexOf(e2, c2 + 1)), c2 = u2 < l2 && u2 >= 0 ? u2 : l2;
        r2.length && (o2 = [s2, a2]);
      }
      return o2;
    }
    _e.range = pe;
    var fe = ce;
    var de = function(t2) {
      if (!t2)
        return [];
      t2.substr(0, 2) === "{}" && (t2 = "\\{\\}" + t2.substr(2));
      return Se(function(t3) {
        return t3.split("\\\\").join(ge).split("\\{").join(me).split("\\}").join(be).split("\\,").join(ye).split("\\.").join(ke);
      }(t2), true).map(we);
    };
    var ge = "\0SLASH" + Math.random() + "\0";
    var me = "\0OPEN" + Math.random() + "\0";
    var be = "\0CLOSE" + Math.random() + "\0";
    var ye = "\0COMMA" + Math.random() + "\0";
    var ke = "\0PERIOD" + Math.random() + "\0";
    function ve(t2) {
      return parseInt(t2, 10) == t2 ? parseInt(t2, 10) : t2.charCodeAt(0);
    }
    function we(t2) {
      return t2.split(ge).join("\\").split(me).join("{").split(be).join("}").split(ye).join(",").split(ke).join(".");
    }
    function xe(t2) {
      if (!t2)
        return [""];
      var e2 = [], n2 = fe("{", "}", t2);
      if (!n2)
        return t2.split(",");
      var r2 = n2.pre, i2 = n2.body, s2 = n2.post, a2 = r2.split(",");
      a2[a2.length - 1] += "{" + i2 + "}";
      var o2 = xe(s2);
      return s2.length && (a2[a2.length - 1] += o2.shift(), a2.push.apply(a2, o2)), e2.push.apply(e2, a2), e2;
    }
    function Ee(t2) {
      return "{" + t2 + "}";
    }
    function Ae(t2) {
      return /^-?0\d/.test(t2);
    }
    function Ce(t2, e2) {
      return t2 <= e2;
    }
    function Oe(t2, e2) {
      return t2 >= e2;
    }
    function Se(t2, e2) {
      var n2 = [], r2 = fe("{", "}", t2);
      if (!r2)
        return [t2];
      var i2 = r2.pre, s2 = r2.post.length ? Se(r2.post, false) : [""];
      if (/\$$/.test(r2.pre))
        for (var a2 = 0; a2 < s2.length; a2++) {
          var o2 = i2 + "{" + r2.body + "}" + s2[a2];
          n2.push(o2);
        }
      else {
        var u2, l2, c2 = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(r2.body), _2 = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(r2.body), h2 = c2 || _2, p2 = r2.body.indexOf(",") >= 0;
        if (!h2 && !p2)
          return r2.post.match(/,.*\}/) ? Se(t2 = r2.pre + "{" + r2.body + be + r2.post) : [t2];
        if (h2)
          u2 = r2.body.split(/\.\./);
        else if ((u2 = xe(r2.body)).length === 1 && (u2 = Se(u2[0], false).map(Ee)).length === 1)
          return s2.map(function(t3) {
            return r2.pre + u2[0] + t3;
          });
        if (h2) {
          var f2 = ve(u2[0]), d2 = ve(u2[1]), g2 = Math.max(u2[0].length, u2[1].length), m2 = u2.length == 3 ? Math.abs(ve(u2[2])) : 1, b2 = Ce;
          d2 < f2 && (m2 *= -1, b2 = Oe);
          var y2 = u2.some(Ae);
          l2 = [];
          for (var k2 = f2; b2(k2, d2); k2 += m2) {
            var v2;
            if (_2)
              (v2 = String.fromCharCode(k2)) === "\\" && (v2 = "");
            else if (v2 = String(k2), y2) {
              var w2 = g2 - v2.length;
              if (w2 > 0) {
                var x2 = new Array(w2 + 1).join("0");
                v2 = k2 < 0 ? "-" + x2 + v2.slice(1) : x2 + v2;
              }
            }
            l2.push(v2);
          }
        } else {
          l2 = [];
          for (var E2 = 0; E2 < u2.length; E2++)
            l2.push.apply(l2, Se(u2[E2], false));
        }
        for (E2 = 0; E2 < l2.length; E2++)
          for (a2 = 0; a2 < s2.length; a2++) {
            o2 = i2 + l2[E2] + s2[a2];
            (!e2 || h2 || o2) && n2.push(o2);
          }
      }
      return n2;
    }
    var Te = (t2, e2, n2 = {}) => (Ue(e2), !(!n2.nocomment && e2.charAt(0) === "#") && new Ve(e2, n2).match(t2));
    var De = Te;
    var Re = le;
    Te.sep = Re.sep;
    var Le = Symbol("globstar **");
    Te.GLOBSTAR = Le;
    var Ne = de;
    var je = { "!": { open: "(?:(?!(?:", close: "))[^/]*?)" }, "?": { open: "(?:", close: ")?" }, "+": { open: "(?:", close: ")+" }, "*": { open: "(?:", close: ")*" }, "@": { open: "(?:", close: ")" } };
    var qe = "[^/]";
    var Me = qe + "*?";
    var Fe = (t2) => t2.split("").reduce((t3, e2) => (t3[e2] = true, t3), {});
    var ze = Fe("().*{}+?[]^$\\!");
    var Ie = Fe("[.(");
    var Pe = /\/+/;
    Te.filter = (t2, e2 = {}) => (n2, r2, i2) => Te(n2, t2, e2);
    var Be = (t2, e2 = {}) => {
      const n2 = {};
      return Object.keys(t2).forEach((e3) => n2[e3] = t2[e3]), Object.keys(e2).forEach((t3) => n2[t3] = e2[t3]), n2;
    };
    Te.defaults = (t2) => {
      if (!t2 || typeof t2 != "object" || !Object.keys(t2).length)
        return Te;
      const e2 = Te, n2 = (n3, r2, i2) => e2(n3, r2, Be(t2, i2));
      return n2.Minimatch = class extends e2.Minimatch {
        constructor(e3, n3) {
          super(e3, Be(t2, n3));
        }
      }, n2.Minimatch.defaults = (n3) => e2.defaults(Be(t2, n3)).Minimatch, n2.filter = (n3, r2) => e2.filter(n3, Be(t2, r2)), n2.defaults = (n3) => e2.defaults(Be(t2, n3)), n2.makeRe = (n3, r2) => e2.makeRe(n3, Be(t2, r2)), n2.braceExpand = (n3, r2) => e2.braceExpand(n3, Be(t2, r2)), n2.match = (n3, r2, i2) => e2.match(n3, r2, Be(t2, i2)), n2;
    }, Te.braceExpand = (t2, e2) => $e(t2, e2);
    var $e = (t2, e2 = {}) => (Ue(t2), e2.nobrace || !/\{(?:(?!\{).)*\}/.test(t2) ? [t2] : Ne(t2));
    var Ue = (t2) => {
      if (typeof t2 != "string")
        throw new TypeError("invalid pattern");
      if (t2.length > 65536)
        throw new TypeError("pattern is too long");
    };
    var We = Symbol("subparse");
    Te.makeRe = (t2, e2) => new Ve(t2, e2 || {}).makeRe(), Te.match = (t2, e2, n2 = {}) => {
      const r2 = new Ve(e2, n2);
      return t2 = t2.filter((t3) => r2.match(t3)), r2.options.nonull && !t2.length && t2.push(e2), t2;
    };
    var Ge = (t2) => t2.replace(/[[\]\\]/g, "\\$&");
    var Ve = class {
      constructor(t2, e2) {
        Ue(t2), e2 || (e2 = {}), this.options = e2, this.set = [], this.pattern = t2, this.windowsPathsNoEscape = !!e2.windowsPathsNoEscape || e2.allowWindowsEscape === false, this.windowsPathsNoEscape && (this.pattern = this.pattern.replace(/\\/g, "/")), this.regexp = null, this.negate = false, this.comment = false, this.empty = false, this.partial = !!e2.partial, this.make();
      }
      debug() {
      }
      make() {
        const t2 = this.pattern, e2 = this.options;
        if (!e2.nocomment && t2.charAt(0) === "#")
          return void (this.comment = true);
        if (!t2)
          return void (this.empty = true);
        this.parseNegate();
        let n2 = this.globSet = this.braceExpand();
        e2.debug && (this.debug = (...t3) => console.error(...t3)), this.debug(this.pattern, n2), n2 = this.globParts = n2.map((t3) => t3.split(Pe)), this.debug(this.pattern, n2), n2 = n2.map((t3, e3, n3) => t3.map(this.parse, this)), this.debug(this.pattern, n2), n2 = n2.filter((t3) => t3.indexOf(false) === -1), this.debug(this.pattern, n2), this.set = n2;
      }
      parseNegate() {
        if (this.options.nonegate)
          return;
        const t2 = this.pattern;
        let e2 = false, n2 = 0;
        for (let r2 = 0; r2 < t2.length && t2.charAt(r2) === "!"; r2++)
          e2 = !e2, n2++;
        n2 && (this.pattern = t2.slice(n2)), this.negate = e2;
      }
      matchOne(t2, e2, n2) {
        var r2 = this.options;
        this.debug("matchOne", { this: this, file: t2, pattern: e2 }), this.debug("matchOne", t2.length, e2.length);
        for (var i2 = 0, s2 = 0, a2 = t2.length, o2 = e2.length; i2 < a2 && s2 < o2; i2++, s2++) {
          this.debug("matchOne loop");
          var u2, l2 = e2[s2], c2 = t2[i2];
          if (this.debug(e2, l2, c2), l2 === false)
            return false;
          if (l2 === Le) {
            this.debug("GLOBSTAR", [e2, l2, c2]);
            var _2 = i2, h2 = s2 + 1;
            if (h2 === o2) {
              for (this.debug("** at the end"); i2 < a2; i2++)
                if (t2[i2] === "." || t2[i2] === ".." || !r2.dot && t2[i2].charAt(0) === ".")
                  return false;
              return true;
            }
            for (; _2 < a2; ) {
              var p2 = t2[_2];
              if (this.debug("\nglobstar while", t2, _2, e2, h2, p2), this.matchOne(t2.slice(_2), e2.slice(h2), n2))
                return this.debug("globstar found match!", _2, a2, p2), true;
              if (p2 === "." || p2 === ".." || !r2.dot && p2.charAt(0) === ".") {
                this.debug("dot detected!", t2, _2, e2, h2);
                break;
              }
              this.debug("globstar swallow a segment, and continue"), _2++;
            }
            return !(!n2 || (this.debug("\n>>> no match, partial?", t2, _2, e2, h2), _2 !== a2));
          }
          if (typeof l2 == "string" ? (u2 = c2 === l2, this.debug("string match", l2, c2, u2)) : (u2 = c2.match(l2), this.debug("pattern match", l2, c2, u2)), !u2)
            return false;
        }
        if (i2 === a2 && s2 === o2)
          return true;
        if (i2 === a2)
          return n2;
        if (s2 === o2)
          return i2 === a2 - 1 && t2[i2] === "";
        throw new Error("wtf?");
      }
      braceExpand() {
        return $e(this.pattern, this.options);
      }
      parse(t2, e2) {
        Ue(t2);
        const n2 = this.options;
        if (t2 === "**") {
          if (!n2.noglobstar)
            return Le;
          t2 = "*";
        }
        if (t2 === "")
          return "";
        let r2 = "", i2 = !!n2.nocase, s2 = false;
        const a2 = [], o2 = [];
        let u2, l2, c2, _2, h2 = false, p2 = -1, f2 = -1;
        const d2 = t2.charAt(0) === "." ? "" : n2.dot ? "(?!(?:^|\\/)\\.{1,2}(?:$|\\/))" : "(?!\\.)", g2 = () => {
          if (u2) {
            switch (u2) {
              case "*":
                r2 += Me, i2 = true;
                break;
              case "?":
                r2 += qe, i2 = true;
                break;
              default:
                r2 += "\\" + u2;
            }
            this.debug("clearStateChar %j %j", u2, r2), u2 = false;
          }
        };
        for (let e3, _3 = 0; _3 < t2.length && (e3 = t2.charAt(_3)); _3++)
          if (this.debug("%s	%s %s %j", t2, _3, r2, e3), s2) {
            if (e3 === "/")
              return false;
            ze[e3] && (r2 += "\\"), r2 += e3, s2 = false;
          } else
            switch (e3) {
              case "/":
                return false;
              case "\\":
                if (h2 && t2.charAt(_3 + 1) === "-") {
                  r2 += e3;
                  continue;
                }
                g2(), s2 = true;
                continue;
              case "?":
              case "*":
              case "+":
              case "@":
              case "!":
                if (this.debug("%s	%s %s %j <-- stateChar", t2, _3, r2, e3), h2) {
                  this.debug("  in class"), e3 === "!" && _3 === f2 + 1 && (e3 = "^"), r2 += e3;
                  continue;
                }
                this.debug("call clearStateChar %j", u2), g2(), u2 = e3, n2.noext && g2();
                continue;
              case "(":
                if (h2) {
                  r2 += "(";
                  continue;
                }
                if (!u2) {
                  r2 += "\\(";
                  continue;
                }
                a2.push({ type: u2, start: _3 - 1, reStart: r2.length, open: je[u2].open, close: je[u2].close }), r2 += u2 === "!" ? "(?:(?!(?:" : "(?:", this.debug("plType %j %j", u2, r2), u2 = false;
                continue;
              case ")":
                if (h2 || !a2.length) {
                  r2 += "\\)";
                  continue;
                }
                g2(), i2 = true, c2 = a2.pop(), r2 += c2.close, c2.type === "!" && o2.push(c2), c2.reEnd = r2.length;
                continue;
              case "|":
                if (h2 || !a2.length) {
                  r2 += "\\|";
                  continue;
                }
                g2(), r2 += "|";
                continue;
              case "[":
                if (g2(), h2) {
                  r2 += "\\" + e3;
                  continue;
                }
                h2 = true, f2 = _3, p2 = r2.length, r2 += e3;
                continue;
              case "]":
                if (_3 === f2 + 1 || !h2) {
                  r2 += "\\" + e3;
                  continue;
                }
                l2 = t2.substring(f2 + 1, _3);
                try {
                  RegExp("[" + Ge(l2.replace(/\\([^-\]])/g, "$1")) + "]"), r2 += e3;
                } catch (t3) {
                  r2 = r2.substring(0, p2) + "(?:$.)";
                }
                i2 = true, h2 = false;
                continue;
              default:
                g2(), !ze[e3] || e3 === "^" && h2 || (r2 += "\\"), r2 += e3;
            }
        for (h2 && (l2 = t2.slice(f2 + 1), _2 = this.parse(l2, We), r2 = r2.substring(0, p2) + "\\[" + _2[0], i2 = i2 || _2[1]), c2 = a2.pop(); c2; c2 = a2.pop()) {
          let t3;
          t3 = r2.slice(c2.reStart + c2.open.length), this.debug("setting tail", r2, c2), t3 = t3.replace(/((?:\\{2}){0,64})(\\?)\|/g, (t4, e4, n3) => (n3 || (n3 = "\\"), e4 + e4 + n3 + "|")), this.debug("tail=%j\n   %s", t3, t3, c2, r2);
          const e3 = c2.type === "*" ? Me : c2.type === "?" ? qe : "\\" + c2.type;
          i2 = true, r2 = r2.slice(0, c2.reStart) + e3 + "\\(" + t3;
        }
        g2(), s2 && (r2 += "\\\\");
        const m2 = Ie[r2.charAt(0)];
        for (let t3 = o2.length - 1; t3 > -1; t3--) {
          const n3 = o2[t3], i3 = r2.slice(0, n3.reStart), s3 = r2.slice(n3.reStart, n3.reEnd - 8);
          let a3 = r2.slice(n3.reEnd);
          const u3 = r2.slice(n3.reEnd - 8, n3.reEnd) + a3, l3 = i3.split("(").length - 1;
          let c3 = a3;
          for (let t4 = 0; t4 < l3; t4++)
            c3 = c3.replace(/\)[+*?]?/, "");
          a3 = c3;
          r2 = i3 + s3 + a3 + (a3 === "" && e2 !== We ? "$" : "") + u3;
        }
        if (r2 !== "" && i2 && (r2 = "(?=.)" + r2), m2 && (r2 = d2 + r2), e2 === We)
          return [r2, i2];
        if (!i2)
          return ((t3) => t3.replace(/\\(.)/g, "$1"))(t2);
        const b2 = n2.nocase ? "i" : "";
        try {
          return Object.assign(new RegExp("^" + r2 + "$", b2), { _glob: t2, _src: r2 });
        } catch (t3) {
          return new RegExp("$.");
        }
      }
      makeRe() {
        if (this.regexp || this.regexp === false)
          return this.regexp;
        const t2 = this.set;
        if (!t2.length)
          return this.regexp = false, this.regexp;
        const e2 = this.options, n2 = e2.noglobstar ? Me : e2.dot ? "(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?" : "(?:(?!(?:\\/|^)\\.).)*?", r2 = e2.nocase ? "i" : "";
        let i2 = t2.map((t3) => (t3 = t3.map((t4) => typeof t4 == "string" ? t4.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&") : t4 === Le ? Le : t4._src).reduce((t4, e3) => (t4[t4.length - 1] === Le && e3 === Le || t4.push(e3), t4), []), t3.forEach((e3, r3) => {
          e3 === Le && t3[r3 - 1] !== Le && (r3 === 0 ? t3.length > 1 ? t3[r3 + 1] = "(?:\\/|" + n2 + "\\/)?" + t3[r3 + 1] : t3[r3] = n2 : r3 === t3.length - 1 ? t3[r3 - 1] += "(?:\\/|" + n2 + ")?" : (t3[r3 - 1] += "(?:\\/|\\/" + n2 + "\\/)" + t3[r3 + 1], t3[r3 + 1] = Le));
        }), t3.filter((t4) => t4 !== Le).join("/"))).join("|");
        i2 = "^(?:" + i2 + ")$", this.negate && (i2 = "^(?!" + i2 + ").*$");
        try {
          this.regexp = new RegExp(i2, r2);
        } catch (t3) {
          this.regexp = false;
        }
        return this.regexp;
      }
      match(t2, e2 = this.partial) {
        if (this.debug("match", t2, this.pattern), this.comment)
          return false;
        if (this.empty)
          return t2 === "";
        if (t2 === "/" && e2)
          return true;
        const n2 = this.options;
        Re.sep !== "/" && (t2 = t2.split(Re.sep).join("/")), t2 = t2.split(Pe), this.debug(this.pattern, "split", t2);
        const r2 = this.set;
        let i2;
        this.debug(this.pattern, "set", r2);
        for (let e3 = t2.length - 1; e3 >= 0 && (i2 = t2[e3], !i2); e3--)
          ;
        for (let s2 = 0; s2 < r2.length; s2++) {
          const a2 = r2[s2];
          let o2 = t2;
          n2.matchBase && a2.length === 1 && (o2 = [i2]);
          if (this.matchOne(o2, a2, e2))
            return !!n2.flipNegate || !this.negate;
        }
        return !n2.flipNegate && this.negate;
      }
      static defaults(t2) {
        return Te.defaults(t2).Minimatch;
      }
    };
    Te.Minimatch = Ve;
    var Ke;
    var He = {};
    var Ze = {};
    var Xe = { get exports() {
      return Ze;
    }, set exports(t2) {
      Ze = t2;
    } };
    !function(t2) {
      try {
        var e2 = require("util");
        if (typeof e2.inherits != "function")
          throw "";
        t2.exports = e2.inherits;
      } catch (e3) {
        t2.exports = (Ke || (Ke = 1, typeof Object.create == "function" ? Xe.exports = function(t3, e4) {
          e4 && (t3.super_ = e4, t3.prototype = Object.create(e4.prototype, { constructor: { value: t3, enumerable: false, writable: true, configurable: true } }));
        } : Xe.exports = function(t3, e4) {
          if (e4) {
            t3.super_ = e4;
            var n2 = function() {
            };
            n2.prototype = e4.prototype, t3.prototype = new n2(), t3.prototype.constructor = t3;
          }
        }), Ze);
      }
    }({ get exports() {
      return He;
    }, set exports(t2) {
      He = t2;
    } }), A(He);
    var Qe = {};
    function Je(t2, e2) {
      return Object.prototype.hasOwnProperty.call(t2, e2);
    }
    Qe.setopts = function(t2, e2, n2) {
      n2 || (n2 = {});
      if (n2.matchBase && e2.indexOf("/") === -1) {
        if (n2.noglobstar)
          throw new Error("base matching requires globstar");
        e2 = "**/" + e2;
      }
      t2.silent = !!n2.silent, t2.pattern = e2, t2.strict = n2.strict !== false, t2.realpath = !!n2.realpath, t2.realpathCache = n2.realpathCache || /* @__PURE__ */ Object.create(null), t2.follow = !!n2.follow, t2.dot = !!n2.dot, t2.mark = !!n2.mark, t2.nodir = !!n2.nodir, t2.nodir && (t2.mark = true);
      t2.sync = !!n2.sync, t2.nounique = !!n2.nounique, t2.nonull = !!n2.nonull, t2.nosort = !!n2.nosort, t2.nocase = !!n2.nocase, t2.stat = !!n2.stat, t2.noprocess = !!n2.noprocess, t2.absolute = !!n2.absolute, t2.fs = n2.fs || en, t2.maxLength = n2.maxLength || 1 / 0, t2.cache = n2.cache || /* @__PURE__ */ Object.create(null), t2.statCache = n2.statCache || /* @__PURE__ */ Object.create(null), t2.symlinks = n2.symlinks || /* @__PURE__ */ Object.create(null), function(t3, e3) {
        t3.ignore = e3.ignore || [], Array.isArray(t3.ignore) || (t3.ignore = [t3.ignore]);
        t3.ignore.length && (t3.ignore = t3.ignore.map(un));
      }(t2, n2), t2.changedCwd = false;
      var r2 = process.cwd();
      Je(n2, "cwd") ? (t2.cwd = nn.resolve(n2.cwd), t2.changedCwd = t2.cwd !== r2) : t2.cwd = nn.resolve(r2);
      t2.root = n2.root || nn.resolve(t2.cwd, "/"), t2.root = nn.resolve(t2.root), t2.cwdAbs = sn(t2.cwd) ? t2.cwd : ln(t2, t2.cwd), t2.nomount = !!n2.nomount, process.platform === "win32" && (t2.root = t2.root.replace(/\\/g, "/"), t2.cwd = t2.cwd.replace(/\\/g, "/"), t2.cwdAbs = t2.cwdAbs.replace(/\\/g, "/"));
      n2.nonegate = true, n2.nocomment = true, n2.allowWindowsEscape = true, t2.minimatch = new an(e2, n2), t2.options = t2.minimatch.options;
    }, Qe.ownProp = Je, Qe.makeAbs = ln, Qe.finish = function(t2) {
      for (var e2 = t2.nounique, n2 = e2 ? [] : /* @__PURE__ */ Object.create(null), r2 = 0, i2 = t2.matches.length; r2 < i2; r2++) {
        var s2 = t2.matches[r2];
        if (s2 && Object.keys(s2).length !== 0) {
          var a2 = Object.keys(s2);
          e2 ? n2.push.apply(n2, a2) : a2.forEach(function(t3) {
            n2[t3] = true;
          });
        } else if (t2.nonull) {
          var o2 = t2.minimatch.globSet[r2];
          e2 ? n2.push(o2) : n2[o2] = true;
        }
      }
      e2 || (n2 = Object.keys(n2));
      t2.nosort || (n2 = n2.sort(on));
      if (t2.mark) {
        for (r2 = 0; r2 < n2.length; r2++)
          n2[r2] = t2._mark(n2[r2]);
        t2.nodir && (n2 = n2.filter(function(e3) {
          var n3 = !/\/$/.test(e3), r3 = t2.cache[e3] || t2.cache[ln(t2, e3)];
          return n3 && r3 && (n3 = r3 !== "DIR" && !Array.isArray(r3)), n3;
        }));
      }
      t2.ignore.length && (n2 = n2.filter(function(e3) {
        return !cn(t2, e3);
      }));
      t2.found = n2;
    }, Qe.mark = function(t2, e2) {
      var n2 = ln(t2, e2), r2 = t2.cache[n2], i2 = e2;
      if (r2) {
        var s2 = r2 === "DIR" || Array.isArray(r2), a2 = e2.slice(-1) === "/";
        if (s2 && !a2 ? i2 += "/" : !s2 && a2 && (i2 = i2.slice(0, -1)), i2 !== e2) {
          var o2 = ln(t2, i2);
          t2.statCache[o2] = t2.statCache[n2], t2.cache[o2] = t2.cache[n2];
        }
      }
      return i2;
    }, Qe.isIgnored = cn, Qe.childrenIgnored = function(t2, e2) {
      return !!t2.ignore.length && t2.ignore.some(function(t3) {
        return !(!t3.gmatcher || !t3.gmatcher.match(e2));
      });
    };
    var Ye;
    var tn;
    var en = e;
    var nn = n;
    var rn = De;
    var sn = n.isAbsolute;
    var an = rn.Minimatch;
    function on(t2, e2) {
      return t2.localeCompare(e2, "en");
    }
    function un(t2) {
      var e2 = null;
      if (t2.slice(-3) === "/**") {
        var n2 = t2.replace(/(\/\*\*)+$/, "");
        e2 = new an(n2, { dot: true });
      }
      return { matcher: new an(t2, { dot: true }), gmatcher: e2 };
    }
    function ln(t2, e2) {
      var n2 = e2;
      return n2 = e2.charAt(0) === "/" ? nn.join(t2.root, e2) : sn(e2) || e2 === "" ? e2 : t2.changedCwd ? nn.resolve(t2.cwd, e2) : nn.resolve(e2), process.platform === "win32" && (n2 = n2.replace(/\\/g, "/")), n2;
    }
    function cn(t2, e2) {
      return !!t2.ignore.length && t2.ignore.some(function(t3) {
        return t3.matcher.match(e2) || !(!t3.gmatcher || !t3.gmatcher.match(e2));
      });
    }
    var _n = function t2(e2, n2) {
      if (e2 && n2)
        return t2(e2)(n2);
      if (typeof e2 != "function")
        throw new TypeError("need wrapper function");
      return Object.keys(e2).forEach(function(t3) {
        r2[t3] = e2[t3];
      }), r2;
      function r2() {
        for (var t3 = new Array(arguments.length), n3 = 0; n3 < t3.length; n3++)
          t3[n3] = arguments[n3];
        var r3 = e2.apply(this, t3), i2 = t3[t3.length - 1];
        return typeof r3 == "function" && r3 !== i2 && Object.keys(i2).forEach(function(t4) {
          r3[t4] = i2[t4];
        }), r3;
      }
    };
    var hn = {};
    var pn = _n;
    function fn(t2) {
      var e2 = function() {
        return e2.called ? e2.value : (e2.called = true, e2.value = t2.apply(this, arguments));
      };
      return e2.called = false, e2;
    }
    function dn(t2) {
      var e2 = function() {
        if (e2.called)
          throw new Error(e2.onceError);
        return e2.called = true, e2.value = t2.apply(this, arguments);
      }, n2 = t2.name || "Function wrapped with `once`";
      return e2.onceError = n2 + " shouldn't be called more than once", e2.called = false, e2;
    }
    ({ get exports() {
      return hn;
    }, set exports(t2) {
      hn = t2;
    } }).exports = pn(fn), hn.strict = pn(dn), fn.proto = fn(function() {
      Object.defineProperty(Function.prototype, "once", { value: function() {
        return fn(this);
      }, configurable: true }), Object.defineProperty(Function.prototype, "onceStrict", { value: function() {
        return dn(this);
      }, configurable: true });
    });
    var gn;
    var mn;
    var bn = _n;
    var yn = /* @__PURE__ */ Object.create(null);
    var kn = hn;
    var vn = bn(function(t2, e2) {
      return yn[t2] ? (yn[t2].push(e2), null) : (yn[t2] = [e2], function(t3) {
        return kn(function e3() {
          var n2 = yn[t3], r2 = n2.length, i2 = wn(arguments);
          try {
            for (var s2 = 0; s2 < r2; s2++)
              n2[s2].apply(null, i2);
          } finally {
            n2.length > r2 ? (n2.splice(0, r2), process.nextTick(function() {
              e3.apply(null, i2);
            })) : delete yn[t3];
          }
        });
      }(t2));
    });
    function wn(t2) {
      for (var e2 = t2.length, n2 = [], r2 = 0; r2 < e2; r2++)
        n2[r2] = t2[r2];
      return n2;
    }
    function xn() {
      if (mn)
        return gn;
      mn = 1, gn = b2;
      var t2 = Yt, e2 = De;
      e2.Minimatch;
      var s2 = He, a2 = r.EventEmitter, o2 = n, u2 = i, l2 = n.isAbsolute, c2 = function() {
        if (tn)
          return Ye;
        tn = 1, Ye = h3, h3.GlobSync = p3;
        var t3 = Yt, e3 = De;
        e3.Minimatch, xn().Glob;
        var r2 = n, s3 = i, a3 = n.isAbsolute, o3 = Qe, u3 = o3.setopts, l3 = o3.ownProp, c3 = o3.childrenIgnored, _3 = o3.isIgnored;
        function h3(t4, e4) {
          if (typeof e4 == "function" || arguments.length === 3)
            throw new TypeError("callback provided to sync glob\nSee: https://github.com/isaacs/node-glob/issues/167");
          return new p3(t4, e4).found;
        }
        function p3(t4, e4) {
          if (!t4)
            throw new Error("must provide pattern");
          if (typeof e4 == "function" || arguments.length === 3)
            throw new TypeError("callback provided to sync glob\nSee: https://github.com/isaacs/node-glob/issues/167");
          if (!(this instanceof p3))
            return new p3(t4, e4);
          if (u3(this, t4, e4), this.noprocess)
            return this;
          var n2 = this.minimatch.set.length;
          this.matches = new Array(n2);
          for (var r3 = 0; r3 < n2; r3++)
            this._process(this.minimatch.set[r3], r3, false);
          this._finish();
        }
        return p3.prototype._finish = function() {
          if (s3.ok(this instanceof p3), this.realpath) {
            var e4 = this;
            this.matches.forEach(function(n2, r3) {
              var i2 = e4.matches[r3] = /* @__PURE__ */ Object.create(null);
              for (var s4 in n2)
                try {
                  s4 = e4._makeAbs(s4), i2[t3.realpathSync(s4, e4.realpathCache)] = true;
                } catch (t4) {
                  if (t4.syscall !== "stat")
                    throw t4;
                  i2[e4._makeAbs(s4)] = true;
                }
            });
          }
          o3.finish(this);
        }, p3.prototype._process = function(t4, n2, r3) {
          s3.ok(this instanceof p3);
          for (var i2, o4 = 0; typeof t4[o4] == "string"; )
            o4++;
          switch (o4) {
            case t4.length:
              return void this._processSimple(t4.join("/"), n2);
            case 0:
              i2 = null;
              break;
            default:
              i2 = t4.slice(0, o4).join("/");
          }
          var u4, l4 = t4.slice(o4);
          i2 === null ? u4 = "." : a3(i2) || a3(t4.map(function(t5) {
            return typeof t5 == "string" ? t5 : "[*]";
          }).join("/")) ? (i2 && a3(i2) || (i2 = "/" + i2), u4 = i2) : u4 = i2;
          var _4 = this._makeAbs(u4);
          c3(this, u4) || (l4[0] === e3.GLOBSTAR ? this._processGlobStar(i2, u4, _4, l4, n2, r3) : this._processReaddir(i2, u4, _4, l4, n2, r3));
        }, p3.prototype._processReaddir = function(t4, e4, n2, i2, s4, a4) {
          var o4 = this._readdir(n2, a4);
          if (o4) {
            for (var u4 = i2[0], l4 = !!this.minimatch.negate, c4 = u4._glob, _4 = this.dot || c4.charAt(0) === ".", h4 = [], p4 = 0; p4 < o4.length; p4++)
              ((g3 = o4[p4]).charAt(0) !== "." || _4) && (l4 && !t4 ? !g3.match(u4) : g3.match(u4)) && h4.push(g3);
            var f3 = h4.length;
            if (f3 !== 0)
              if (i2.length !== 1 || this.mark || this.stat)
                for (i2.shift(), p4 = 0; p4 < f3; p4++) {
                  var d3;
                  g3 = h4[p4], d3 = t4 ? [t4, g3] : [g3], this._process(d3.concat(i2), s4, a4);
                }
              else {
                this.matches[s4] || (this.matches[s4] = /* @__PURE__ */ Object.create(null));
                for (p4 = 0; p4 < f3; p4++) {
                  var g3 = h4[p4];
                  t4 && (g3 = t4.slice(-1) !== "/" ? t4 + "/" + g3 : t4 + g3), g3.charAt(0) !== "/" || this.nomount || (g3 = r2.join(this.root, g3)), this._emitMatch(s4, g3);
                }
              }
          }
        }, p3.prototype._emitMatch = function(t4, e4) {
          if (!_3(this, e4)) {
            var n2 = this._makeAbs(e4);
            if (this.mark && (e4 = this._mark(e4)), this.absolute && (e4 = n2), !this.matches[t4][e4]) {
              if (this.nodir) {
                var r3 = this.cache[n2];
                if (r3 === "DIR" || Array.isArray(r3))
                  return;
              }
              this.matches[t4][e4] = true, this.stat && this._stat(e4);
            }
          }
        }, p3.prototype._readdirInGlobStar = function(t4) {
          if (this.follow)
            return this._readdir(t4, false);
          var e4, n2;
          try {
            n2 = this.fs.lstatSync(t4);
          } catch (t5) {
            if (t5.code === "ENOENT")
              return null;
          }
          var r3 = n2 && n2.isSymbolicLink();
          return this.symlinks[t4] = r3, r3 || !n2 || n2.isDirectory() ? e4 = this._readdir(t4, false) : this.cache[t4] = "FILE", e4;
        }, p3.prototype._readdir = function(t4, e4) {
          if (e4 && !l3(this.symlinks, t4))
            return this._readdirInGlobStar(t4);
          if (l3(this.cache, t4)) {
            var n2 = this.cache[t4];
            if (!n2 || n2 === "FILE")
              return null;
            if (Array.isArray(n2))
              return n2;
          }
          try {
            return this._readdirEntries(t4, this.fs.readdirSync(t4));
          } catch (e5) {
            return this._readdirError(t4, e5), null;
          }
        }, p3.prototype._readdirEntries = function(t4, e4) {
          if (!this.mark && !this.stat)
            for (var n2 = 0; n2 < e4.length; n2++) {
              var r3 = e4[n2];
              r3 = t4 === "/" ? t4 + r3 : t4 + "/" + r3, this.cache[r3] = true;
            }
          return this.cache[t4] = e4, e4;
        }, p3.prototype._readdirError = function(t4, e4) {
          switch (e4.code) {
            case "ENOTSUP":
            case "ENOTDIR":
              var n2 = this._makeAbs(t4);
              if (this.cache[n2] = "FILE", n2 === this.cwdAbs) {
                var r3 = new Error(e4.code + " invalid cwd " + this.cwd);
                throw r3.path = this.cwd, r3.code = e4.code, r3;
              }
              break;
            case "ENOENT":
            case "ELOOP":
            case "ENAMETOOLONG":
            case "UNKNOWN":
              this.cache[this._makeAbs(t4)] = false;
              break;
            default:
              if (this.cache[this._makeAbs(t4)] = false, this.strict)
                throw e4;
              this.silent || console.error("glob error", e4);
          }
        }, p3.prototype._processGlobStar = function(t4, e4, n2, r3, i2, s4) {
          var a4 = this._readdir(n2, s4);
          if (a4) {
            var o4 = r3.slice(1), u4 = t4 ? [t4] : [], l4 = u4.concat(o4);
            this._process(l4, i2, false);
            var c4 = a4.length;
            if (!this.symlinks[n2] || !s4) {
              for (var _4 = 0; _4 < c4; _4++)
                if (a4[_4].charAt(0) !== "." || this.dot) {
                  var h4 = u4.concat(a4[_4], o4);
                  this._process(h4, i2, true);
                  var p4 = u4.concat(a4[_4], r3);
                  this._process(p4, i2, true);
                }
            }
          }
        }, p3.prototype._processSimple = function(t4, e4) {
          var n2 = this._stat(t4);
          if (this.matches[e4] || (this.matches[e4] = /* @__PURE__ */ Object.create(null)), n2) {
            if (t4 && a3(t4) && !this.nomount) {
              var i2 = /[\/\\]$/.test(t4);
              t4.charAt(0) === "/" ? t4 = r2.join(this.root, t4) : (t4 = r2.resolve(this.root, t4), i2 && (t4 += "/"));
            }
            process.platform === "win32" && (t4 = t4.replace(/\\/g, "/")), this._emitMatch(e4, t4);
          }
        }, p3.prototype._stat = function(t4) {
          var e4 = this._makeAbs(t4), n2 = t4.slice(-1) === "/";
          if (t4.length > this.maxLength)
            return false;
          if (!this.stat && l3(this.cache, e4)) {
            var r3 = this.cache[e4];
            if (Array.isArray(r3) && (r3 = "DIR"), !n2 || r3 === "DIR")
              return r3;
            if (n2 && r3 === "FILE")
              return false;
          }
          var i2 = this.statCache[e4];
          if (!i2) {
            var s4;
            try {
              s4 = this.fs.lstatSync(e4);
            } catch (t5) {
              if (t5 && (t5.code === "ENOENT" || t5.code === "ENOTDIR"))
                return this.statCache[e4] = false, false;
            }
            if (s4 && s4.isSymbolicLink())
              try {
                i2 = this.fs.statSync(e4);
              } catch (t5) {
                i2 = s4;
              }
            else
              i2 = s4;
          }
          return this.statCache[e4] = i2, r3 = true, i2 && (r3 = i2.isDirectory() ? "DIR" : "FILE"), this.cache[e4] = this.cache[e4] || r3, (!n2 || r3 !== "FILE") && r3;
        }, p3.prototype._mark = function(t4) {
          return o3.mark(this, t4);
        }, p3.prototype._makeAbs = function(t4) {
          return o3.makeAbs(this, t4);
        }, Ye;
      }(), _2 = Qe, h2 = _2.setopts, p2 = _2.ownProp, f2 = vn, d2 = _2.childrenIgnored, g2 = _2.isIgnored, m2 = hn;
      function b2(t3, e3, n2) {
        if (typeof e3 == "function" && (n2 = e3, e3 = {}), e3 || (e3 = {}), e3.sync) {
          if (n2)
            throw new TypeError("callback provided to sync glob");
          return c2(t3, e3);
        }
        return new k2(t3, e3, n2);
      }
      b2.sync = c2;
      var y2 = b2.GlobSync = c2.GlobSync;
      function k2(t3, e3, n2) {
        if (typeof e3 == "function" && (n2 = e3, e3 = null), e3 && e3.sync) {
          if (n2)
            throw new TypeError("callback provided to sync glob");
          return new y2(t3, e3);
        }
        if (!(this instanceof k2))
          return new k2(t3, e3, n2);
        h2(this, t3, e3), this._didRealPath = false;
        var r2 = this.minimatch.set.length;
        this.matches = new Array(r2), typeof n2 == "function" && (n2 = m2(n2), this.on("error", n2), this.on("end", function(t4) {
          n2(null, t4);
        }));
        var i2 = this;
        if (this._processing = 0, this._emitQueue = [], this._processQueue = [], this.paused = false, this.noprocess)
          return this;
        if (r2 === 0)
          return a3();
        for (var s3 = 0; s3 < r2; s3++)
          this._process(this.minimatch.set[s3], s3, false, a3);
        function a3() {
          --i2._processing, i2._processing <= 0 && i2._finish();
        }
      }
      return b2.glob = b2, b2.hasMagic = function(t3, e3) {
        var n2 = function(t4, e4) {
          if (e4 === null || typeof e4 != "object")
            return t4;
          for (var n3 = Object.keys(e4), r3 = n3.length; r3--; )
            t4[n3[r3]] = e4[n3[r3]];
          return t4;
        }({}, e3);
        n2.noprocess = true;
        var r2 = new k2(t3, n2).minimatch.set;
        if (!t3)
          return false;
        if (r2.length > 1)
          return true;
        for (var i2 = 0; i2 < r2[0].length; i2++)
          if (typeof r2[0][i2] != "string")
            return true;
        return false;
      }, b2.Glob = k2, s2(k2, a2), k2.prototype._finish = function() {
        if (u2(this instanceof k2), !this.aborted) {
          if (this.realpath && !this._didRealpath)
            return this._realpath();
          _2.finish(this), this.emit("end", this.found);
        }
      }, k2.prototype._realpath = function() {
        if (!this._didRealpath) {
          this._didRealpath = true;
          var t3 = this.matches.length;
          if (t3 === 0)
            return this._finish();
          for (var e3 = this, n2 = 0; n2 < this.matches.length; n2++)
            this._realpathSet(n2, r2);
        }
        function r2() {
          --t3 == 0 && e3._finish();
        }
      }, k2.prototype._realpathSet = function(e3, n2) {
        var r2 = this.matches[e3];
        if (!r2)
          return n2();
        var i2 = Object.keys(r2), s3 = this, a3 = i2.length;
        if (a3 === 0)
          return n2();
        var o3 = this.matches[e3] = /* @__PURE__ */ Object.create(null);
        i2.forEach(function(r3, i3) {
          r3 = s3._makeAbs(r3), t2.realpath(r3, s3.realpathCache, function(t3, i4) {
            t3 ? t3.syscall === "stat" ? o3[r3] = true : s3.emit("error", t3) : o3[i4] = true, --a3 == 0 && (s3.matches[e3] = o3, n2());
          });
        });
      }, k2.prototype._mark = function(t3) {
        return _2.mark(this, t3);
      }, k2.prototype._makeAbs = function(t3) {
        return _2.makeAbs(this, t3);
      }, k2.prototype.abort = function() {
        this.aborted = true, this.emit("abort");
      }, k2.prototype.pause = function() {
        this.paused || (this.paused = true, this.emit("pause"));
      }, k2.prototype.resume = function() {
        if (this.paused) {
          if (this.emit("resume"), this.paused = false, this._emitQueue.length) {
            var t3 = this._emitQueue.slice(0);
            this._emitQueue.length = 0;
            for (var e3 = 0; e3 < t3.length; e3++) {
              var n2 = t3[e3];
              this._emitMatch(n2[0], n2[1]);
            }
          }
          if (this._processQueue.length) {
            var r2 = this._processQueue.slice(0);
            this._processQueue.length = 0;
            for (e3 = 0; e3 < r2.length; e3++) {
              var i2 = r2[e3];
              this._processing--, this._process(i2[0], i2[1], i2[2], i2[3]);
            }
          }
        }
      }, k2.prototype._process = function(t3, n2, r2, i2) {
        if (u2(this instanceof k2), u2(typeof i2 == "function"), !this.aborted)
          if (this._processing++, this.paused)
            this._processQueue.push([t3, n2, r2, i2]);
          else {
            for (var s3, a3 = 0; typeof t3[a3] == "string"; )
              a3++;
            switch (a3) {
              case t3.length:
                return void this._processSimple(t3.join("/"), n2, i2);
              case 0:
                s3 = null;
                break;
              default:
                s3 = t3.slice(0, a3).join("/");
            }
            var o3, c3 = t3.slice(a3);
            s3 === null ? o3 = "." : l2(s3) || l2(t3.map(function(t4) {
              return typeof t4 == "string" ? t4 : "[*]";
            }).join("/")) ? (s3 && l2(s3) || (s3 = "/" + s3), o3 = s3) : o3 = s3;
            var _3 = this._makeAbs(o3);
            if (d2(this, o3))
              return i2();
            c3[0] === e2.GLOBSTAR ? this._processGlobStar(s3, o3, _3, c3, n2, r2, i2) : this._processReaddir(s3, o3, _3, c3, n2, r2, i2);
          }
      }, k2.prototype._processReaddir = function(t3, e3, n2, r2, i2, s3, a3) {
        var o3 = this;
        this._readdir(n2, s3, function(u3, l3) {
          return o3._processReaddir2(t3, e3, n2, r2, i2, s3, l3, a3);
        });
      }, k2.prototype._processReaddir2 = function(t3, e3, n2, r2, i2, s3, a3, u3) {
        if (!a3)
          return u3();
        for (var l3 = r2[0], c3 = !!this.minimatch.negate, _3 = l3._glob, h3 = this.dot || _3.charAt(0) === ".", p3 = [], f3 = 0; f3 < a3.length; f3++) {
          if ((g3 = a3[f3]).charAt(0) !== "." || h3)
            (c3 && !t3 ? !g3.match(l3) : g3.match(l3)) && p3.push(g3);
        }
        var d3 = p3.length;
        if (d3 === 0)
          return u3();
        if (r2.length === 1 && !this.mark && !this.stat) {
          this.matches[i2] || (this.matches[i2] = /* @__PURE__ */ Object.create(null));
          for (f3 = 0; f3 < d3; f3++) {
            var g3 = p3[f3];
            t3 && (g3 = t3 !== "/" ? t3 + "/" + g3 : t3 + g3), g3.charAt(0) !== "/" || this.nomount || (g3 = o2.join(this.root, g3)), this._emitMatch(i2, g3);
          }
          return u3();
        }
        r2.shift();
        for (f3 = 0; f3 < d3; f3++) {
          g3 = p3[f3];
          t3 && (g3 = t3 !== "/" ? t3 + "/" + g3 : t3 + g3), this._process([g3].concat(r2), i2, s3, u3);
        }
        u3();
      }, k2.prototype._emitMatch = function(t3, e3) {
        if (!this.aborted && !g2(this, e3))
          if (this.paused)
            this._emitQueue.push([t3, e3]);
          else {
            var n2 = l2(e3) ? e3 : this._makeAbs(e3);
            if (this.mark && (e3 = this._mark(e3)), this.absolute && (e3 = n2), !this.matches[t3][e3]) {
              if (this.nodir) {
                var r2 = this.cache[n2];
                if (r2 === "DIR" || Array.isArray(r2))
                  return;
              }
              this.matches[t3][e3] = true;
              var i2 = this.statCache[n2];
              i2 && this.emit("stat", e3, i2), this.emit("match", e3);
            }
          }
      }, k2.prototype._readdirInGlobStar = function(t3, e3) {
        if (!this.aborted) {
          if (this.follow)
            return this._readdir(t3, false, e3);
          var n2 = this, r2 = f2("lstat\0" + t3, function(r3, i2) {
            if (r3 && r3.code === "ENOENT")
              return e3();
            var s3 = i2 && i2.isSymbolicLink();
            n2.symlinks[t3] = s3, s3 || !i2 || i2.isDirectory() ? n2._readdir(t3, false, e3) : (n2.cache[t3] = "FILE", e3());
          });
          r2 && n2.fs.lstat(t3, r2);
        }
      }, k2.prototype._readdir = function(t3, e3, n2) {
        if (!this.aborted && (n2 = f2("readdir\0" + t3 + "\0" + e3, n2))) {
          if (e3 && !p2(this.symlinks, t3))
            return this._readdirInGlobStar(t3, n2);
          if (p2(this.cache, t3)) {
            var r2 = this.cache[t3];
            if (!r2 || r2 === "FILE")
              return n2();
            if (Array.isArray(r2))
              return n2(null, r2);
          }
          this.fs.readdir(t3, function(t4, e4, n3) {
            return function(r3, i2) {
              r3 ? t4._readdirError(e4, r3, n3) : t4._readdirEntries(e4, i2, n3);
            };
          }(this, t3, n2));
        }
      }, k2.prototype._readdirEntries = function(t3, e3, n2) {
        if (!this.aborted) {
          if (!this.mark && !this.stat)
            for (var r2 = 0; r2 < e3.length; r2++) {
              var i2 = e3[r2];
              i2 = t3 === "/" ? t3 + i2 : t3 + "/" + i2, this.cache[i2] = true;
            }
          return this.cache[t3] = e3, n2(null, e3);
        }
      }, k2.prototype._readdirError = function(t3, e3, n2) {
        if (!this.aborted) {
          switch (e3.code) {
            case "ENOTSUP":
            case "ENOTDIR":
              var r2 = this._makeAbs(t3);
              if (this.cache[r2] = "FILE", r2 === this.cwdAbs) {
                var i2 = new Error(e3.code + " invalid cwd " + this.cwd);
                i2.path = this.cwd, i2.code = e3.code, this.emit("error", i2), this.abort();
              }
              break;
            case "ENOENT":
            case "ELOOP":
            case "ENAMETOOLONG":
            case "UNKNOWN":
              this.cache[this._makeAbs(t3)] = false;
              break;
            default:
              this.cache[this._makeAbs(t3)] = false, this.strict && (this.emit("error", e3), this.abort()), this.silent || console.error("glob error", e3);
          }
          return n2();
        }
      }, k2.prototype._processGlobStar = function(t3, e3, n2, r2, i2, s3, a3) {
        var o3 = this;
        this._readdir(n2, s3, function(u3, l3) {
          o3._processGlobStar2(t3, e3, n2, r2, i2, s3, l3, a3);
        });
      }, k2.prototype._processGlobStar2 = function(t3, e3, n2, r2, i2, s3, a3, o3) {
        if (!a3)
          return o3();
        var u3 = r2.slice(1), l3 = t3 ? [t3] : [], c3 = l3.concat(u3);
        this._process(c3, i2, false, o3);
        var _3 = this.symlinks[n2], h3 = a3.length;
        if (_3 && s3)
          return o3();
        for (var p3 = 0; p3 < h3; p3++) {
          if (a3[p3].charAt(0) !== "." || this.dot) {
            var f3 = l3.concat(a3[p3], u3);
            this._process(f3, i2, true, o3);
            var d3 = l3.concat(a3[p3], r2);
            this._process(d3, i2, true, o3);
          }
        }
        o3();
      }, k2.prototype._processSimple = function(t3, e3, n2) {
        var r2 = this;
        this._stat(t3, function(i2, s3) {
          r2._processSimple2(t3, e3, i2, s3, n2);
        });
      }, k2.prototype._processSimple2 = function(t3, e3, n2, r2, i2) {
        if (this.matches[e3] || (this.matches[e3] = /* @__PURE__ */ Object.create(null)), !r2)
          return i2();
        if (t3 && l2(t3) && !this.nomount) {
          var s3 = /[\/\\]$/.test(t3);
          t3.charAt(0) === "/" ? t3 = o2.join(this.root, t3) : (t3 = o2.resolve(this.root, t3), s3 && (t3 += "/"));
        }
        process.platform === "win32" && (t3 = t3.replace(/\\/g, "/")), this._emitMatch(e3, t3), i2();
      }, k2.prototype._stat = function(t3, e3) {
        var n2 = this._makeAbs(t3), r2 = t3.slice(-1) === "/";
        if (t3.length > this.maxLength)
          return e3();
        if (!this.stat && p2(this.cache, n2)) {
          var i2 = this.cache[n2];
          if (Array.isArray(i2) && (i2 = "DIR"), !r2 || i2 === "DIR")
            return e3(null, i2);
          if (r2 && i2 === "FILE")
            return e3();
        }
        var s3 = this.statCache[n2];
        if (s3 !== void 0) {
          if (s3 === false)
            return e3(null, s3);
          var a3 = s3.isDirectory() ? "DIR" : "FILE";
          return r2 && a3 === "FILE" ? e3() : e3(null, a3, s3);
        }
        var o3 = this, u3 = f2("stat\0" + n2, function(r3, i3) {
          if (i3 && i3.isSymbolicLink())
            return o3.fs.stat(n2, function(r4, s4) {
              r4 ? o3._stat2(t3, n2, null, i3, e3) : o3._stat2(t3, n2, r4, s4, e3);
            });
          o3._stat2(t3, n2, r3, i3, e3);
        });
        u3 && o3.fs.lstat(n2, u3);
      }, k2.prototype._stat2 = function(t3, e3, n2, r2, i2) {
        if (n2 && (n2.code === "ENOENT" || n2.code === "ENOTDIR"))
          return this.statCache[e3] = false, i2();
        var s3 = t3.slice(-1) === "/";
        if (this.statCache[e3] = r2, e3.slice(-1) === "/" && r2 && !r2.isDirectory())
          return i2(null, false, r2);
        var a3 = true;
        return r2 && (a3 = r2.isDirectory() ? "DIR" : "FILE"), this.cache[e3] = this.cache[e3] || a3, s3 && a3 === "FILE" ? i2() : i2(null, a3, r2);
      }, gn;
    }
    var En = A(xn());
    var An = (t2, e2) => new Promise((n2, r2) => {
      En(t2, e2, (t3, e3) => {
        t3 ? r2(t3) : n2(e3);
      });
    });
    var Cn = (t2) => _.filesize(t2, { base: 2, standard: "jedec" });
    var On = Object.freeze({ __proto__: null, glob: An, prettySize: Cn, buildIndex: async (e2, { cwd: n2 } = {}, r2 = []) => ((await An(e2, { cwd: n2 })).map((e3) => {
      const i2 = t.statSync(n2 + "/" + e3);
      r2.push([e3, i2.birthtime, i2.size, Cn(i2.size), e3.split(".").pop()]);
    }), r2.sort((t2, e3) => new Date(e3[1]) - new Date(t2[1]))) });
    var Sn = new Function("try {return this===window;}catch(e){ return false;}");
    var Tn = new Function("try {return this===global;}catch(e){return false;}");
    var Dn = Object.freeze({ __proto__: null, isBrowser: Sn, isNode: Tn, isElectron: () => typeof window != "undefined" && typeof window.process == "object" && window.process.type === "renderer" || (!(typeof process == "undefined" || typeof process.versions != "object" || !process.versions.electron) || typeof navigator == "object" && typeof navigator.userAgent == "string" && navigator.userAgent.indexOf("Electron") >= 0) });
    var Rn = (t2) => {
      const e2 = a(t2);
      return { frontmatter: e2.attributes, body: e2.body };
    };
    var Ln = Object.freeze({ __proto__: null, parseFrontmatter: Rn });
    var Nn = Object.freeze({ __proto__: null, isDark: () => window.matchMedia && window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "", isMac: () => navigator.platform.indexOf("Mac") > -1, isWindows: () => navigator.platform.indexOf("Win") > -1, scrollTo: (t2, e2 = 0, n2) => $("html, body").animate({ scrollTop: $(t2).offset().top - e2 }, n2), pageHeight: () => {
      const t2 = document.body, e2 = document.documentElement;
      return Math.max(t2.scrollHeight, t2.offsetHeight, e2.clientHeight, e2.scrollHeight, e2.offsetHeight);
    }, ls: function(t2, e2) {
      if (localStorage == null)
        return console.log("Local storage not supported!");
      try {
        let n2 = "";
        return e2 !== void 0 ? (localStorage.setItem(t2, e2), n2 = e2) : n2 = e2 === null ? localStorage.removeItem(t2) : localStorage.getItem(t2), n2 ? n2.replace(/(\r\n|\n|\r)/gm, "") : n2;
      } catch (t3) {
        const e3 = "Unable to store local data. Are you using Private Browsing?";
        console.log(/QUOTA_EXCEEDED_ERR/.test(t3) ? e3 : t3);
      }
    } });
    var jn = { g: h, c: d, o: x, a: b, s: $t, dom: Wt, fs: t, file: On, node: Dn, md: Ln };
    Sn() && (jn.w = Nn);
    var qn = class {
      constructor(t2, e2) {
        __publicField(this, "type");
        __publicField(this, "pklib");
        __publicField(this, "base");
        __publicField(this, "customWrite");
        __publicField(this, "lsFiles", async (t2 = "md") => {
          const { utils: e2, cfg: n2 } = this.pklib, r2 = `${this.base}/**/*.${t2}`;
          let i2 = await e2.file.glob(r2);
          i2 = i2.map((t3) => t3.replace(`${this.base}/`, ""));
          const s2 = e2.a.asArray(n2(`${this.type}.include`) || []), a2 = e2.a.asArray(n2(`${this.type}.exclude`) || []);
          return i2.filter((t3) => {
            const e3 = !s2.length || s2.find((e4) => t3.search(new RegExp(e4)) >= 0 && e4), n3 = a2.find((e4) => t3.search(new RegExp(e4)) >= 0 && e4);
            return e3 && !n3;
          });
        });
        this.pklib = t2, this.type = e2;
      }
      setBase(t2) {
        this.base = t2 || this.base;
      }
      toPath(t2) {
        if (!this.base)
          throw new Error("folder has no base");
        return t2 = `${this.base}/${t2[0] == "/" ? t2.slice(1) : t2}`;
      }
      async write(e2, n2, r2) {
        return this.customWrite ? this.customWrite(e2, n2, r2) : (await t.outputFile(this.toPath(e2), n2, r2), e2);
      }
      async read(e2, n2) {
        return t.readFile(this.toPath(e2), n2);
      }
      async fileExist(e2) {
        return await t.existsSync(this.toPath(e2));
      }
      async dumpAssets(e2, n2) {
        const r2 = Object.values(e2);
        return Promise.all(r2.map(async (e3) => {
          try {
            const r3 = this.pklib.vault.toPath(e3.path);
            e3.url;
            if (!e3.url)
              throw new Error("asset is missing an url");
            if (await this.fileExist(e3.url))
              return;
            const i2 = t.readFileSync(r3, { encoding: n2 });
            return await this.write(e3.url, i2, { encoding: n2 }), e3.url;
          } catch (t2) {
            e3.type = "error", e3.err = t2.message || t2, this.pklib.parser.index(e3);
          }
        }));
      }
      async dumpNotes(t2, e2) {
        const n2 = Object.values(t2);
        return Promise.all(n2.map(async (t3) => {
          try {
            const { content: e3, url: n3 } = t3;
            if (!n3 || !e3)
              throw new Error("asset has no url or content");
            return await this.write(n3, e3), n3;
          } catch (e3) {
            t3.type = "error", t3.err = e3.message || e3, this.pklib.parser.index(t3);
          }
        }));
      }
    };
    var Mn = {};
    var Fn = { get exports() {
      return Mn;
    }, set exports(t2) {
      Mn = t2;
    } };
    var zn = {};
    var In = {};
    var Pn = { get exports() {
      return In;
    }, set exports(t2) {
      In = t2;
    } };
    var Bn = { Aacute: "\xC1", aacute: "\xE1", Abreve: "\u0102", abreve: "\u0103", ac: "\u223E", acd: "\u223F", acE: "\u223E\u0333", Acirc: "\xC2", acirc: "\xE2", acute: "\xB4", Acy: "\u0410", acy: "\u0430", AElig: "\xC6", aelig: "\xE6", af: "\u2061", Afr: "\u{1D504}", afr: "\u{1D51E}", Agrave: "\xC0", agrave: "\xE0", alefsym: "\u2135", aleph: "\u2135", Alpha: "\u0391", alpha: "\u03B1", Amacr: "\u0100", amacr: "\u0101", amalg: "\u2A3F", amp: "&", AMP: "&", andand: "\u2A55", And: "\u2A53", and: "\u2227", andd: "\u2A5C", andslope: "\u2A58", andv: "\u2A5A", ang: "\u2220", ange: "\u29A4", angle: "\u2220", angmsdaa: "\u29A8", angmsdab: "\u29A9", angmsdac: "\u29AA", angmsdad: "\u29AB", angmsdae: "\u29AC", angmsdaf: "\u29AD", angmsdag: "\u29AE", angmsdah: "\u29AF", angmsd: "\u2221", angrt: "\u221F", angrtvb: "\u22BE", angrtvbd: "\u299D", angsph: "\u2222", angst: "\xC5", angzarr: "\u237C", Aogon: "\u0104", aogon: "\u0105", Aopf: "\u{1D538}", aopf: "\u{1D552}", apacir: "\u2A6F", ap: "\u2248", apE: "\u2A70", ape: "\u224A", apid: "\u224B", apos: "'", ApplyFunction: "\u2061", approx: "\u2248", approxeq: "\u224A", Aring: "\xC5", aring: "\xE5", Ascr: "\u{1D49C}", ascr: "\u{1D4B6}", Assign: "\u2254", ast: "*", asymp: "\u2248", asympeq: "\u224D", Atilde: "\xC3", atilde: "\xE3", Auml: "\xC4", auml: "\xE4", awconint: "\u2233", awint: "\u2A11", backcong: "\u224C", backepsilon: "\u03F6", backprime: "\u2035", backsim: "\u223D", backsimeq: "\u22CD", Backslash: "\u2216", Barv: "\u2AE7", barvee: "\u22BD", barwed: "\u2305", Barwed: "\u2306", barwedge: "\u2305", bbrk: "\u23B5", bbrktbrk: "\u23B6", bcong: "\u224C", Bcy: "\u0411", bcy: "\u0431", bdquo: "\u201E", becaus: "\u2235", because: "\u2235", Because: "\u2235", bemptyv: "\u29B0", bepsi: "\u03F6", bernou: "\u212C", Bernoullis: "\u212C", Beta: "\u0392", beta: "\u03B2", beth: "\u2136", between: "\u226C", Bfr: "\u{1D505}", bfr: "\u{1D51F}", bigcap: "\u22C2", bigcirc: "\u25EF", bigcup: "\u22C3", bigodot: "\u2A00", bigoplus: "\u2A01", bigotimes: "\u2A02", bigsqcup: "\u2A06", bigstar: "\u2605", bigtriangledown: "\u25BD", bigtriangleup: "\u25B3", biguplus: "\u2A04", bigvee: "\u22C1", bigwedge: "\u22C0", bkarow: "\u290D", blacklozenge: "\u29EB", blacksquare: "\u25AA", blacktriangle: "\u25B4", blacktriangledown: "\u25BE", blacktriangleleft: "\u25C2", blacktriangleright: "\u25B8", blank: "\u2423", blk12: "\u2592", blk14: "\u2591", blk34: "\u2593", block: "\u2588", bne: "=\u20E5", bnequiv: "\u2261\u20E5", bNot: "\u2AED", bnot: "\u2310", Bopf: "\u{1D539}", bopf: "\u{1D553}", bot: "\u22A5", bottom: "\u22A5", bowtie: "\u22C8", boxbox: "\u29C9", boxdl: "\u2510", boxdL: "\u2555", boxDl: "\u2556", boxDL: "\u2557", boxdr: "\u250C", boxdR: "\u2552", boxDr: "\u2553", boxDR: "\u2554", boxh: "\u2500", boxH: "\u2550", boxhd: "\u252C", boxHd: "\u2564", boxhD: "\u2565", boxHD: "\u2566", boxhu: "\u2534", boxHu: "\u2567", boxhU: "\u2568", boxHU: "\u2569", boxminus: "\u229F", boxplus: "\u229E", boxtimes: "\u22A0", boxul: "\u2518", boxuL: "\u255B", boxUl: "\u255C", boxUL: "\u255D", boxur: "\u2514", boxuR: "\u2558", boxUr: "\u2559", boxUR: "\u255A", boxv: "\u2502", boxV: "\u2551", boxvh: "\u253C", boxvH: "\u256A", boxVh: "\u256B", boxVH: "\u256C", boxvl: "\u2524", boxvL: "\u2561", boxVl: "\u2562", boxVL: "\u2563", boxvr: "\u251C", boxvR: "\u255E", boxVr: "\u255F", boxVR: "\u2560", bprime: "\u2035", breve: "\u02D8", Breve: "\u02D8", brvbar: "\xA6", bscr: "\u{1D4B7}", Bscr: "\u212C", bsemi: "\u204F", bsim: "\u223D", bsime: "\u22CD", bsolb: "\u29C5", bsol: "\\", bsolhsub: "\u27C8", bull: "\u2022", bullet: "\u2022", bump: "\u224E", bumpE: "\u2AAE", bumpe: "\u224F", Bumpeq: "\u224E", bumpeq: "\u224F", Cacute: "\u0106", cacute: "\u0107", capand: "\u2A44", capbrcup: "\u2A49", capcap: "\u2A4B", cap: "\u2229", Cap: "\u22D2", capcup: "\u2A47", capdot: "\u2A40", CapitalDifferentialD: "\u2145", caps: "\u2229\uFE00", caret: "\u2041", caron: "\u02C7", Cayleys: "\u212D", ccaps: "\u2A4D", Ccaron: "\u010C", ccaron: "\u010D", Ccedil: "\xC7", ccedil: "\xE7", Ccirc: "\u0108", ccirc: "\u0109", Cconint: "\u2230", ccups: "\u2A4C", ccupssm: "\u2A50", Cdot: "\u010A", cdot: "\u010B", cedil: "\xB8", Cedilla: "\xB8", cemptyv: "\u29B2", cent: "\xA2", centerdot: "\xB7", CenterDot: "\xB7", cfr: "\u{1D520}", Cfr: "\u212D", CHcy: "\u0427", chcy: "\u0447", check: "\u2713", checkmark: "\u2713", Chi: "\u03A7", chi: "\u03C7", circ: "\u02C6", circeq: "\u2257", circlearrowleft: "\u21BA", circlearrowright: "\u21BB", circledast: "\u229B", circledcirc: "\u229A", circleddash: "\u229D", CircleDot: "\u2299", circledR: "\xAE", circledS: "\u24C8", CircleMinus: "\u2296", CirclePlus: "\u2295", CircleTimes: "\u2297", cir: "\u25CB", cirE: "\u29C3", cire: "\u2257", cirfnint: "\u2A10", cirmid: "\u2AEF", cirscir: "\u29C2", ClockwiseContourIntegral: "\u2232", CloseCurlyDoubleQuote: "\u201D", CloseCurlyQuote: "\u2019", clubs: "\u2663", clubsuit: "\u2663", colon: ":", Colon: "\u2237", Colone: "\u2A74", colone: "\u2254", coloneq: "\u2254", comma: ",", commat: "@", comp: "\u2201", compfn: "\u2218", complement: "\u2201", complexes: "\u2102", cong: "\u2245", congdot: "\u2A6D", Congruent: "\u2261", conint: "\u222E", Conint: "\u222F", ContourIntegral: "\u222E", copf: "\u{1D554}", Copf: "\u2102", coprod: "\u2210", Coproduct: "\u2210", copy: "\xA9", COPY: "\xA9", copysr: "\u2117", CounterClockwiseContourIntegral: "\u2233", crarr: "\u21B5", cross: "\u2717", Cross: "\u2A2F", Cscr: "\u{1D49E}", cscr: "\u{1D4B8}", csub: "\u2ACF", csube: "\u2AD1", csup: "\u2AD0", csupe: "\u2AD2", ctdot: "\u22EF", cudarrl: "\u2938", cudarrr: "\u2935", cuepr: "\u22DE", cuesc: "\u22DF", cularr: "\u21B6", cularrp: "\u293D", cupbrcap: "\u2A48", cupcap: "\u2A46", CupCap: "\u224D", cup: "\u222A", Cup: "\u22D3", cupcup: "\u2A4A", cupdot: "\u228D", cupor: "\u2A45", cups: "\u222A\uFE00", curarr: "\u21B7", curarrm: "\u293C", curlyeqprec: "\u22DE", curlyeqsucc: "\u22DF", curlyvee: "\u22CE", curlywedge: "\u22CF", curren: "\xA4", curvearrowleft: "\u21B6", curvearrowright: "\u21B7", cuvee: "\u22CE", cuwed: "\u22CF", cwconint: "\u2232", cwint: "\u2231", cylcty: "\u232D", dagger: "\u2020", Dagger: "\u2021", daleth: "\u2138", darr: "\u2193", Darr: "\u21A1", dArr: "\u21D3", dash: "\u2010", Dashv: "\u2AE4", dashv: "\u22A3", dbkarow: "\u290F", dblac: "\u02DD", Dcaron: "\u010E", dcaron: "\u010F", Dcy: "\u0414", dcy: "\u0434", ddagger: "\u2021", ddarr: "\u21CA", DD: "\u2145", dd: "\u2146", DDotrahd: "\u2911", ddotseq: "\u2A77", deg: "\xB0", Del: "\u2207", Delta: "\u0394", delta: "\u03B4", demptyv: "\u29B1", dfisht: "\u297F", Dfr: "\u{1D507}", dfr: "\u{1D521}", dHar: "\u2965", dharl: "\u21C3", dharr: "\u21C2", DiacriticalAcute: "\xB4", DiacriticalDot: "\u02D9", DiacriticalDoubleAcute: "\u02DD", DiacriticalGrave: "`", DiacriticalTilde: "\u02DC", diam: "\u22C4", diamond: "\u22C4", Diamond: "\u22C4", diamondsuit: "\u2666", diams: "\u2666", die: "\xA8", DifferentialD: "\u2146", digamma: "\u03DD", disin: "\u22F2", div: "\xF7", divide: "\xF7", divideontimes: "\u22C7", divonx: "\u22C7", DJcy: "\u0402", djcy: "\u0452", dlcorn: "\u231E", dlcrop: "\u230D", dollar: "$", Dopf: "\u{1D53B}", dopf: "\u{1D555}", Dot: "\xA8", dot: "\u02D9", DotDot: "\u20DC", doteq: "\u2250", doteqdot: "\u2251", DotEqual: "\u2250", dotminus: "\u2238", dotplus: "\u2214", dotsquare: "\u22A1", doublebarwedge: "\u2306", DoubleContourIntegral: "\u222F", DoubleDot: "\xA8", DoubleDownArrow: "\u21D3", DoubleLeftArrow: "\u21D0", DoubleLeftRightArrow: "\u21D4", DoubleLeftTee: "\u2AE4", DoubleLongLeftArrow: "\u27F8", DoubleLongLeftRightArrow: "\u27FA", DoubleLongRightArrow: "\u27F9", DoubleRightArrow: "\u21D2", DoubleRightTee: "\u22A8", DoubleUpArrow: "\u21D1", DoubleUpDownArrow: "\u21D5", DoubleVerticalBar: "\u2225", DownArrowBar: "\u2913", downarrow: "\u2193", DownArrow: "\u2193", Downarrow: "\u21D3", DownArrowUpArrow: "\u21F5", DownBreve: "\u0311", downdownarrows: "\u21CA", downharpoonleft: "\u21C3", downharpoonright: "\u21C2", DownLeftRightVector: "\u2950", DownLeftTeeVector: "\u295E", DownLeftVectorBar: "\u2956", DownLeftVector: "\u21BD", DownRightTeeVector: "\u295F", DownRightVectorBar: "\u2957", DownRightVector: "\u21C1", DownTeeArrow: "\u21A7", DownTee: "\u22A4", drbkarow: "\u2910", drcorn: "\u231F", drcrop: "\u230C", Dscr: "\u{1D49F}", dscr: "\u{1D4B9}", DScy: "\u0405", dscy: "\u0455", dsol: "\u29F6", Dstrok: "\u0110", dstrok: "\u0111", dtdot: "\u22F1", dtri: "\u25BF", dtrif: "\u25BE", duarr: "\u21F5", duhar: "\u296F", dwangle: "\u29A6", DZcy: "\u040F", dzcy: "\u045F", dzigrarr: "\u27FF", Eacute: "\xC9", eacute: "\xE9", easter: "\u2A6E", Ecaron: "\u011A", ecaron: "\u011B", Ecirc: "\xCA", ecirc: "\xEA", ecir: "\u2256", ecolon: "\u2255", Ecy: "\u042D", ecy: "\u044D", eDDot: "\u2A77", Edot: "\u0116", edot: "\u0117", eDot: "\u2251", ee: "\u2147", efDot: "\u2252", Efr: "\u{1D508}", efr: "\u{1D522}", eg: "\u2A9A", Egrave: "\xC8", egrave: "\xE8", egs: "\u2A96", egsdot: "\u2A98", el: "\u2A99", Element: "\u2208", elinters: "\u23E7", ell: "\u2113", els: "\u2A95", elsdot: "\u2A97", Emacr: "\u0112", emacr: "\u0113", empty: "\u2205", emptyset: "\u2205", EmptySmallSquare: "\u25FB", emptyv: "\u2205", EmptyVerySmallSquare: "\u25AB", emsp13: "\u2004", emsp14: "\u2005", emsp: "\u2003", ENG: "\u014A", eng: "\u014B", ensp: "\u2002", Eogon: "\u0118", eogon: "\u0119", Eopf: "\u{1D53C}", eopf: "\u{1D556}", epar: "\u22D5", eparsl: "\u29E3", eplus: "\u2A71", epsi: "\u03B5", Epsilon: "\u0395", epsilon: "\u03B5", epsiv: "\u03F5", eqcirc: "\u2256", eqcolon: "\u2255", eqsim: "\u2242", eqslantgtr: "\u2A96", eqslantless: "\u2A95", Equal: "\u2A75", equals: "=", EqualTilde: "\u2242", equest: "\u225F", Equilibrium: "\u21CC", equiv: "\u2261", equivDD: "\u2A78", eqvparsl: "\u29E5", erarr: "\u2971", erDot: "\u2253", escr: "\u212F", Escr: "\u2130", esdot: "\u2250", Esim: "\u2A73", esim: "\u2242", Eta: "\u0397", eta: "\u03B7", ETH: "\xD0", eth: "\xF0", Euml: "\xCB", euml: "\xEB", euro: "\u20AC", excl: "!", exist: "\u2203", Exists: "\u2203", expectation: "\u2130", exponentiale: "\u2147", ExponentialE: "\u2147", fallingdotseq: "\u2252", Fcy: "\u0424", fcy: "\u0444", female: "\u2640", ffilig: "\uFB03", fflig: "\uFB00", ffllig: "\uFB04", Ffr: "\u{1D509}", ffr: "\u{1D523}", filig: "\uFB01", FilledSmallSquare: "\u25FC", FilledVerySmallSquare: "\u25AA", fjlig: "fj", flat: "\u266D", fllig: "\uFB02", fltns: "\u25B1", fnof: "\u0192", Fopf: "\u{1D53D}", fopf: "\u{1D557}", forall: "\u2200", ForAll: "\u2200", fork: "\u22D4", forkv: "\u2AD9", Fouriertrf: "\u2131", fpartint: "\u2A0D", frac12: "\xBD", frac13: "\u2153", frac14: "\xBC", frac15: "\u2155", frac16: "\u2159", frac18: "\u215B", frac23: "\u2154", frac25: "\u2156", frac34: "\xBE", frac35: "\u2157", frac38: "\u215C", frac45: "\u2158", frac56: "\u215A", frac58: "\u215D", frac78: "\u215E", frasl: "\u2044", frown: "\u2322", fscr: "\u{1D4BB}", Fscr: "\u2131", gacute: "\u01F5", Gamma: "\u0393", gamma: "\u03B3", Gammad: "\u03DC", gammad: "\u03DD", gap: "\u2A86", Gbreve: "\u011E", gbreve: "\u011F", Gcedil: "\u0122", Gcirc: "\u011C", gcirc: "\u011D", Gcy: "\u0413", gcy: "\u0433", Gdot: "\u0120", gdot: "\u0121", ge: "\u2265", gE: "\u2267", gEl: "\u2A8C", gel: "\u22DB", geq: "\u2265", geqq: "\u2267", geqslant: "\u2A7E", gescc: "\u2AA9", ges: "\u2A7E", gesdot: "\u2A80", gesdoto: "\u2A82", gesdotol: "\u2A84", gesl: "\u22DB\uFE00", gesles: "\u2A94", Gfr: "\u{1D50A}", gfr: "\u{1D524}", gg: "\u226B", Gg: "\u22D9", ggg: "\u22D9", gimel: "\u2137", GJcy: "\u0403", gjcy: "\u0453", gla: "\u2AA5", gl: "\u2277", glE: "\u2A92", glj: "\u2AA4", gnap: "\u2A8A", gnapprox: "\u2A8A", gne: "\u2A88", gnE: "\u2269", gneq: "\u2A88", gneqq: "\u2269", gnsim: "\u22E7", Gopf: "\u{1D53E}", gopf: "\u{1D558}", grave: "`", GreaterEqual: "\u2265", GreaterEqualLess: "\u22DB", GreaterFullEqual: "\u2267", GreaterGreater: "\u2AA2", GreaterLess: "\u2277", GreaterSlantEqual: "\u2A7E", GreaterTilde: "\u2273", Gscr: "\u{1D4A2}", gscr: "\u210A", gsim: "\u2273", gsime: "\u2A8E", gsiml: "\u2A90", gtcc: "\u2AA7", gtcir: "\u2A7A", gt: ">", GT: ">", Gt: "\u226B", gtdot: "\u22D7", gtlPar: "\u2995", gtquest: "\u2A7C", gtrapprox: "\u2A86", gtrarr: "\u2978", gtrdot: "\u22D7", gtreqless: "\u22DB", gtreqqless: "\u2A8C", gtrless: "\u2277", gtrsim: "\u2273", gvertneqq: "\u2269\uFE00", gvnE: "\u2269\uFE00", Hacek: "\u02C7", hairsp: "\u200A", half: "\xBD", hamilt: "\u210B", HARDcy: "\u042A", hardcy: "\u044A", harrcir: "\u2948", harr: "\u2194", hArr: "\u21D4", harrw: "\u21AD", Hat: "^", hbar: "\u210F", Hcirc: "\u0124", hcirc: "\u0125", hearts: "\u2665", heartsuit: "\u2665", hellip: "\u2026", hercon: "\u22B9", hfr: "\u{1D525}", Hfr: "\u210C", HilbertSpace: "\u210B", hksearow: "\u2925", hkswarow: "\u2926", hoarr: "\u21FF", homtht: "\u223B", hookleftarrow: "\u21A9", hookrightarrow: "\u21AA", hopf: "\u{1D559}", Hopf: "\u210D", horbar: "\u2015", HorizontalLine: "\u2500", hscr: "\u{1D4BD}", Hscr: "\u210B", hslash: "\u210F", Hstrok: "\u0126", hstrok: "\u0127", HumpDownHump: "\u224E", HumpEqual: "\u224F", hybull: "\u2043", hyphen: "\u2010", Iacute: "\xCD", iacute: "\xED", ic: "\u2063", Icirc: "\xCE", icirc: "\xEE", Icy: "\u0418", icy: "\u0438", Idot: "\u0130", IEcy: "\u0415", iecy: "\u0435", iexcl: "\xA1", iff: "\u21D4", ifr: "\u{1D526}", Ifr: "\u2111", Igrave: "\xCC", igrave: "\xEC", ii: "\u2148", iiiint: "\u2A0C", iiint: "\u222D", iinfin: "\u29DC", iiota: "\u2129", IJlig: "\u0132", ijlig: "\u0133", Imacr: "\u012A", imacr: "\u012B", image: "\u2111", ImaginaryI: "\u2148", imagline: "\u2110", imagpart: "\u2111", imath: "\u0131", Im: "\u2111", imof: "\u22B7", imped: "\u01B5", Implies: "\u21D2", incare: "\u2105", in: "\u2208", infin: "\u221E", infintie: "\u29DD", inodot: "\u0131", intcal: "\u22BA", int: "\u222B", Int: "\u222C", integers: "\u2124", Integral: "\u222B", intercal: "\u22BA", Intersection: "\u22C2", intlarhk: "\u2A17", intprod: "\u2A3C", InvisibleComma: "\u2063", InvisibleTimes: "\u2062", IOcy: "\u0401", iocy: "\u0451", Iogon: "\u012E", iogon: "\u012F", Iopf: "\u{1D540}", iopf: "\u{1D55A}", Iota: "\u0399", iota: "\u03B9", iprod: "\u2A3C", iquest: "\xBF", iscr: "\u{1D4BE}", Iscr: "\u2110", isin: "\u2208", isindot: "\u22F5", isinE: "\u22F9", isins: "\u22F4", isinsv: "\u22F3", isinv: "\u2208", it: "\u2062", Itilde: "\u0128", itilde: "\u0129", Iukcy: "\u0406", iukcy: "\u0456", Iuml: "\xCF", iuml: "\xEF", Jcirc: "\u0134", jcirc: "\u0135", Jcy: "\u0419", jcy: "\u0439", Jfr: "\u{1D50D}", jfr: "\u{1D527}", jmath: "\u0237", Jopf: "\u{1D541}", jopf: "\u{1D55B}", Jscr: "\u{1D4A5}", jscr: "\u{1D4BF}", Jsercy: "\u0408", jsercy: "\u0458", Jukcy: "\u0404", jukcy: "\u0454", Kappa: "\u039A", kappa: "\u03BA", kappav: "\u03F0", Kcedil: "\u0136", kcedil: "\u0137", Kcy: "\u041A", kcy: "\u043A", Kfr: "\u{1D50E}", kfr: "\u{1D528}", kgreen: "\u0138", KHcy: "\u0425", khcy: "\u0445", KJcy: "\u040C", kjcy: "\u045C", Kopf: "\u{1D542}", kopf: "\u{1D55C}", Kscr: "\u{1D4A6}", kscr: "\u{1D4C0}", lAarr: "\u21DA", Lacute: "\u0139", lacute: "\u013A", laemptyv: "\u29B4", lagran: "\u2112", Lambda: "\u039B", lambda: "\u03BB", lang: "\u27E8", Lang: "\u27EA", langd: "\u2991", langle: "\u27E8", lap: "\u2A85", Laplacetrf: "\u2112", laquo: "\xAB", larrb: "\u21E4", larrbfs: "\u291F", larr: "\u2190", Larr: "\u219E", lArr: "\u21D0", larrfs: "\u291D", larrhk: "\u21A9", larrlp: "\u21AB", larrpl: "\u2939", larrsim: "\u2973", larrtl: "\u21A2", latail: "\u2919", lAtail: "\u291B", lat: "\u2AAB", late: "\u2AAD", lates: "\u2AAD\uFE00", lbarr: "\u290C", lBarr: "\u290E", lbbrk: "\u2772", lbrace: "{", lbrack: "[", lbrke: "\u298B", lbrksld: "\u298F", lbrkslu: "\u298D", Lcaron: "\u013D", lcaron: "\u013E", Lcedil: "\u013B", lcedil: "\u013C", lceil: "\u2308", lcub: "{", Lcy: "\u041B", lcy: "\u043B", ldca: "\u2936", ldquo: "\u201C", ldquor: "\u201E", ldrdhar: "\u2967", ldrushar: "\u294B", ldsh: "\u21B2", le: "\u2264", lE: "\u2266", LeftAngleBracket: "\u27E8", LeftArrowBar: "\u21E4", leftarrow: "\u2190", LeftArrow: "\u2190", Leftarrow: "\u21D0", LeftArrowRightArrow: "\u21C6", leftarrowtail: "\u21A2", LeftCeiling: "\u2308", LeftDoubleBracket: "\u27E6", LeftDownTeeVector: "\u2961", LeftDownVectorBar: "\u2959", LeftDownVector: "\u21C3", LeftFloor: "\u230A", leftharpoondown: "\u21BD", leftharpoonup: "\u21BC", leftleftarrows: "\u21C7", leftrightarrow: "\u2194", LeftRightArrow: "\u2194", Leftrightarrow: "\u21D4", leftrightarrows: "\u21C6", leftrightharpoons: "\u21CB", leftrightsquigarrow: "\u21AD", LeftRightVector: "\u294E", LeftTeeArrow: "\u21A4", LeftTee: "\u22A3", LeftTeeVector: "\u295A", leftthreetimes: "\u22CB", LeftTriangleBar: "\u29CF", LeftTriangle: "\u22B2", LeftTriangleEqual: "\u22B4", LeftUpDownVector: "\u2951", LeftUpTeeVector: "\u2960", LeftUpVectorBar: "\u2958", LeftUpVector: "\u21BF", LeftVectorBar: "\u2952", LeftVector: "\u21BC", lEg: "\u2A8B", leg: "\u22DA", leq: "\u2264", leqq: "\u2266", leqslant: "\u2A7D", lescc: "\u2AA8", les: "\u2A7D", lesdot: "\u2A7F", lesdoto: "\u2A81", lesdotor: "\u2A83", lesg: "\u22DA\uFE00", lesges: "\u2A93", lessapprox: "\u2A85", lessdot: "\u22D6", lesseqgtr: "\u22DA", lesseqqgtr: "\u2A8B", LessEqualGreater: "\u22DA", LessFullEqual: "\u2266", LessGreater: "\u2276", lessgtr: "\u2276", LessLess: "\u2AA1", lesssim: "\u2272", LessSlantEqual: "\u2A7D", LessTilde: "\u2272", lfisht: "\u297C", lfloor: "\u230A", Lfr: "\u{1D50F}", lfr: "\u{1D529}", lg: "\u2276", lgE: "\u2A91", lHar: "\u2962", lhard: "\u21BD", lharu: "\u21BC", lharul: "\u296A", lhblk: "\u2584", LJcy: "\u0409", ljcy: "\u0459", llarr: "\u21C7", ll: "\u226A", Ll: "\u22D8", llcorner: "\u231E", Lleftarrow: "\u21DA", llhard: "\u296B", lltri: "\u25FA", Lmidot: "\u013F", lmidot: "\u0140", lmoustache: "\u23B0", lmoust: "\u23B0", lnap: "\u2A89", lnapprox: "\u2A89", lne: "\u2A87", lnE: "\u2268", lneq: "\u2A87", lneqq: "\u2268", lnsim: "\u22E6", loang: "\u27EC", loarr: "\u21FD", lobrk: "\u27E6", longleftarrow: "\u27F5", LongLeftArrow: "\u27F5", Longleftarrow: "\u27F8", longleftrightarrow: "\u27F7", LongLeftRightArrow: "\u27F7", Longleftrightarrow: "\u27FA", longmapsto: "\u27FC", longrightarrow: "\u27F6", LongRightArrow: "\u27F6", Longrightarrow: "\u27F9", looparrowleft: "\u21AB", looparrowright: "\u21AC", lopar: "\u2985", Lopf: "\u{1D543}", lopf: "\u{1D55D}", loplus: "\u2A2D", lotimes: "\u2A34", lowast: "\u2217", lowbar: "_", LowerLeftArrow: "\u2199", LowerRightArrow: "\u2198", loz: "\u25CA", lozenge: "\u25CA", lozf: "\u29EB", lpar: "(", lparlt: "\u2993", lrarr: "\u21C6", lrcorner: "\u231F", lrhar: "\u21CB", lrhard: "\u296D", lrm: "\u200E", lrtri: "\u22BF", lsaquo: "\u2039", lscr: "\u{1D4C1}", Lscr: "\u2112", lsh: "\u21B0", Lsh: "\u21B0", lsim: "\u2272", lsime: "\u2A8D", lsimg: "\u2A8F", lsqb: "[", lsquo: "\u2018", lsquor: "\u201A", Lstrok: "\u0141", lstrok: "\u0142", ltcc: "\u2AA6", ltcir: "\u2A79", lt: "<", LT: "<", Lt: "\u226A", ltdot: "\u22D6", lthree: "\u22CB", ltimes: "\u22C9", ltlarr: "\u2976", ltquest: "\u2A7B", ltri: "\u25C3", ltrie: "\u22B4", ltrif: "\u25C2", ltrPar: "\u2996", lurdshar: "\u294A", luruhar: "\u2966", lvertneqq: "\u2268\uFE00", lvnE: "\u2268\uFE00", macr: "\xAF", male: "\u2642", malt: "\u2720", maltese: "\u2720", Map: "\u2905", map: "\u21A6", mapsto: "\u21A6", mapstodown: "\u21A7", mapstoleft: "\u21A4", mapstoup: "\u21A5", marker: "\u25AE", mcomma: "\u2A29", Mcy: "\u041C", mcy: "\u043C", mdash: "\u2014", mDDot: "\u223A", measuredangle: "\u2221", MediumSpace: "\u205F", Mellintrf: "\u2133", Mfr: "\u{1D510}", mfr: "\u{1D52A}", mho: "\u2127", micro: "\xB5", midast: "*", midcir: "\u2AF0", mid: "\u2223", middot: "\xB7", minusb: "\u229F", minus: "\u2212", minusd: "\u2238", minusdu: "\u2A2A", MinusPlus: "\u2213", mlcp: "\u2ADB", mldr: "\u2026", mnplus: "\u2213", models: "\u22A7", Mopf: "\u{1D544}", mopf: "\u{1D55E}", mp: "\u2213", mscr: "\u{1D4C2}", Mscr: "\u2133", mstpos: "\u223E", Mu: "\u039C", mu: "\u03BC", multimap: "\u22B8", mumap: "\u22B8", nabla: "\u2207", Nacute: "\u0143", nacute: "\u0144", nang: "\u2220\u20D2", nap: "\u2249", napE: "\u2A70\u0338", napid: "\u224B\u0338", napos: "\u0149", napprox: "\u2249", natural: "\u266E", naturals: "\u2115", natur: "\u266E", nbsp: "\xA0", nbump: "\u224E\u0338", nbumpe: "\u224F\u0338", ncap: "\u2A43", Ncaron: "\u0147", ncaron: "\u0148", Ncedil: "\u0145", ncedil: "\u0146", ncong: "\u2247", ncongdot: "\u2A6D\u0338", ncup: "\u2A42", Ncy: "\u041D", ncy: "\u043D", ndash: "\u2013", nearhk: "\u2924", nearr: "\u2197", neArr: "\u21D7", nearrow: "\u2197", ne: "\u2260", nedot: "\u2250\u0338", NegativeMediumSpace: "\u200B", NegativeThickSpace: "\u200B", NegativeThinSpace: "\u200B", NegativeVeryThinSpace: "\u200B", nequiv: "\u2262", nesear: "\u2928", nesim: "\u2242\u0338", NestedGreaterGreater: "\u226B", NestedLessLess: "\u226A", NewLine: "\n", nexist: "\u2204", nexists: "\u2204", Nfr: "\u{1D511}", nfr: "\u{1D52B}", ngE: "\u2267\u0338", nge: "\u2271", ngeq: "\u2271", ngeqq: "\u2267\u0338", ngeqslant: "\u2A7E\u0338", nges: "\u2A7E\u0338", nGg: "\u22D9\u0338", ngsim: "\u2275", nGt: "\u226B\u20D2", ngt: "\u226F", ngtr: "\u226F", nGtv: "\u226B\u0338", nharr: "\u21AE", nhArr: "\u21CE", nhpar: "\u2AF2", ni: "\u220B", nis: "\u22FC", nisd: "\u22FA", niv: "\u220B", NJcy: "\u040A", njcy: "\u045A", nlarr: "\u219A", nlArr: "\u21CD", nldr: "\u2025", nlE: "\u2266\u0338", nle: "\u2270", nleftarrow: "\u219A", nLeftarrow: "\u21CD", nleftrightarrow: "\u21AE", nLeftrightarrow: "\u21CE", nleq: "\u2270", nleqq: "\u2266\u0338", nleqslant: "\u2A7D\u0338", nles: "\u2A7D\u0338", nless: "\u226E", nLl: "\u22D8\u0338", nlsim: "\u2274", nLt: "\u226A\u20D2", nlt: "\u226E", nltri: "\u22EA", nltrie: "\u22EC", nLtv: "\u226A\u0338", nmid: "\u2224", NoBreak: "\u2060", NonBreakingSpace: "\xA0", nopf: "\u{1D55F}", Nopf: "\u2115", Not: "\u2AEC", not: "\xAC", NotCongruent: "\u2262", NotCupCap: "\u226D", NotDoubleVerticalBar: "\u2226", NotElement: "\u2209", NotEqual: "\u2260", NotEqualTilde: "\u2242\u0338", NotExists: "\u2204", NotGreater: "\u226F", NotGreaterEqual: "\u2271", NotGreaterFullEqual: "\u2267\u0338", NotGreaterGreater: "\u226B\u0338", NotGreaterLess: "\u2279", NotGreaterSlantEqual: "\u2A7E\u0338", NotGreaterTilde: "\u2275", NotHumpDownHump: "\u224E\u0338", NotHumpEqual: "\u224F\u0338", notin: "\u2209", notindot: "\u22F5\u0338", notinE: "\u22F9\u0338", notinva: "\u2209", notinvb: "\u22F7", notinvc: "\u22F6", NotLeftTriangleBar: "\u29CF\u0338", NotLeftTriangle: "\u22EA", NotLeftTriangleEqual: "\u22EC", NotLess: "\u226E", NotLessEqual: "\u2270", NotLessGreater: "\u2278", NotLessLess: "\u226A\u0338", NotLessSlantEqual: "\u2A7D\u0338", NotLessTilde: "\u2274", NotNestedGreaterGreater: "\u2AA2\u0338", NotNestedLessLess: "\u2AA1\u0338", notni: "\u220C", notniva: "\u220C", notnivb: "\u22FE", notnivc: "\u22FD", NotPrecedes: "\u2280", NotPrecedesEqual: "\u2AAF\u0338", NotPrecedesSlantEqual: "\u22E0", NotReverseElement: "\u220C", NotRightTriangleBar: "\u29D0\u0338", NotRightTriangle: "\u22EB", NotRightTriangleEqual: "\u22ED", NotSquareSubset: "\u228F\u0338", NotSquareSubsetEqual: "\u22E2", NotSquareSuperset: "\u2290\u0338", NotSquareSupersetEqual: "\u22E3", NotSubset: "\u2282\u20D2", NotSubsetEqual: "\u2288", NotSucceeds: "\u2281", NotSucceedsEqual: "\u2AB0\u0338", NotSucceedsSlantEqual: "\u22E1", NotSucceedsTilde: "\u227F\u0338", NotSuperset: "\u2283\u20D2", NotSupersetEqual: "\u2289", NotTilde: "\u2241", NotTildeEqual: "\u2244", NotTildeFullEqual: "\u2247", NotTildeTilde: "\u2249", NotVerticalBar: "\u2224", nparallel: "\u2226", npar: "\u2226", nparsl: "\u2AFD\u20E5", npart: "\u2202\u0338", npolint: "\u2A14", npr: "\u2280", nprcue: "\u22E0", nprec: "\u2280", npreceq: "\u2AAF\u0338", npre: "\u2AAF\u0338", nrarrc: "\u2933\u0338", nrarr: "\u219B", nrArr: "\u21CF", nrarrw: "\u219D\u0338", nrightarrow: "\u219B", nRightarrow: "\u21CF", nrtri: "\u22EB", nrtrie: "\u22ED", nsc: "\u2281", nsccue: "\u22E1", nsce: "\u2AB0\u0338", Nscr: "\u{1D4A9}", nscr: "\u{1D4C3}", nshortmid: "\u2224", nshortparallel: "\u2226", nsim: "\u2241", nsime: "\u2244", nsimeq: "\u2244", nsmid: "\u2224", nspar: "\u2226", nsqsube: "\u22E2", nsqsupe: "\u22E3", nsub: "\u2284", nsubE: "\u2AC5\u0338", nsube: "\u2288", nsubset: "\u2282\u20D2", nsubseteq: "\u2288", nsubseteqq: "\u2AC5\u0338", nsucc: "\u2281", nsucceq: "\u2AB0\u0338", nsup: "\u2285", nsupE: "\u2AC6\u0338", nsupe: "\u2289", nsupset: "\u2283\u20D2", nsupseteq: "\u2289", nsupseteqq: "\u2AC6\u0338", ntgl: "\u2279", Ntilde: "\xD1", ntilde: "\xF1", ntlg: "\u2278", ntriangleleft: "\u22EA", ntrianglelefteq: "\u22EC", ntriangleright: "\u22EB", ntrianglerighteq: "\u22ED", Nu: "\u039D", nu: "\u03BD", num: "#", numero: "\u2116", numsp: "\u2007", nvap: "\u224D\u20D2", nvdash: "\u22AC", nvDash: "\u22AD", nVdash: "\u22AE", nVDash: "\u22AF", nvge: "\u2265\u20D2", nvgt: ">\u20D2", nvHarr: "\u2904", nvinfin: "\u29DE", nvlArr: "\u2902", nvle: "\u2264\u20D2", nvlt: "<\u20D2", nvltrie: "\u22B4\u20D2", nvrArr: "\u2903", nvrtrie: "\u22B5\u20D2", nvsim: "\u223C\u20D2", nwarhk: "\u2923", nwarr: "\u2196", nwArr: "\u21D6", nwarrow: "\u2196", nwnear: "\u2927", Oacute: "\xD3", oacute: "\xF3", oast: "\u229B", Ocirc: "\xD4", ocirc: "\xF4", ocir: "\u229A", Ocy: "\u041E", ocy: "\u043E", odash: "\u229D", Odblac: "\u0150", odblac: "\u0151", odiv: "\u2A38", odot: "\u2299", odsold: "\u29BC", OElig: "\u0152", oelig: "\u0153", ofcir: "\u29BF", Ofr: "\u{1D512}", ofr: "\u{1D52C}", ogon: "\u02DB", Ograve: "\xD2", ograve: "\xF2", ogt: "\u29C1", ohbar: "\u29B5", ohm: "\u03A9", oint: "\u222E", olarr: "\u21BA", olcir: "\u29BE", olcross: "\u29BB", oline: "\u203E", olt: "\u29C0", Omacr: "\u014C", omacr: "\u014D", Omega: "\u03A9", omega: "\u03C9", Omicron: "\u039F", omicron: "\u03BF", omid: "\u29B6", ominus: "\u2296", Oopf: "\u{1D546}", oopf: "\u{1D560}", opar: "\u29B7", OpenCurlyDoubleQuote: "\u201C", OpenCurlyQuote: "\u2018", operp: "\u29B9", oplus: "\u2295", orarr: "\u21BB", Or: "\u2A54", or: "\u2228", ord: "\u2A5D", order: "\u2134", orderof: "\u2134", ordf: "\xAA", ordm: "\xBA", origof: "\u22B6", oror: "\u2A56", orslope: "\u2A57", orv: "\u2A5B", oS: "\u24C8", Oscr: "\u{1D4AA}", oscr: "\u2134", Oslash: "\xD8", oslash: "\xF8", osol: "\u2298", Otilde: "\xD5", otilde: "\xF5", otimesas: "\u2A36", Otimes: "\u2A37", otimes: "\u2297", Ouml: "\xD6", ouml: "\xF6", ovbar: "\u233D", OverBar: "\u203E", OverBrace: "\u23DE", OverBracket: "\u23B4", OverParenthesis: "\u23DC", para: "\xB6", parallel: "\u2225", par: "\u2225", parsim: "\u2AF3", parsl: "\u2AFD", part: "\u2202", PartialD: "\u2202", Pcy: "\u041F", pcy: "\u043F", percnt: "%", period: ".", permil: "\u2030", perp: "\u22A5", pertenk: "\u2031", Pfr: "\u{1D513}", pfr: "\u{1D52D}", Phi: "\u03A6", phi: "\u03C6", phiv: "\u03D5", phmmat: "\u2133", phone: "\u260E", Pi: "\u03A0", pi: "\u03C0", pitchfork: "\u22D4", piv: "\u03D6", planck: "\u210F", planckh: "\u210E", plankv: "\u210F", plusacir: "\u2A23", plusb: "\u229E", pluscir: "\u2A22", plus: "+", plusdo: "\u2214", plusdu: "\u2A25", pluse: "\u2A72", PlusMinus: "\xB1", plusmn: "\xB1", plussim: "\u2A26", plustwo: "\u2A27", pm: "\xB1", Poincareplane: "\u210C", pointint: "\u2A15", popf: "\u{1D561}", Popf: "\u2119", pound: "\xA3", prap: "\u2AB7", Pr: "\u2ABB", pr: "\u227A", prcue: "\u227C", precapprox: "\u2AB7", prec: "\u227A", preccurlyeq: "\u227C", Precedes: "\u227A", PrecedesEqual: "\u2AAF", PrecedesSlantEqual: "\u227C", PrecedesTilde: "\u227E", preceq: "\u2AAF", precnapprox: "\u2AB9", precneqq: "\u2AB5", precnsim: "\u22E8", pre: "\u2AAF", prE: "\u2AB3", precsim: "\u227E", prime: "\u2032", Prime: "\u2033", primes: "\u2119", prnap: "\u2AB9", prnE: "\u2AB5", prnsim: "\u22E8", prod: "\u220F", Product: "\u220F", profalar: "\u232E", profline: "\u2312", profsurf: "\u2313", prop: "\u221D", Proportional: "\u221D", Proportion: "\u2237", propto: "\u221D", prsim: "\u227E", prurel: "\u22B0", Pscr: "\u{1D4AB}", pscr: "\u{1D4C5}", Psi: "\u03A8", psi: "\u03C8", puncsp: "\u2008", Qfr: "\u{1D514}", qfr: "\u{1D52E}", qint: "\u2A0C", qopf: "\u{1D562}", Qopf: "\u211A", qprime: "\u2057", Qscr: "\u{1D4AC}", qscr: "\u{1D4C6}", quaternions: "\u210D", quatint: "\u2A16", quest: "?", questeq: "\u225F", quot: '"', QUOT: '"', rAarr: "\u21DB", race: "\u223D\u0331", Racute: "\u0154", racute: "\u0155", radic: "\u221A", raemptyv: "\u29B3", rang: "\u27E9", Rang: "\u27EB", rangd: "\u2992", range: "\u29A5", rangle: "\u27E9", raquo: "\xBB", rarrap: "\u2975", rarrb: "\u21E5", rarrbfs: "\u2920", rarrc: "\u2933", rarr: "\u2192", Rarr: "\u21A0", rArr: "\u21D2", rarrfs: "\u291E", rarrhk: "\u21AA", rarrlp: "\u21AC", rarrpl: "\u2945", rarrsim: "\u2974", Rarrtl: "\u2916", rarrtl: "\u21A3", rarrw: "\u219D", ratail: "\u291A", rAtail: "\u291C", ratio: "\u2236", rationals: "\u211A", rbarr: "\u290D", rBarr: "\u290F", RBarr: "\u2910", rbbrk: "\u2773", rbrace: "}", rbrack: "]", rbrke: "\u298C", rbrksld: "\u298E", rbrkslu: "\u2990", Rcaron: "\u0158", rcaron: "\u0159", Rcedil: "\u0156", rcedil: "\u0157", rceil: "\u2309", rcub: "}", Rcy: "\u0420", rcy: "\u0440", rdca: "\u2937", rdldhar: "\u2969", rdquo: "\u201D", rdquor: "\u201D", rdsh: "\u21B3", real: "\u211C", realine: "\u211B", realpart: "\u211C", reals: "\u211D", Re: "\u211C", rect: "\u25AD", reg: "\xAE", REG: "\xAE", ReverseElement: "\u220B", ReverseEquilibrium: "\u21CB", ReverseUpEquilibrium: "\u296F", rfisht: "\u297D", rfloor: "\u230B", rfr: "\u{1D52F}", Rfr: "\u211C", rHar: "\u2964", rhard: "\u21C1", rharu: "\u21C0", rharul: "\u296C", Rho: "\u03A1", rho: "\u03C1", rhov: "\u03F1", RightAngleBracket: "\u27E9", RightArrowBar: "\u21E5", rightarrow: "\u2192", RightArrow: "\u2192", Rightarrow: "\u21D2", RightArrowLeftArrow: "\u21C4", rightarrowtail: "\u21A3", RightCeiling: "\u2309", RightDoubleBracket: "\u27E7", RightDownTeeVector: "\u295D", RightDownVectorBar: "\u2955", RightDownVector: "\u21C2", RightFloor: "\u230B", rightharpoondown: "\u21C1", rightharpoonup: "\u21C0", rightleftarrows: "\u21C4", rightleftharpoons: "\u21CC", rightrightarrows: "\u21C9", rightsquigarrow: "\u219D", RightTeeArrow: "\u21A6", RightTee: "\u22A2", RightTeeVector: "\u295B", rightthreetimes: "\u22CC", RightTriangleBar: "\u29D0", RightTriangle: "\u22B3", RightTriangleEqual: "\u22B5", RightUpDownVector: "\u294F", RightUpTeeVector: "\u295C", RightUpVectorBar: "\u2954", RightUpVector: "\u21BE", RightVectorBar: "\u2953", RightVector: "\u21C0", ring: "\u02DA", risingdotseq: "\u2253", rlarr: "\u21C4", rlhar: "\u21CC", rlm: "\u200F", rmoustache: "\u23B1", rmoust: "\u23B1", rnmid: "\u2AEE", roang: "\u27ED", roarr: "\u21FE", robrk: "\u27E7", ropar: "\u2986", ropf: "\u{1D563}", Ropf: "\u211D", roplus: "\u2A2E", rotimes: "\u2A35", RoundImplies: "\u2970", rpar: ")", rpargt: "\u2994", rppolint: "\u2A12", rrarr: "\u21C9", Rrightarrow: "\u21DB", rsaquo: "\u203A", rscr: "\u{1D4C7}", Rscr: "\u211B", rsh: "\u21B1", Rsh: "\u21B1", rsqb: "]", rsquo: "\u2019", rsquor: "\u2019", rthree: "\u22CC", rtimes: "\u22CA", rtri: "\u25B9", rtrie: "\u22B5", rtrif: "\u25B8", rtriltri: "\u29CE", RuleDelayed: "\u29F4", ruluhar: "\u2968", rx: "\u211E", Sacute: "\u015A", sacute: "\u015B", sbquo: "\u201A", scap: "\u2AB8", Scaron: "\u0160", scaron: "\u0161", Sc: "\u2ABC", sc: "\u227B", sccue: "\u227D", sce: "\u2AB0", scE: "\u2AB4", Scedil: "\u015E", scedil: "\u015F", Scirc: "\u015C", scirc: "\u015D", scnap: "\u2ABA", scnE: "\u2AB6", scnsim: "\u22E9", scpolint: "\u2A13", scsim: "\u227F", Scy: "\u0421", scy: "\u0441", sdotb: "\u22A1", sdot: "\u22C5", sdote: "\u2A66", searhk: "\u2925", searr: "\u2198", seArr: "\u21D8", searrow: "\u2198", sect: "\xA7", semi: ";", seswar: "\u2929", setminus: "\u2216", setmn: "\u2216", sext: "\u2736", Sfr: "\u{1D516}", sfr: "\u{1D530}", sfrown: "\u2322", sharp: "\u266F", SHCHcy: "\u0429", shchcy: "\u0449", SHcy: "\u0428", shcy: "\u0448", ShortDownArrow: "\u2193", ShortLeftArrow: "\u2190", shortmid: "\u2223", shortparallel: "\u2225", ShortRightArrow: "\u2192", ShortUpArrow: "\u2191", shy: "\xAD", Sigma: "\u03A3", sigma: "\u03C3", sigmaf: "\u03C2", sigmav: "\u03C2", sim: "\u223C", simdot: "\u2A6A", sime: "\u2243", simeq: "\u2243", simg: "\u2A9E", simgE: "\u2AA0", siml: "\u2A9D", simlE: "\u2A9F", simne: "\u2246", simplus: "\u2A24", simrarr: "\u2972", slarr: "\u2190", SmallCircle: "\u2218", smallsetminus: "\u2216", smashp: "\u2A33", smeparsl: "\u29E4", smid: "\u2223", smile: "\u2323", smt: "\u2AAA", smte: "\u2AAC", smtes: "\u2AAC\uFE00", SOFTcy: "\u042C", softcy: "\u044C", solbar: "\u233F", solb: "\u29C4", sol: "/", Sopf: "\u{1D54A}", sopf: "\u{1D564}", spades: "\u2660", spadesuit: "\u2660", spar: "\u2225", sqcap: "\u2293", sqcaps: "\u2293\uFE00", sqcup: "\u2294", sqcups: "\u2294\uFE00", Sqrt: "\u221A", sqsub: "\u228F", sqsube: "\u2291", sqsubset: "\u228F", sqsubseteq: "\u2291", sqsup: "\u2290", sqsupe: "\u2292", sqsupset: "\u2290", sqsupseteq: "\u2292", square: "\u25A1", Square: "\u25A1", SquareIntersection: "\u2293", SquareSubset: "\u228F", SquareSubsetEqual: "\u2291", SquareSuperset: "\u2290", SquareSupersetEqual: "\u2292", SquareUnion: "\u2294", squarf: "\u25AA", squ: "\u25A1", squf: "\u25AA", srarr: "\u2192", Sscr: "\u{1D4AE}", sscr: "\u{1D4C8}", ssetmn: "\u2216", ssmile: "\u2323", sstarf: "\u22C6", Star: "\u22C6", star: "\u2606", starf: "\u2605", straightepsilon: "\u03F5", straightphi: "\u03D5", strns: "\xAF", sub: "\u2282", Sub: "\u22D0", subdot: "\u2ABD", subE: "\u2AC5", sube: "\u2286", subedot: "\u2AC3", submult: "\u2AC1", subnE: "\u2ACB", subne: "\u228A", subplus: "\u2ABF", subrarr: "\u2979", subset: "\u2282", Subset: "\u22D0", subseteq: "\u2286", subseteqq: "\u2AC5", SubsetEqual: "\u2286", subsetneq: "\u228A", subsetneqq: "\u2ACB", subsim: "\u2AC7", subsub: "\u2AD5", subsup: "\u2AD3", succapprox: "\u2AB8", succ: "\u227B", succcurlyeq: "\u227D", Succeeds: "\u227B", SucceedsEqual: "\u2AB0", SucceedsSlantEqual: "\u227D", SucceedsTilde: "\u227F", succeq: "\u2AB0", succnapprox: "\u2ABA", succneqq: "\u2AB6", succnsim: "\u22E9", succsim: "\u227F", SuchThat: "\u220B", sum: "\u2211", Sum: "\u2211", sung: "\u266A", sup1: "\xB9", sup2: "\xB2", sup3: "\xB3", sup: "\u2283", Sup: "\u22D1", supdot: "\u2ABE", supdsub: "\u2AD8", supE: "\u2AC6", supe: "\u2287", supedot: "\u2AC4", Superset: "\u2283", SupersetEqual: "\u2287", suphsol: "\u27C9", suphsub: "\u2AD7", suplarr: "\u297B", supmult: "\u2AC2", supnE: "\u2ACC", supne: "\u228B", supplus: "\u2AC0", supset: "\u2283", Supset: "\u22D1", supseteq: "\u2287", supseteqq: "\u2AC6", supsetneq: "\u228B", supsetneqq: "\u2ACC", supsim: "\u2AC8", supsub: "\u2AD4", supsup: "\u2AD6", swarhk: "\u2926", swarr: "\u2199", swArr: "\u21D9", swarrow: "\u2199", swnwar: "\u292A", szlig: "\xDF", Tab: "	", target: "\u2316", Tau: "\u03A4", tau: "\u03C4", tbrk: "\u23B4", Tcaron: "\u0164", tcaron: "\u0165", Tcedil: "\u0162", tcedil: "\u0163", Tcy: "\u0422", tcy: "\u0442", tdot: "\u20DB", telrec: "\u2315", Tfr: "\u{1D517}", tfr: "\u{1D531}", there4: "\u2234", therefore: "\u2234", Therefore: "\u2234", Theta: "\u0398", theta: "\u03B8", thetasym: "\u03D1", thetav: "\u03D1", thickapprox: "\u2248", thicksim: "\u223C", ThickSpace: "\u205F\u200A", ThinSpace: "\u2009", thinsp: "\u2009", thkap: "\u2248", thksim: "\u223C", THORN: "\xDE", thorn: "\xFE", tilde: "\u02DC", Tilde: "\u223C", TildeEqual: "\u2243", TildeFullEqual: "\u2245", TildeTilde: "\u2248", timesbar: "\u2A31", timesb: "\u22A0", times: "\xD7", timesd: "\u2A30", tint: "\u222D", toea: "\u2928", topbot: "\u2336", topcir: "\u2AF1", top: "\u22A4", Topf: "\u{1D54B}", topf: "\u{1D565}", topfork: "\u2ADA", tosa: "\u2929", tprime: "\u2034", trade: "\u2122", TRADE: "\u2122", triangle: "\u25B5", triangledown: "\u25BF", triangleleft: "\u25C3", trianglelefteq: "\u22B4", triangleq: "\u225C", triangleright: "\u25B9", trianglerighteq: "\u22B5", tridot: "\u25EC", trie: "\u225C", triminus: "\u2A3A", TripleDot: "\u20DB", triplus: "\u2A39", trisb: "\u29CD", tritime: "\u2A3B", trpezium: "\u23E2", Tscr: "\u{1D4AF}", tscr: "\u{1D4C9}", TScy: "\u0426", tscy: "\u0446", TSHcy: "\u040B", tshcy: "\u045B", Tstrok: "\u0166", tstrok: "\u0167", twixt: "\u226C", twoheadleftarrow: "\u219E", twoheadrightarrow: "\u21A0", Uacute: "\xDA", uacute: "\xFA", uarr: "\u2191", Uarr: "\u219F", uArr: "\u21D1", Uarrocir: "\u2949", Ubrcy: "\u040E", ubrcy: "\u045E", Ubreve: "\u016C", ubreve: "\u016D", Ucirc: "\xDB", ucirc: "\xFB", Ucy: "\u0423", ucy: "\u0443", udarr: "\u21C5", Udblac: "\u0170", udblac: "\u0171", udhar: "\u296E", ufisht: "\u297E", Ufr: "\u{1D518}", ufr: "\u{1D532}", Ugrave: "\xD9", ugrave: "\xF9", uHar: "\u2963", uharl: "\u21BF", uharr: "\u21BE", uhblk: "\u2580", ulcorn: "\u231C", ulcorner: "\u231C", ulcrop: "\u230F", ultri: "\u25F8", Umacr: "\u016A", umacr: "\u016B", uml: "\xA8", UnderBar: "_", UnderBrace: "\u23DF", UnderBracket: "\u23B5", UnderParenthesis: "\u23DD", Union: "\u22C3", UnionPlus: "\u228E", Uogon: "\u0172", uogon: "\u0173", Uopf: "\u{1D54C}", uopf: "\u{1D566}", UpArrowBar: "\u2912", uparrow: "\u2191", UpArrow: "\u2191", Uparrow: "\u21D1", UpArrowDownArrow: "\u21C5", updownarrow: "\u2195", UpDownArrow: "\u2195", Updownarrow: "\u21D5", UpEquilibrium: "\u296E", upharpoonleft: "\u21BF", upharpoonright: "\u21BE", uplus: "\u228E", UpperLeftArrow: "\u2196", UpperRightArrow: "\u2197", upsi: "\u03C5", Upsi: "\u03D2", upsih: "\u03D2", Upsilon: "\u03A5", upsilon: "\u03C5", UpTeeArrow: "\u21A5", UpTee: "\u22A5", upuparrows: "\u21C8", urcorn: "\u231D", urcorner: "\u231D", urcrop: "\u230E", Uring: "\u016E", uring: "\u016F", urtri: "\u25F9", Uscr: "\u{1D4B0}", uscr: "\u{1D4CA}", utdot: "\u22F0", Utilde: "\u0168", utilde: "\u0169", utri: "\u25B5", utrif: "\u25B4", uuarr: "\u21C8", Uuml: "\xDC", uuml: "\xFC", uwangle: "\u29A7", vangrt: "\u299C", varepsilon: "\u03F5", varkappa: "\u03F0", varnothing: "\u2205", varphi: "\u03D5", varpi: "\u03D6", varpropto: "\u221D", varr: "\u2195", vArr: "\u21D5", varrho: "\u03F1", varsigma: "\u03C2", varsubsetneq: "\u228A\uFE00", varsubsetneqq: "\u2ACB\uFE00", varsupsetneq: "\u228B\uFE00", varsupsetneqq: "\u2ACC\uFE00", vartheta: "\u03D1", vartriangleleft: "\u22B2", vartriangleright: "\u22B3", vBar: "\u2AE8", Vbar: "\u2AEB", vBarv: "\u2AE9", Vcy: "\u0412", vcy: "\u0432", vdash: "\u22A2", vDash: "\u22A8", Vdash: "\u22A9", VDash: "\u22AB", Vdashl: "\u2AE6", veebar: "\u22BB", vee: "\u2228", Vee: "\u22C1", veeeq: "\u225A", vellip: "\u22EE", verbar: "|", Verbar: "\u2016", vert: "|", Vert: "\u2016", VerticalBar: "\u2223", VerticalLine: "|", VerticalSeparator: "\u2758", VerticalTilde: "\u2240", VeryThinSpace: "\u200A", Vfr: "\u{1D519}", vfr: "\u{1D533}", vltri: "\u22B2", vnsub: "\u2282\u20D2", vnsup: "\u2283\u20D2", Vopf: "\u{1D54D}", vopf: "\u{1D567}", vprop: "\u221D", vrtri: "\u22B3", Vscr: "\u{1D4B1}", vscr: "\u{1D4CB}", vsubnE: "\u2ACB\uFE00", vsubne: "\u228A\uFE00", vsupnE: "\u2ACC\uFE00", vsupne: "\u228B\uFE00", Vvdash: "\u22AA", vzigzag: "\u299A", Wcirc: "\u0174", wcirc: "\u0175", wedbar: "\u2A5F", wedge: "\u2227", Wedge: "\u22C0", wedgeq: "\u2259", weierp: "\u2118", Wfr: "\u{1D51A}", wfr: "\u{1D534}", Wopf: "\u{1D54E}", wopf: "\u{1D568}", wp: "\u2118", wr: "\u2240", wreath: "\u2240", Wscr: "\u{1D4B2}", wscr: "\u{1D4CC}", xcap: "\u22C2", xcirc: "\u25EF", xcup: "\u22C3", xdtri: "\u25BD", Xfr: "\u{1D51B}", xfr: "\u{1D535}", xharr: "\u27F7", xhArr: "\u27FA", Xi: "\u039E", xi: "\u03BE", xlarr: "\u27F5", xlArr: "\u27F8", xmap: "\u27FC", xnis: "\u22FB", xodot: "\u2A00", Xopf: "\u{1D54F}", xopf: "\u{1D569}", xoplus: "\u2A01", xotime: "\u2A02", xrarr: "\u27F6", xrArr: "\u27F9", Xscr: "\u{1D4B3}", xscr: "\u{1D4CD}", xsqcup: "\u2A06", xuplus: "\u2A04", xutri: "\u25B3", xvee: "\u22C1", xwedge: "\u22C0", Yacute: "\xDD", yacute: "\xFD", YAcy: "\u042F", yacy: "\u044F", Ycirc: "\u0176", ycirc: "\u0177", Ycy: "\u042B", ycy: "\u044B", yen: "\xA5", Yfr: "\u{1D51C}", yfr: "\u{1D536}", YIcy: "\u0407", yicy: "\u0457", Yopf: "\u{1D550}", yopf: "\u{1D56A}", Yscr: "\u{1D4B4}", yscr: "\u{1D4CE}", YUcy: "\u042E", yucy: "\u044E", yuml: "\xFF", Yuml: "\u0178", Zacute: "\u0179", zacute: "\u017A", Zcaron: "\u017D", zcaron: "\u017E", Zcy: "\u0417", zcy: "\u0437", Zdot: "\u017B", zdot: "\u017C", zeetrf: "\u2128", ZeroWidthSpace: "\u200B", Zeta: "\u0396", zeta: "\u03B6", zfr: "\u{1D537}", Zfr: "\u2128", ZHcy: "\u0416", zhcy: "\u0436", zigrarr: "\u21DD", zopf: "\u{1D56B}", Zopf: "\u2124", Zscr: "\u{1D4B5}", zscr: "\u{1D4CF}", zwj: "\u200D", zwnj: "\u200C" };
    Pn.exports = Bn, A(In);
    var $n = /[!-#%-\*,-\/:;\?@\[-\]_\{\}\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166D\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4E\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]|\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDF55-\uDF59]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDF3C-\uDF3E]|\uD806[\uDC3B\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8]|\uD809[\uDC70-\uDC74]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]/;
    var Un = {};
    var Wn = {};
    function Gn(t2, e2, n2) {
      var r2, i2, s2, a2, o2, u2 = "";
      for (typeof e2 != "string" && (n2 = e2, e2 = Gn.defaultChars), n2 === void 0 && (n2 = true), o2 = function(t3) {
        var e3, n3, r3 = Wn[t3];
        if (r3)
          return r3;
        for (r3 = Wn[t3] = [], e3 = 0; e3 < 128; e3++)
          n3 = String.fromCharCode(e3), /^[0-9a-z]$/i.test(n3) ? r3.push(n3) : r3.push("%" + ("0" + e3.toString(16).toUpperCase()).slice(-2));
        for (e3 = 0; e3 < t3.length; e3++)
          r3[t3.charCodeAt(e3)] = t3[e3];
        return r3;
      }(e2), r2 = 0, i2 = t2.length; r2 < i2; r2++)
        if (s2 = t2.charCodeAt(r2), n2 && s2 === 37 && r2 + 2 < i2 && /^[0-9a-f]{2}$/i.test(t2.slice(r2 + 1, r2 + 3)))
          u2 += t2.slice(r2, r2 + 3), r2 += 2;
        else if (s2 < 128)
          u2 += o2[s2];
        else if (s2 >= 55296 && s2 <= 57343) {
          if (s2 >= 55296 && s2 <= 56319 && r2 + 1 < i2 && (a2 = t2.charCodeAt(r2 + 1)) >= 56320 && a2 <= 57343) {
            u2 += encodeURIComponent(t2[r2] + t2[r2 + 1]), r2++;
            continue;
          }
          u2 += "%EF%BF%BD";
        } else
          u2 += encodeURIComponent(t2[r2]);
      return u2;
    }
    Gn.defaultChars = ";/?:@&=+$,-_.!~*'()#", Gn.componentChars = "-_.!~*'()";
    var Vn = Gn;
    var Kn = {};
    function Hn(t2, e2) {
      var n2;
      return typeof e2 != "string" && (e2 = Hn.defaultChars), n2 = function(t3) {
        var e3, n3, r2 = Kn[t3];
        if (r2)
          return r2;
        for (r2 = Kn[t3] = [], e3 = 0; e3 < 128; e3++)
          n3 = String.fromCharCode(e3), r2.push(n3);
        for (e3 = 0; e3 < t3.length; e3++)
          r2[n3 = t3.charCodeAt(e3)] = "%" + ("0" + n3.toString(16).toUpperCase()).slice(-2);
        return r2;
      }(e2), t2.replace(/(%[a-f0-9]{2})+/gi, function(t3) {
        var e3, r2, i2, s2, a2, o2, u2, l2 = "";
        for (e3 = 0, r2 = t3.length; e3 < r2; e3 += 3)
          (i2 = parseInt(t3.slice(e3 + 1, e3 + 3), 16)) < 128 ? l2 += n2[i2] : (224 & i2) == 192 && e3 + 3 < r2 && (192 & (s2 = parseInt(t3.slice(e3 + 4, e3 + 6), 16))) == 128 ? (l2 += (u2 = i2 << 6 & 1984 | 63 & s2) < 128 ? "\uFFFD\uFFFD" : String.fromCharCode(u2), e3 += 3) : (240 & i2) == 224 && e3 + 6 < r2 && (s2 = parseInt(t3.slice(e3 + 4, e3 + 6), 16), a2 = parseInt(t3.slice(e3 + 7, e3 + 9), 16), (192 & s2) == 128 && (192 & a2) == 128) ? (l2 += (u2 = i2 << 12 & 61440 | s2 << 6 & 4032 | 63 & a2) < 2048 || u2 >= 55296 && u2 <= 57343 ? "\uFFFD\uFFFD\uFFFD" : String.fromCharCode(u2), e3 += 6) : (248 & i2) == 240 && e3 + 9 < r2 && (s2 = parseInt(t3.slice(e3 + 4, e3 + 6), 16), a2 = parseInt(t3.slice(e3 + 7, e3 + 9), 16), o2 = parseInt(t3.slice(e3 + 10, e3 + 12), 16), (192 & s2) == 128 && (192 & a2) == 128 && (192 & o2) == 128) ? ((u2 = i2 << 18 & 1835008 | s2 << 12 & 258048 | a2 << 6 & 4032 | 63 & o2) < 65536 || u2 > 1114111 ? l2 += "\uFFFD\uFFFD\uFFFD\uFFFD" : (u2 -= 65536, l2 += String.fromCharCode(55296 + (u2 >> 10), 56320 + (1023 & u2))), e3 += 9) : l2 += "\uFFFD";
        return l2;
      });
    }
    Hn.defaultChars = ";/?:@&=+$,#", Hn.componentChars = "";
    var Zn = Hn;
    function Xn() {
      this.protocol = null, this.slashes = null, this.auth = null, this.port = null, this.hostname = null, this.hash = null, this.search = null, this.pathname = null;
    }
    var Qn = /^([a-z0-9.+-]+:)/i;
    var Jn = /:[0-9]*$/;
    var Yn = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/;
    var tr = ["{", "}", "|", "\\", "^", "`"].concat(["<", ">", '"', "`", " ", "\r", "\n", "	"]);
    var er = ["'"].concat(tr);
    var nr = ["%", "/", "?", ";", "#"].concat(er);
    var rr = ["/", "?", "#"];
    var ir = /^[+a-z0-9A-Z_-]{0,63}$/;
    var sr = /^([+a-z0-9A-Z_-]{0,63})(.*)$/;
    var ar = { javascript: true, "javascript:": true };
    var or = { http: true, https: true, ftp: true, gopher: true, file: true, "http:": true, "https:": true, "ftp:": true, "gopher:": true, "file:": true };
    Xn.prototype.parse = function(t2, e2) {
      var n2, r2, i2, s2, a2, o2 = t2;
      if (o2 = o2.trim(), !e2 && t2.split("#").length === 1) {
        var u2 = Yn.exec(o2);
        if (u2)
          return this.pathname = u2[1], u2[2] && (this.search = u2[2]), this;
      }
      var l2 = Qn.exec(o2);
      if (l2 && (i2 = (l2 = l2[0]).toLowerCase(), this.protocol = l2, o2 = o2.substr(l2.length)), (e2 || l2 || o2.match(/^\/\/[^@\/]+@[^@\/]+/)) && (!(a2 = o2.substr(0, 2) === "//") || l2 && ar[l2] || (o2 = o2.substr(2), this.slashes = true)), !ar[l2] && (a2 || l2 && !or[l2])) {
        var c2, _2, h2 = -1;
        for (n2 = 0; n2 < rr.length; n2++)
          (s2 = o2.indexOf(rr[n2])) !== -1 && (h2 === -1 || s2 < h2) && (h2 = s2);
        for ((_2 = h2 === -1 ? o2.lastIndexOf("@") : o2.lastIndexOf("@", h2)) !== -1 && (c2 = o2.slice(0, _2), o2 = o2.slice(_2 + 1), this.auth = c2), h2 = -1, n2 = 0; n2 < nr.length; n2++)
          (s2 = o2.indexOf(nr[n2])) !== -1 && (h2 === -1 || s2 < h2) && (h2 = s2);
        h2 === -1 && (h2 = o2.length), o2[h2 - 1] === ":" && h2--;
        var p2 = o2.slice(0, h2);
        o2 = o2.slice(h2), this.parseHost(p2), this.hostname = this.hostname || "";
        var f2 = this.hostname[0] === "[" && this.hostname[this.hostname.length - 1] === "]";
        if (!f2) {
          var d2 = this.hostname.split(/\./);
          for (n2 = 0, r2 = d2.length; n2 < r2; n2++) {
            var g2 = d2[n2];
            if (g2 && !g2.match(ir)) {
              for (var m2 = "", b2 = 0, y2 = g2.length; b2 < y2; b2++)
                g2.charCodeAt(b2) > 127 ? m2 += "x" : m2 += g2[b2];
              if (!m2.match(ir)) {
                var k2 = d2.slice(0, n2), v2 = d2.slice(n2 + 1), w2 = g2.match(sr);
                w2 && (k2.push(w2[1]), v2.unshift(w2[2])), v2.length && (o2 = v2.join(".") + o2), this.hostname = k2.join(".");
                break;
              }
            }
          }
        }
        this.hostname.length > 255 && (this.hostname = ""), f2 && (this.hostname = this.hostname.substr(1, this.hostname.length - 2));
      }
      var x2 = o2.indexOf("#");
      x2 !== -1 && (this.hash = o2.substr(x2), o2 = o2.slice(0, x2));
      var E2 = o2.indexOf("?");
      return E2 !== -1 && (this.search = o2.substr(E2), o2 = o2.slice(0, E2)), o2 && (this.pathname = o2), or[i2] && this.hostname && !this.pathname && (this.pathname = ""), this;
    }, Xn.prototype.parseHost = function(t2) {
      var e2 = Jn.exec(t2);
      e2 && ((e2 = e2[0]) !== ":" && (this.port = e2.substr(1)), t2 = t2.substr(0, t2.length - e2.length)), t2 && (this.hostname = t2);
    };
    var ur = function(t2, e2) {
      if (t2 && t2 instanceof Xn)
        return t2;
      var n2 = new Xn();
      return n2.parse(t2, e2), n2;
    };
    Un.encode = Vn, Un.decode = Zn, Un.format = function(t2) {
      var e2 = "";
      return e2 += t2.protocol || "", e2 += t2.slashes ? "//" : "", e2 += t2.auth ? t2.auth + "@" : "", t2.hostname && t2.hostname.indexOf(":") !== -1 ? e2 += "[" + t2.hostname + "]" : e2 += t2.hostname || "", e2 += t2.port ? ":" + t2.port : "", e2 += t2.pathname || "", e2 += t2.search || "", e2 += t2.hash || "";
    }, Un.parse = ur;
    var lr;
    var cr;
    var _r;
    var hr;
    var pr;
    var fr;
    var dr;
    var gr;
    var mr;
    var br = {};
    function yr() {
      return cr ? lr : (cr = 1, lr = /[\0-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/);
    }
    function kr() {
      return hr ? _r : (hr = 1, _r = /[\0-\x1F\x7F-\x9F]/);
    }
    function vr() {
      return gr ? dr : (gr = 1, dr = /[ \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000]/);
    }
    function wr() {
      return mr || (mr = 1, br.Any = yr(), br.Cc = kr(), br.Cf = fr ? pr : (fr = 1, pr = /[\xAD\u0600-\u0605\u061C\u06DD\u070F\u08E2\u180E\u200B-\u200F\u202A-\u202E\u2060-\u2064\u2066-\u206F\uFEFF\uFFF9-\uFFFB]|\uD804[\uDCBD\uDCCD]|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|\uDB40[\uDC01\uDC20-\uDC7F]/), br.P = $n, br.Z = vr()), br;
    }
    !function(t2) {
      var e2 = Object.prototype.hasOwnProperty;
      function n2(t3, n3) {
        return e2.call(t3, n3);
      }
      function r2(t3) {
        return !(t3 >= 55296 && t3 <= 57343) && (!(t3 >= 64976 && t3 <= 65007) && ((65535 & t3) != 65535 && (65535 & t3) != 65534 && (!(t3 >= 0 && t3 <= 8) && (t3 !== 11 && (!(t3 >= 14 && t3 <= 31) && (!(t3 >= 127 && t3 <= 159) && !(t3 > 1114111)))))));
      }
      function i2(t3) {
        if (t3 > 65535) {
          var e3 = 55296 + ((t3 -= 65536) >> 10), n3 = 56320 + (1023 & t3);
          return String.fromCharCode(e3, n3);
        }
        return String.fromCharCode(t3);
      }
      var s2 = /\\([!"#$%&'()*+,\-.\/:;<=>?@[\\\]^_`{|}~])/g, a2 = new RegExp(s2.source + "|" + /&([a-z#][a-z0-9]{1,31});/gi.source, "gi"), o2 = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))/i, u2 = In;
      var l2 = /[&<>"]/, c2 = /[&<>"]/g, _2 = { "&": "&amp;", "<": "&lt;", ">": "&gt;", '"': "&quot;" };
      function h2(t3) {
        return _2[t3];
      }
      var p2 = /[.?*+^$[\]\\(){}|-]/g;
      var f2 = $n;
      t2.lib = {}, t2.lib.mdurl = Un, t2.lib.ucmicro = wr(), t2.assign = function(t3) {
        var e3 = Array.prototype.slice.call(arguments, 1);
        return e3.forEach(function(e4) {
          if (e4) {
            if (typeof e4 != "object")
              throw new TypeError(e4 + "must be object");
            Object.keys(e4).forEach(function(n3) {
              t3[n3] = e4[n3];
            });
          }
        }), t3;
      }, t2.isString = function(t3) {
        return function(t4) {
          return Object.prototype.toString.call(t4);
        }(t3) === "[object String]";
      }, t2.has = n2, t2.unescapeMd = function(t3) {
        return t3.indexOf("\\") < 0 ? t3 : t3.replace(s2, "$1");
      }, t2.unescapeAll = function(t3) {
        return t3.indexOf("\\") < 0 && t3.indexOf("&") < 0 ? t3 : t3.replace(a2, function(t4, e3, s3) {
          return e3 || function(t5, e4) {
            var s4 = 0;
            return n2(u2, e4) ? u2[e4] : e4.charCodeAt(0) === 35 && o2.test(e4) && r2(s4 = e4[1].toLowerCase() === "x" ? parseInt(e4.slice(2), 16) : parseInt(e4.slice(1), 10)) ? i2(s4) : t5;
          }(t4, s3);
        });
      }, t2.isValidEntityCode = r2, t2.fromCodePoint = i2, t2.escapeHtml = function(t3) {
        return l2.test(t3) ? t3.replace(c2, h2) : t3;
      }, t2.arrayReplaceAt = function(t3, e3, n3) {
        return [].concat(t3.slice(0, e3), n3, t3.slice(e3 + 1));
      }, t2.isSpace = function(t3) {
        switch (t3) {
          case 9:
          case 32:
            return true;
        }
        return false;
      }, t2.isWhiteSpace = function(t3) {
        if (t3 >= 8192 && t3 <= 8202)
          return true;
        switch (t3) {
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
          case 32:
          case 160:
          case 5760:
          case 8239:
          case 8287:
          case 12288:
            return true;
        }
        return false;
      }, t2.isMdAsciiPunct = function(t3) {
        switch (t3) {
          case 33:
          case 34:
          case 35:
          case 36:
          case 37:
          case 38:
          case 39:
          case 40:
          case 41:
          case 42:
          case 43:
          case 44:
          case 45:
          case 46:
          case 47:
          case 58:
          case 59:
          case 60:
          case 61:
          case 62:
          case 63:
          case 64:
          case 91:
          case 92:
          case 93:
          case 94:
          case 95:
          case 96:
          case 123:
          case 124:
          case 125:
          case 126:
            return true;
          default:
            return false;
        }
      }, t2.isPunctChar = function(t3) {
        return f2.test(t3);
      }, t2.escapeRE = function(t3) {
        return t3.replace(p2, "\\$&");
      }, t2.normalizeReference = function(t3) {
        return t3 = t3.trim().replace(/\s+/g, " "), "\u1E9E".toLowerCase() === "\u1E7E" && (t3 = t3.replace(/ẞ/g, "\xDF")), t3.toLowerCase().toUpperCase();
      };
    }(zn);
    var xr = {};
    var Er = zn.unescapeAll;
    var Ar = zn.unescapeAll;
    xr.parseLinkLabel = function(t2, e2, n2) {
      var r2, i2, s2, a2, o2 = -1, u2 = t2.posMax, l2 = t2.pos;
      for (t2.pos = e2 + 1, r2 = 1; t2.pos < u2; ) {
        if ((s2 = t2.src.charCodeAt(t2.pos)) === 93 && --r2 === 0) {
          i2 = true;
          break;
        }
        if (a2 = t2.pos, t2.md.inline.skipToken(t2), s2 === 91) {
          if (a2 === t2.pos - 1)
            r2++;
          else if (n2)
            return t2.pos = l2, -1;
        }
      }
      return i2 && (o2 = t2.pos), t2.pos = l2, o2;
    }, xr.parseLinkDestination = function(t2, e2, n2) {
      var r2, i2, s2 = e2, a2 = { ok: false, pos: 0, lines: 0, str: "" };
      if (t2.charCodeAt(e2) === 60) {
        for (e2++; e2 < n2; ) {
          if ((r2 = t2.charCodeAt(e2)) === 10)
            return a2;
          if (r2 === 60)
            return a2;
          if (r2 === 62)
            return a2.pos = e2 + 1, a2.str = Er(t2.slice(s2 + 1, e2)), a2.ok = true, a2;
          r2 === 92 && e2 + 1 < n2 ? e2 += 2 : e2++;
        }
        return a2;
      }
      for (i2 = 0; e2 < n2 && (r2 = t2.charCodeAt(e2)) !== 32 && !(r2 < 32 || r2 === 127); )
        if (r2 === 92 && e2 + 1 < n2) {
          if (t2.charCodeAt(e2 + 1) === 32)
            break;
          e2 += 2;
        } else {
          if (r2 === 40 && ++i2 > 32)
            return a2;
          if (r2 === 41) {
            if (i2 === 0)
              break;
            i2--;
          }
          e2++;
        }
      return s2 === e2 || i2 !== 0 || (a2.str = Er(t2.slice(s2, e2)), a2.lines = 0, a2.pos = e2, a2.ok = true), a2;
    }, xr.parseLinkTitle = function(t2, e2, n2) {
      var r2, i2, s2 = 0, a2 = e2, o2 = { ok: false, pos: 0, lines: 0, str: "" };
      if (e2 >= n2)
        return o2;
      if ((i2 = t2.charCodeAt(e2)) !== 34 && i2 !== 39 && i2 !== 40)
        return o2;
      for (e2++, i2 === 40 && (i2 = 41); e2 < n2; ) {
        if ((r2 = t2.charCodeAt(e2)) === i2)
          return o2.pos = e2 + 1, o2.lines = s2, o2.str = Ar(t2.slice(a2 + 1, e2)), o2.ok = true, o2;
        if (r2 === 40 && i2 === 41)
          return o2;
        r2 === 10 ? s2++ : r2 === 92 && e2 + 1 < n2 && (e2++, t2.charCodeAt(e2) === 10 && s2++), e2++;
      }
      return o2;
    };
    var Cr = zn.assign;
    var Or = zn.unescapeAll;
    var Sr = zn.escapeHtml;
    var Tr = {};
    function Dr() {
      this.rules = Cr({}, Tr);
    }
    Tr.code_inline = function(t2, e2, n2, r2, i2) {
      var s2 = t2[e2];
      return "<code" + i2.renderAttrs(s2) + ">" + Sr(t2[e2].content) + "</code>";
    }, Tr.code_block = function(t2, e2, n2, r2, i2) {
      var s2 = t2[e2];
      return "<pre" + i2.renderAttrs(s2) + "><code>" + Sr(t2[e2].content) + "</code></pre>\n";
    }, Tr.fence = function(t2, e2, n2, r2, i2) {
      var s2, a2, o2, u2, l2, c2 = t2[e2], _2 = c2.info ? Or(c2.info).trim() : "", h2 = "", p2 = "";
      return _2 && (h2 = (o2 = _2.split(/(\s+)/g))[0], p2 = o2.slice(2).join("")), (s2 = n2.highlight && n2.highlight(c2.content, h2, p2) || Sr(c2.content)).indexOf("<pre") === 0 ? s2 + "\n" : _2 ? (a2 = c2.attrIndex("class"), u2 = c2.attrs ? c2.attrs.slice() : [], a2 < 0 ? u2.push(["class", n2.langPrefix + h2]) : (u2[a2] = u2[a2].slice(), u2[a2][1] += " " + n2.langPrefix + h2), l2 = { attrs: u2 }, "<pre><code" + i2.renderAttrs(l2) + ">" + s2 + "</code></pre>\n") : "<pre><code" + i2.renderAttrs(c2) + ">" + s2 + "</code></pre>\n";
    }, Tr.image = function(t2, e2, n2, r2, i2) {
      var s2 = t2[e2];
      return s2.attrs[s2.attrIndex("alt")][1] = i2.renderInlineAsText(s2.children, n2, r2), i2.renderToken(t2, e2, n2);
    }, Tr.hardbreak = function(t2, e2, n2) {
      return n2.xhtmlOut ? "<br />\n" : "<br>\n";
    }, Tr.softbreak = function(t2, e2, n2) {
      return n2.breaks ? n2.xhtmlOut ? "<br />\n" : "<br>\n" : "\n";
    }, Tr.text = function(t2, e2) {
      return Sr(t2[e2].content);
    }, Tr.html_block = function(t2, e2) {
      return t2[e2].content;
    }, Tr.html_inline = function(t2, e2) {
      return t2[e2].content;
    }, Dr.prototype.renderAttrs = function(t2) {
      var e2, n2, r2;
      if (!t2.attrs)
        return "";
      for (r2 = "", e2 = 0, n2 = t2.attrs.length; e2 < n2; e2++)
        r2 += " " + Sr(t2.attrs[e2][0]) + '="' + Sr(t2.attrs[e2][1]) + '"';
      return r2;
    }, Dr.prototype.renderToken = function(t2, e2, n2) {
      var r2, i2 = "", s2 = false, a2 = t2[e2];
      return a2.hidden ? "" : (a2.block && a2.nesting !== -1 && e2 && t2[e2 - 1].hidden && (i2 += "\n"), i2 += (a2.nesting === -1 ? "</" : "<") + a2.tag, i2 += this.renderAttrs(a2), a2.nesting === 0 && n2.xhtmlOut && (i2 += " /"), a2.block && (s2 = true, a2.nesting === 1 && e2 + 1 < t2.length && ((r2 = t2[e2 + 1]).type === "inline" || r2.hidden || r2.nesting === -1 && r2.tag === a2.tag) && (s2 = false)), i2 += s2 ? ">\n" : ">");
    }, Dr.prototype.renderInline = function(t2, e2, n2) {
      for (var r2, i2 = "", s2 = this.rules, a2 = 0, o2 = t2.length; a2 < o2; a2++)
        s2[r2 = t2[a2].type] !== void 0 ? i2 += s2[r2](t2, a2, e2, n2, this) : i2 += this.renderToken(t2, a2, e2);
      return i2;
    }, Dr.prototype.renderInlineAsText = function(t2, e2, n2) {
      for (var r2 = "", i2 = 0, s2 = t2.length; i2 < s2; i2++)
        t2[i2].type === "text" ? r2 += t2[i2].content : t2[i2].type === "image" ? r2 += this.renderInlineAsText(t2[i2].children, e2, n2) : t2[i2].type === "softbreak" && (r2 += "\n");
      return r2;
    }, Dr.prototype.render = function(t2, e2, n2) {
      var r2, i2, s2, a2 = "", o2 = this.rules;
      for (r2 = 0, i2 = t2.length; r2 < i2; r2++)
        (s2 = t2[r2].type) === "inline" ? a2 += this.renderInline(t2[r2].children, e2, n2) : o2[s2] !== void 0 ? a2 += o2[t2[r2].type](t2, r2, e2, n2, this) : a2 += this.renderToken(t2, r2, e2, n2);
      return a2;
    };
    var Rr = Dr;
    function Lr() {
      this.__rules__ = [], this.__cache__ = null;
    }
    Lr.prototype.__find__ = function(t2) {
      for (var e2 = 0; e2 < this.__rules__.length; e2++)
        if (this.__rules__[e2].name === t2)
          return e2;
      return -1;
    }, Lr.prototype.__compile__ = function() {
      var t2 = this, e2 = [""];
      t2.__rules__.forEach(function(t3) {
        t3.enabled && t3.alt.forEach(function(t4) {
          e2.indexOf(t4) < 0 && e2.push(t4);
        });
      }), t2.__cache__ = {}, e2.forEach(function(e3) {
        t2.__cache__[e3] = [], t2.__rules__.forEach(function(n2) {
          n2.enabled && (e3 && n2.alt.indexOf(e3) < 0 || t2.__cache__[e3].push(n2.fn));
        });
      });
    }, Lr.prototype.at = function(t2, e2, n2) {
      var r2 = this.__find__(t2), i2 = n2 || {};
      if (r2 === -1)
        throw new Error("Parser rule not found: " + t2);
      this.__rules__[r2].fn = e2, this.__rules__[r2].alt = i2.alt || [], this.__cache__ = null;
    }, Lr.prototype.before = function(t2, e2, n2, r2) {
      var i2 = this.__find__(t2), s2 = r2 || {};
      if (i2 === -1)
        throw new Error("Parser rule not found: " + t2);
      this.__rules__.splice(i2, 0, { name: e2, enabled: true, fn: n2, alt: s2.alt || [] }), this.__cache__ = null;
    }, Lr.prototype.after = function(t2, e2, n2, r2) {
      var i2 = this.__find__(t2), s2 = r2 || {};
      if (i2 === -1)
        throw new Error("Parser rule not found: " + t2);
      this.__rules__.splice(i2 + 1, 0, { name: e2, enabled: true, fn: n2, alt: s2.alt || [] }), this.__cache__ = null;
    }, Lr.prototype.push = function(t2, e2, n2) {
      var r2 = n2 || {};
      this.__rules__.push({ name: t2, enabled: true, fn: e2, alt: r2.alt || [] }), this.__cache__ = null;
    }, Lr.prototype.enable = function(t2, e2) {
      Array.isArray(t2) || (t2 = [t2]);
      var n2 = [];
      return t2.forEach(function(t3) {
        var r2 = this.__find__(t3);
        if (r2 < 0) {
          if (e2)
            return;
          throw new Error("Rules manager: invalid rule name " + t3);
        }
        this.__rules__[r2].enabled = true, n2.push(t3);
      }, this), this.__cache__ = null, n2;
    }, Lr.prototype.enableOnly = function(t2, e2) {
      Array.isArray(t2) || (t2 = [t2]), this.__rules__.forEach(function(t3) {
        t3.enabled = false;
      }), this.enable(t2, e2);
    }, Lr.prototype.disable = function(t2, e2) {
      Array.isArray(t2) || (t2 = [t2]);
      var n2 = [];
      return t2.forEach(function(t3) {
        var r2 = this.__find__(t3);
        if (r2 < 0) {
          if (e2)
            return;
          throw new Error("Rules manager: invalid rule name " + t3);
        }
        this.__rules__[r2].enabled = false, n2.push(t3);
      }, this), this.__cache__ = null, n2;
    }, Lr.prototype.getRules = function(t2) {
      return this.__cache__ === null && this.__compile__(), this.__cache__[t2] || [];
    };
    var Nr = Lr;
    var jr = /\r\n?|\n/g;
    var qr = /\0/g;
    var Mr = zn.arrayReplaceAt;
    function Fr(t2) {
      return /^<\/a\s*>/i.test(t2);
    }
    var zr = /\+-|\.\.|\?\?\?\?|!!!!|,,|--/;
    var Ir = /\((c|tm|r)\)/i;
    var Pr = /\((c|tm|r)\)/gi;
    var Br = { c: "\xA9", r: "\xAE", tm: "\u2122" };
    function $r(t2, e2) {
      return Br[e2.toLowerCase()];
    }
    function Ur(t2) {
      var e2, n2, r2 = 0;
      for (e2 = t2.length - 1; e2 >= 0; e2--)
        (n2 = t2[e2]).type !== "text" || r2 || (n2.content = n2.content.replace(Pr, $r)), n2.type === "link_open" && n2.info === "auto" && r2--, n2.type === "link_close" && n2.info === "auto" && r2++;
    }
    function Wr(t2) {
      var e2, n2, r2 = 0;
      for (e2 = t2.length - 1; e2 >= 0; e2--)
        (n2 = t2[e2]).type !== "text" || r2 || zr.test(n2.content) && (n2.content = n2.content.replace(/\+-/g, "\xB1").replace(/\.{2,}/g, "\u2026").replace(/([?!])…/g, "$1..").replace(/([?!]){4,}/g, "$1$1$1").replace(/,{2,}/g, ",").replace(/(^|[^-])---(?=[^-]|$)/gm, "$1\u2014").replace(/(^|\s)--(?=\s|$)/gm, "$1\u2013").replace(/(^|[^-\s])--(?=[^-\s]|$)/gm, "$1\u2013")), n2.type === "link_open" && n2.info === "auto" && r2--, n2.type === "link_close" && n2.info === "auto" && r2++;
    }
    var Gr = zn.isWhiteSpace;
    var Vr = zn.isPunctChar;
    var Kr = zn.isMdAsciiPunct;
    var Hr = /['"]/;
    var Zr = /['"]/g;
    function Xr(t2, e2, n2) {
      return t2.slice(0, e2) + n2 + t2.slice(e2 + 1);
    }
    function Qr(t2, e2) {
      var n2, r2, i2, s2, a2, o2, u2, l2, c2, _2, h2, p2, f2, d2, g2, m2, b2, y2, k2, v2, w2;
      for (k2 = [], n2 = 0; n2 < t2.length; n2++) {
        for (r2 = t2[n2], u2 = t2[n2].level, b2 = k2.length - 1; b2 >= 0 && !(k2[b2].level <= u2); b2--)
          ;
        if (k2.length = b2 + 1, r2.type === "text") {
          a2 = 0, o2 = (i2 = r2.content).length;
          t:
            for (; a2 < o2 && (Zr.lastIndex = a2, s2 = Zr.exec(i2)); ) {
              if (g2 = m2 = true, a2 = s2.index + 1, y2 = s2[0] === "'", c2 = 32, s2.index - 1 >= 0)
                c2 = i2.charCodeAt(s2.index - 1);
              else
                for (b2 = n2 - 1; b2 >= 0 && (t2[b2].type !== "softbreak" && t2[b2].type !== "hardbreak"); b2--)
                  if (t2[b2].content) {
                    c2 = t2[b2].content.charCodeAt(t2[b2].content.length - 1);
                    break;
                  }
              if (_2 = 32, a2 < o2)
                _2 = i2.charCodeAt(a2);
              else
                for (b2 = n2 + 1; b2 < t2.length && (t2[b2].type !== "softbreak" && t2[b2].type !== "hardbreak"); b2++)
                  if (t2[b2].content) {
                    _2 = t2[b2].content.charCodeAt(0);
                    break;
                  }
              if (h2 = Kr(c2) || Vr(String.fromCharCode(c2)), p2 = Kr(_2) || Vr(String.fromCharCode(_2)), f2 = Gr(c2), (d2 = Gr(_2)) ? g2 = false : p2 && (f2 || h2 || (g2 = false)), f2 ? m2 = false : h2 && (d2 || p2 || (m2 = false)), _2 === 34 && s2[0] === '"' && c2 >= 48 && c2 <= 57 && (m2 = g2 = false), g2 && m2 && (g2 = h2, m2 = p2), g2 || m2) {
                if (m2) {
                  for (b2 = k2.length - 1; b2 >= 0 && (l2 = k2[b2], !(k2[b2].level < u2)); b2--)
                    if (l2.single === y2 && k2[b2].level === u2) {
                      l2 = k2[b2], y2 ? (v2 = e2.md.options.quotes[2], w2 = e2.md.options.quotes[3]) : (v2 = e2.md.options.quotes[0], w2 = e2.md.options.quotes[1]), r2.content = Xr(r2.content, s2.index, w2), t2[l2.token].content = Xr(t2[l2.token].content, l2.pos, v2), a2 += w2.length - 1, l2.token === n2 && (a2 += v2.length - 1), o2 = (i2 = r2.content).length, k2.length = b2;
                      continue t;
                    }
                }
                g2 ? k2.push({ token: n2, pos: s2.index, single: y2, level: u2 }) : m2 && y2 && (r2.content = Xr(r2.content, s2.index, "\u2019"));
              } else
                y2 && (r2.content = Xr(r2.content, s2.index, "\u2019"));
            }
        }
      }
    }
    function Jr(t2, e2, n2) {
      this.type = t2, this.tag = e2, this.attrs = null, this.map = null, this.nesting = n2, this.level = 0, this.children = null, this.content = "", this.markup = "", this.info = "", this.meta = null, this.block = false, this.hidden = false;
    }
    Jr.prototype.attrIndex = function(t2) {
      var e2, n2, r2;
      if (!this.attrs)
        return -1;
      for (n2 = 0, r2 = (e2 = this.attrs).length; n2 < r2; n2++)
        if (e2[n2][0] === t2)
          return n2;
      return -1;
    }, Jr.prototype.attrPush = function(t2) {
      this.attrs ? this.attrs.push(t2) : this.attrs = [t2];
    }, Jr.prototype.attrSet = function(t2, e2) {
      var n2 = this.attrIndex(t2), r2 = [t2, e2];
      n2 < 0 ? this.attrPush(r2) : this.attrs[n2] = r2;
    }, Jr.prototype.attrGet = function(t2) {
      var e2 = this.attrIndex(t2), n2 = null;
      return e2 >= 0 && (n2 = this.attrs[e2][1]), n2;
    }, Jr.prototype.attrJoin = function(t2, e2) {
      var n2 = this.attrIndex(t2);
      n2 < 0 ? this.attrPush([t2, e2]) : this.attrs[n2][1] = this.attrs[n2][1] + " " + e2;
    };
    var Yr = Jr;
    var ti = Yr;
    function ei(t2, e2, n2) {
      this.src = t2, this.env = n2, this.tokens = [], this.inlineMode = false, this.md = e2;
    }
    ei.prototype.Token = ti;
    var ni = ei;
    var ri = Nr;
    var ii = [["normalize", function(t2) {
      var e2;
      e2 = (e2 = t2.src.replace(jr, "\n")).replace(qr, "\uFFFD"), t2.src = e2;
    }], ["block", function(t2) {
      var e2;
      t2.inlineMode ? ((e2 = new t2.Token("inline", "", 0)).content = t2.src, e2.map = [0, 1], e2.children = [], t2.tokens.push(e2)) : t2.md.block.parse(t2.src, t2.md, t2.env, t2.tokens);
    }], ["inline", function(t2) {
      var e2, n2, r2, i2 = t2.tokens;
      for (n2 = 0, r2 = i2.length; n2 < r2; n2++)
        (e2 = i2[n2]).type === "inline" && t2.md.inline.parse(e2.content, t2.md, t2.env, e2.children);
    }], ["linkify", function(t2) {
      var e2, n2, r2, i2, s2, a2, o2, u2, l2, c2, _2, h2, p2, f2, d2, g2, m2, b2, y2 = t2.tokens;
      if (t2.md.options.linkify) {
        for (n2 = 0, r2 = y2.length; n2 < r2; n2++)
          if (y2[n2].type === "inline" && t2.md.linkify.pretest(y2[n2].content))
            for (p2 = 0, e2 = (i2 = y2[n2].children).length - 1; e2 >= 0; e2--)
              if ((a2 = i2[e2]).type !== "link_close") {
                if (a2.type === "html_inline" && (b2 = a2.content, /^<a[>\s]/i.test(b2) && p2 > 0 && p2--, Fr(a2.content) && p2++), !(p2 > 0) && a2.type === "text" && t2.md.linkify.test(a2.content)) {
                  for (l2 = a2.content, m2 = t2.md.linkify.match(l2), o2 = [], h2 = a2.level, _2 = 0, m2.length > 0 && m2[0].index === 0 && e2 > 0 && i2[e2 - 1].type === "text_special" && (m2 = m2.slice(1)), u2 = 0; u2 < m2.length; u2++)
                    f2 = m2[u2].url, d2 = t2.md.normalizeLink(f2), t2.md.validateLink(d2) && (g2 = m2[u2].text, g2 = m2[u2].schema ? m2[u2].schema !== "mailto:" || /^mailto:/i.test(g2) ? t2.md.normalizeLinkText(g2) : t2.md.normalizeLinkText("mailto:" + g2).replace(/^mailto:/, "") : t2.md.normalizeLinkText("http://" + g2).replace(/^http:\/\//, ""), (c2 = m2[u2].index) > _2 && ((s2 = new t2.Token("text", "", 0)).content = l2.slice(_2, c2), s2.level = h2, o2.push(s2)), (s2 = new t2.Token("link_open", "a", 1)).attrs = [["href", d2]], s2.level = h2++, s2.markup = "linkify", s2.info = "auto", o2.push(s2), (s2 = new t2.Token("text", "", 0)).content = g2, s2.level = h2, o2.push(s2), (s2 = new t2.Token("link_close", "a", -1)).level = --h2, s2.markup = "linkify", s2.info = "auto", o2.push(s2), _2 = m2[u2].lastIndex);
                  _2 < l2.length && ((s2 = new t2.Token("text", "", 0)).content = l2.slice(_2), s2.level = h2, o2.push(s2)), y2[n2].children = i2 = Mr(i2, e2, o2);
                }
              } else
                for (e2--; i2[e2].level !== a2.level && i2[e2].type !== "link_open"; )
                  e2--;
      }
    }], ["replacements", function(t2) {
      var e2;
      if (t2.md.options.typographer)
        for (e2 = t2.tokens.length - 1; e2 >= 0; e2--)
          t2.tokens[e2].type === "inline" && (Ir.test(t2.tokens[e2].content) && Ur(t2.tokens[e2].children), zr.test(t2.tokens[e2].content) && Wr(t2.tokens[e2].children));
    }], ["smartquotes", function(t2) {
      var e2;
      if (t2.md.options.typographer)
        for (e2 = t2.tokens.length - 1; e2 >= 0; e2--)
          t2.tokens[e2].type === "inline" && Hr.test(t2.tokens[e2].content) && Qr(t2.tokens[e2].children, t2);
    }], ["text_join", function(t2) {
      var e2, n2, r2, i2, s2, a2, o2 = t2.tokens;
      for (e2 = 0, n2 = o2.length; e2 < n2; e2++)
        if (o2[e2].type === "inline") {
          for (s2 = (r2 = o2[e2].children).length, i2 = 0; i2 < s2; i2++)
            r2[i2].type === "text_special" && (r2[i2].type = "text");
          for (i2 = a2 = 0; i2 < s2; i2++)
            r2[i2].type === "text" && i2 + 1 < s2 && r2[i2 + 1].type === "text" ? r2[i2 + 1].content = r2[i2].content + r2[i2 + 1].content : (i2 !== a2 && (r2[a2] = r2[i2]), a2++);
          i2 !== a2 && (r2.length = a2);
        }
    }]];
    function si() {
      this.ruler = new ri();
      for (var t2 = 0; t2 < ii.length; t2++)
        this.ruler.push(ii[t2][0], ii[t2][1]);
    }
    si.prototype.process = function(t2) {
      var e2, n2, r2;
      for (e2 = 0, n2 = (r2 = this.ruler.getRules("")).length; e2 < n2; e2++)
        r2[e2](t2);
    }, si.prototype.State = ni;
    var ai = si;
    var oi = zn.isSpace;
    function ui(t2, e2) {
      var n2 = t2.bMarks[e2] + t2.tShift[e2], r2 = t2.eMarks[e2];
      return t2.src.slice(n2, r2);
    }
    function li(t2) {
      var e2, n2 = [], r2 = 0, i2 = t2.length, s2 = false, a2 = 0, o2 = "";
      for (e2 = t2.charCodeAt(r2); r2 < i2; )
        e2 === 124 && (s2 ? (o2 += t2.substring(a2, r2 - 1), a2 = r2) : (n2.push(o2 + t2.substring(a2, r2)), o2 = "", a2 = r2 + 1)), s2 = e2 === 92, r2++, e2 = t2.charCodeAt(r2);
      return n2.push(o2 + t2.substring(a2)), n2;
    }
    var ci = zn.isSpace;
    var _i = zn.isSpace;
    var hi = zn.isSpace;
    function pi(t2, e2) {
      var n2, r2, i2, s2;
      return r2 = t2.bMarks[e2] + t2.tShift[e2], i2 = t2.eMarks[e2], (n2 = t2.src.charCodeAt(r2++)) !== 42 && n2 !== 45 && n2 !== 43 || r2 < i2 && (s2 = t2.src.charCodeAt(r2), !hi(s2)) ? -1 : r2;
    }
    function fi(t2, e2) {
      var n2, r2 = t2.bMarks[e2] + t2.tShift[e2], i2 = r2, s2 = t2.eMarks[e2];
      if (i2 + 1 >= s2)
        return -1;
      if ((n2 = t2.src.charCodeAt(i2++)) < 48 || n2 > 57)
        return -1;
      for (; ; ) {
        if (i2 >= s2)
          return -1;
        if (!((n2 = t2.src.charCodeAt(i2++)) >= 48 && n2 <= 57)) {
          if (n2 === 41 || n2 === 46)
            break;
          return -1;
        }
        if (i2 - r2 >= 10)
          return -1;
      }
      return i2 < s2 && (n2 = t2.src.charCodeAt(i2), !hi(n2)) ? -1 : i2;
    }
    var di = zn.normalizeReference;
    var gi = zn.isSpace;
    var mi = {};
    var bi = `<[A-Za-z][A-Za-z0-9\\-]*(?:\\s+[a-zA-Z_:][a-zA-Z0-9:._-]*(?:\\s*=\\s*(?:[^"'=<>\`\\x00-\\x20]+|'[^']*'|"[^"]*"))?)*\\s*\\/?>`;
    var yi = "<\\/[A-Za-z][A-Za-z0-9\\-]*\\s*>";
    var ki = new RegExp("^(?:" + bi + "|" + yi + "|<!---->|<!--(?:-?[^>-])(?:-?[^-])*-->|<[?][\\s\\S]*?[?]>|<![A-Z]+\\s+[^>]*>|<!\\[CDATA\\[[\\s\\S]*?\\]\\]>)");
    var vi = new RegExp("^(?:" + bi + "|" + yi + ")");
    mi.HTML_TAG_RE = ki, mi.HTML_OPEN_CLOSE_TAG_RE = vi;
    var wi = ["address", "article", "aside", "base", "basefont", "blockquote", "body", "caption", "center", "col", "colgroup", "dd", "details", "dialog", "dir", "div", "dl", "dt", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hr", "html", "iframe", "legend", "li", "link", "main", "menu", "menuitem", "nav", "noframes", "ol", "optgroup", "option", "p", "param", "section", "source", "summary", "table", "tbody", "td", "tfoot", "th", "thead", "title", "tr", "track", "ul"];
    var xi = mi.HTML_OPEN_CLOSE_TAG_RE;
    var Ei = [[/^<(script|pre|style|textarea)(?=(\s|>|$))/i, /<\/(script|pre|style|textarea)>/i, true], [/^<!--/, /-->/, true], [/^<\?/, /\?>/, true], [/^<![A-Z]/, />/, true], [/^<!\[CDATA\[/, /\]\]>/, true], [new RegExp("^</?(" + wi.join("|") + ")(?=(\\s|/?>|$))", "i"), /^$/, true], [new RegExp(xi.source + "\\s*$"), /^$/, false]];
    var Ai = zn.isSpace;
    var Ci = Yr;
    var Oi = zn.isSpace;
    function Si(t2, e2, n2, r2) {
      var i2, s2, a2, o2, u2, l2, c2, _2;
      for (this.src = t2, this.md = e2, this.env = n2, this.tokens = r2, this.bMarks = [], this.eMarks = [], this.tShift = [], this.sCount = [], this.bsCount = [], this.blkIndent = 0, this.line = 0, this.lineMax = 0, this.tight = false, this.ddIndent = -1, this.listIndent = -1, this.parentType = "root", this.level = 0, this.result = "", _2 = false, a2 = o2 = l2 = c2 = 0, u2 = (s2 = this.src).length; o2 < u2; o2++) {
        if (i2 = s2.charCodeAt(o2), !_2) {
          if (Oi(i2)) {
            l2++, i2 === 9 ? c2 += 4 - c2 % 4 : c2++;
            continue;
          }
          _2 = true;
        }
        i2 !== 10 && o2 !== u2 - 1 || (i2 !== 10 && o2++, this.bMarks.push(a2), this.eMarks.push(o2), this.tShift.push(l2), this.sCount.push(c2), this.bsCount.push(0), _2 = false, l2 = 0, c2 = 0, a2 = o2 + 1);
      }
      this.bMarks.push(s2.length), this.eMarks.push(s2.length), this.tShift.push(0), this.sCount.push(0), this.bsCount.push(0), this.lineMax = this.bMarks.length - 1;
    }
    Si.prototype.push = function(t2, e2, n2) {
      var r2 = new Ci(t2, e2, n2);
      return r2.block = true, n2 < 0 && this.level--, r2.level = this.level, n2 > 0 && this.level++, this.tokens.push(r2), r2;
    }, Si.prototype.isEmpty = function(t2) {
      return this.bMarks[t2] + this.tShift[t2] >= this.eMarks[t2];
    }, Si.prototype.skipEmptyLines = function(t2) {
      for (var e2 = this.lineMax; t2 < e2 && !(this.bMarks[t2] + this.tShift[t2] < this.eMarks[t2]); t2++)
        ;
      return t2;
    }, Si.prototype.skipSpaces = function(t2) {
      for (var e2, n2 = this.src.length; t2 < n2 && (e2 = this.src.charCodeAt(t2), Oi(e2)); t2++)
        ;
      return t2;
    }, Si.prototype.skipSpacesBack = function(t2, e2) {
      if (t2 <= e2)
        return t2;
      for (; t2 > e2; )
        if (!Oi(this.src.charCodeAt(--t2)))
          return t2 + 1;
      return t2;
    }, Si.prototype.skipChars = function(t2, e2) {
      for (var n2 = this.src.length; t2 < n2 && this.src.charCodeAt(t2) === e2; t2++)
        ;
      return t2;
    }, Si.prototype.skipCharsBack = function(t2, e2, n2) {
      if (t2 <= n2)
        return t2;
      for (; t2 > n2; )
        if (e2 !== this.src.charCodeAt(--t2))
          return t2 + 1;
      return t2;
    }, Si.prototype.getLines = function(t2, e2, n2, r2) {
      var i2, s2, a2, o2, u2, l2, c2, _2 = t2;
      if (t2 >= e2)
        return "";
      for (l2 = new Array(e2 - t2), i2 = 0; _2 < e2; _2++, i2++) {
        for (s2 = 0, c2 = o2 = this.bMarks[_2], u2 = _2 + 1 < e2 || r2 ? this.eMarks[_2] + 1 : this.eMarks[_2]; o2 < u2 && s2 < n2; ) {
          if (a2 = this.src.charCodeAt(o2), Oi(a2))
            a2 === 9 ? s2 += 4 - (s2 + this.bsCount[_2]) % 4 : s2++;
          else {
            if (!(o2 - c2 < this.tShift[_2]))
              break;
            s2++;
          }
          o2++;
        }
        l2[i2] = s2 > n2 ? new Array(s2 - n2 + 1).join(" ") + this.src.slice(o2, u2) : this.src.slice(o2, u2);
      }
      return l2.join("");
    }, Si.prototype.Token = Ci;
    var Ti = Si;
    var Di = Nr;
    var Ri = [["table", function(t2, e2, n2, r2) {
      var i2, s2, a2, o2, u2, l2, c2, _2, h2, p2, f2, d2, g2, m2, b2, y2, k2, v2;
      if (e2 + 2 > n2)
        return false;
      if (l2 = e2 + 1, t2.sCount[l2] < t2.blkIndent)
        return false;
      if (t2.sCount[l2] - t2.blkIndent >= 4)
        return false;
      if ((a2 = t2.bMarks[l2] + t2.tShift[l2]) >= t2.eMarks[l2])
        return false;
      if ((k2 = t2.src.charCodeAt(a2++)) !== 124 && k2 !== 45 && k2 !== 58)
        return false;
      if (a2 >= t2.eMarks[l2])
        return false;
      if ((v2 = t2.src.charCodeAt(a2++)) !== 124 && v2 !== 45 && v2 !== 58 && !oi(v2))
        return false;
      if (k2 === 45 && oi(v2))
        return false;
      for (; a2 < t2.eMarks[l2]; ) {
        if ((i2 = t2.src.charCodeAt(a2)) !== 124 && i2 !== 45 && i2 !== 58 && !oi(i2))
          return false;
        a2++;
      }
      for (c2 = (s2 = ui(t2, e2 + 1)).split("|"), p2 = [], o2 = 0; o2 < c2.length; o2++) {
        if (!(f2 = c2[o2].trim())) {
          if (o2 === 0 || o2 === c2.length - 1)
            continue;
          return false;
        }
        if (!/^:?-+:?$/.test(f2))
          return false;
        f2.charCodeAt(f2.length - 1) === 58 ? p2.push(f2.charCodeAt(0) === 58 ? "center" : "right") : f2.charCodeAt(0) === 58 ? p2.push("left") : p2.push("");
      }
      if ((s2 = ui(t2, e2).trim()).indexOf("|") === -1)
        return false;
      if (t2.sCount[e2] - t2.blkIndent >= 4)
        return false;
      if ((c2 = li(s2)).length && c2[0] === "" && c2.shift(), c2.length && c2[c2.length - 1] === "" && c2.pop(), (_2 = c2.length) === 0 || _2 !== p2.length)
        return false;
      if (r2)
        return true;
      for (m2 = t2.parentType, t2.parentType = "table", y2 = t2.md.block.ruler.getRules("blockquote"), (h2 = t2.push("table_open", "table", 1)).map = d2 = [e2, 0], (h2 = t2.push("thead_open", "thead", 1)).map = [e2, e2 + 1], (h2 = t2.push("tr_open", "tr", 1)).map = [e2, e2 + 1], o2 = 0; o2 < c2.length; o2++)
        h2 = t2.push("th_open", "th", 1), p2[o2] && (h2.attrs = [["style", "text-align:" + p2[o2]]]), (h2 = t2.push("inline", "", 0)).content = c2[o2].trim(), h2.children = [], h2 = t2.push("th_close", "th", -1);
      for (h2 = t2.push("tr_close", "tr", -1), h2 = t2.push("thead_close", "thead", -1), l2 = e2 + 2; l2 < n2 && !(t2.sCount[l2] < t2.blkIndent); l2++) {
        for (b2 = false, o2 = 0, u2 = y2.length; o2 < u2; o2++)
          if (y2[o2](t2, l2, n2, true)) {
            b2 = true;
            break;
          }
        if (b2)
          break;
        if (!(s2 = ui(t2, l2).trim()))
          break;
        if (t2.sCount[l2] - t2.blkIndent >= 4)
          break;
        for ((c2 = li(s2)).length && c2[0] === "" && c2.shift(), c2.length && c2[c2.length - 1] === "" && c2.pop(), l2 === e2 + 2 && ((h2 = t2.push("tbody_open", "tbody", 1)).map = g2 = [e2 + 2, 0]), (h2 = t2.push("tr_open", "tr", 1)).map = [l2, l2 + 1], o2 = 0; o2 < _2; o2++)
          h2 = t2.push("td_open", "td", 1), p2[o2] && (h2.attrs = [["style", "text-align:" + p2[o2]]]), (h2 = t2.push("inline", "", 0)).content = c2[o2] ? c2[o2].trim() : "", h2.children = [], h2 = t2.push("td_close", "td", -1);
        h2 = t2.push("tr_close", "tr", -1);
      }
      return g2 && (h2 = t2.push("tbody_close", "tbody", -1), g2[1] = l2), h2 = t2.push("table_close", "table", -1), d2[1] = l2, t2.parentType = m2, t2.line = l2, true;
    }, ["paragraph", "reference"]], ["code", function(t2, e2, n2) {
      var r2, i2, s2;
      if (t2.sCount[e2] - t2.blkIndent < 4)
        return false;
      for (i2 = r2 = e2 + 1; r2 < n2; )
        if (t2.isEmpty(r2))
          r2++;
        else {
          if (!(t2.sCount[r2] - t2.blkIndent >= 4))
            break;
          i2 = ++r2;
        }
      return t2.line = i2, (s2 = t2.push("code_block", "code", 0)).content = t2.getLines(e2, i2, 4 + t2.blkIndent, false) + "\n", s2.map = [e2, t2.line], true;
    }], ["fence", function(t2, e2, n2, r2) {
      var i2, s2, a2, o2, u2, l2, c2, _2 = false, h2 = t2.bMarks[e2] + t2.tShift[e2], p2 = t2.eMarks[e2];
      if (t2.sCount[e2] - t2.blkIndent >= 4)
        return false;
      if (h2 + 3 > p2)
        return false;
      if ((i2 = t2.src.charCodeAt(h2)) !== 126 && i2 !== 96)
        return false;
      if (u2 = h2, (s2 = (h2 = t2.skipChars(h2, i2)) - u2) < 3)
        return false;
      if (c2 = t2.src.slice(u2, h2), a2 = t2.src.slice(h2, p2), i2 === 96 && a2.indexOf(String.fromCharCode(i2)) >= 0)
        return false;
      if (r2)
        return true;
      for (o2 = e2; !(++o2 >= n2) && !((h2 = u2 = t2.bMarks[o2] + t2.tShift[o2]) < (p2 = t2.eMarks[o2]) && t2.sCount[o2] < t2.blkIndent); )
        if (t2.src.charCodeAt(h2) === i2 && !(t2.sCount[o2] - t2.blkIndent >= 4 || (h2 = t2.skipChars(h2, i2)) - u2 < s2 || (h2 = t2.skipSpaces(h2)) < p2)) {
          _2 = true;
          break;
        }
      return s2 = t2.sCount[e2], t2.line = o2 + (_2 ? 1 : 0), (l2 = t2.push("fence", "code", 0)).info = a2, l2.content = t2.getLines(e2 + 1, o2, s2, true), l2.markup = c2, l2.map = [e2, t2.line], true;
    }, ["paragraph", "reference", "blockquote", "list"]], ["blockquote", function(t2, e2, n2, r2) {
      var i2, s2, a2, o2, u2, l2, c2, _2, h2, p2, f2, d2, g2, m2, b2, y2, k2, v2, w2, x2, E2 = t2.lineMax, A2 = t2.bMarks[e2] + t2.tShift[e2], C2 = t2.eMarks[e2];
      if (t2.sCount[e2] - t2.blkIndent >= 4)
        return false;
      if (t2.src.charCodeAt(A2++) !== 62)
        return false;
      if (r2)
        return true;
      for (o2 = h2 = t2.sCount[e2] + 1, t2.src.charCodeAt(A2) === 32 ? (A2++, o2++, h2++, i2 = false, y2 = true) : t2.src.charCodeAt(A2) === 9 ? (y2 = true, (t2.bsCount[e2] + h2) % 4 == 3 ? (A2++, o2++, h2++, i2 = false) : i2 = true) : y2 = false, p2 = [t2.bMarks[e2]], t2.bMarks[e2] = A2; A2 < C2 && (s2 = t2.src.charCodeAt(A2), ci(s2)); )
        s2 === 9 ? h2 += 4 - (h2 + t2.bsCount[e2] + (i2 ? 1 : 0)) % 4 : h2++, A2++;
      for (f2 = [t2.bsCount[e2]], t2.bsCount[e2] = t2.sCount[e2] + 1 + (y2 ? 1 : 0), l2 = A2 >= C2, m2 = [t2.sCount[e2]], t2.sCount[e2] = h2 - o2, b2 = [t2.tShift[e2]], t2.tShift[e2] = A2 - t2.bMarks[e2], v2 = t2.md.block.ruler.getRules("blockquote"), g2 = t2.parentType, t2.parentType = "blockquote", _2 = e2 + 1; _2 < n2 && (x2 = t2.sCount[_2] < t2.blkIndent, !((A2 = t2.bMarks[_2] + t2.tShift[_2]) >= (C2 = t2.eMarks[_2]))); _2++)
        if (t2.src.charCodeAt(A2++) !== 62 || x2) {
          if (l2)
            break;
          for (k2 = false, a2 = 0, u2 = v2.length; a2 < u2; a2++)
            if (v2[a2](t2, _2, n2, true)) {
              k2 = true;
              break;
            }
          if (k2) {
            t2.lineMax = _2, t2.blkIndent !== 0 && (p2.push(t2.bMarks[_2]), f2.push(t2.bsCount[_2]), b2.push(t2.tShift[_2]), m2.push(t2.sCount[_2]), t2.sCount[_2] -= t2.blkIndent);
            break;
          }
          p2.push(t2.bMarks[_2]), f2.push(t2.bsCount[_2]), b2.push(t2.tShift[_2]), m2.push(t2.sCount[_2]), t2.sCount[_2] = -1;
        } else {
          for (o2 = h2 = t2.sCount[_2] + 1, t2.src.charCodeAt(A2) === 32 ? (A2++, o2++, h2++, i2 = false, y2 = true) : t2.src.charCodeAt(A2) === 9 ? (y2 = true, (t2.bsCount[_2] + h2) % 4 == 3 ? (A2++, o2++, h2++, i2 = false) : i2 = true) : y2 = false, p2.push(t2.bMarks[_2]), t2.bMarks[_2] = A2; A2 < C2 && (s2 = t2.src.charCodeAt(A2), ci(s2)); )
            s2 === 9 ? h2 += 4 - (h2 + t2.bsCount[_2] + (i2 ? 1 : 0)) % 4 : h2++, A2++;
          l2 = A2 >= C2, f2.push(t2.bsCount[_2]), t2.bsCount[_2] = t2.sCount[_2] + 1 + (y2 ? 1 : 0), m2.push(t2.sCount[_2]), t2.sCount[_2] = h2 - o2, b2.push(t2.tShift[_2]), t2.tShift[_2] = A2 - t2.bMarks[_2];
        }
      for (d2 = t2.blkIndent, t2.blkIndent = 0, (w2 = t2.push("blockquote_open", "blockquote", 1)).markup = ">", w2.map = c2 = [e2, 0], t2.md.block.tokenize(t2, e2, _2), (w2 = t2.push("blockquote_close", "blockquote", -1)).markup = ">", t2.lineMax = E2, t2.parentType = g2, c2[1] = t2.line, a2 = 0; a2 < b2.length; a2++)
        t2.bMarks[a2 + e2] = p2[a2], t2.tShift[a2 + e2] = b2[a2], t2.sCount[a2 + e2] = m2[a2], t2.bsCount[a2 + e2] = f2[a2];
      return t2.blkIndent = d2, true;
    }, ["paragraph", "reference", "blockquote", "list"]], ["hr", function(t2, e2, n2, r2) {
      var i2, s2, a2, o2, u2 = t2.bMarks[e2] + t2.tShift[e2], l2 = t2.eMarks[e2];
      if (t2.sCount[e2] - t2.blkIndent >= 4)
        return false;
      if ((i2 = t2.src.charCodeAt(u2++)) !== 42 && i2 !== 45 && i2 !== 95)
        return false;
      for (s2 = 1; u2 < l2; ) {
        if ((a2 = t2.src.charCodeAt(u2++)) !== i2 && !_i(a2))
          return false;
        a2 === i2 && s2++;
      }
      return !(s2 < 3) && (r2 || (t2.line = e2 + 1, (o2 = t2.push("hr", "hr", 0)).map = [e2, t2.line], o2.markup = Array(s2 + 1).join(String.fromCharCode(i2))), true);
    }, ["paragraph", "reference", "blockquote", "list"]], ["list", function(t2, e2, n2, r2) {
      var i2, s2, a2, o2, u2, l2, c2, _2, h2, p2, f2, d2, g2, m2, b2, y2, k2, v2, w2, x2, E2, A2, C2, O2, S2, T2, D2, R2, L2 = false, N2 = true;
      if (t2.sCount[e2] - t2.blkIndent >= 4)
        return false;
      if (t2.listIndent >= 0 && t2.sCount[e2] - t2.listIndent >= 4 && t2.sCount[e2] < t2.blkIndent)
        return false;
      if (r2 && t2.parentType === "paragraph" && t2.sCount[e2] >= t2.blkIndent && (L2 = true), (C2 = fi(t2, e2)) >= 0) {
        if (c2 = true, S2 = t2.bMarks[e2] + t2.tShift[e2], g2 = Number(t2.src.slice(S2, C2 - 1)), L2 && g2 !== 1)
          return false;
      } else {
        if (!((C2 = pi(t2, e2)) >= 0))
          return false;
        c2 = false;
      }
      if (L2 && t2.skipSpaces(C2) >= t2.eMarks[e2])
        return false;
      if (d2 = t2.src.charCodeAt(C2 - 1), r2)
        return true;
      for (f2 = t2.tokens.length, c2 ? (R2 = t2.push("ordered_list_open", "ol", 1), g2 !== 1 && (R2.attrs = [["start", g2]])) : R2 = t2.push("bullet_list_open", "ul", 1), R2.map = p2 = [e2, 0], R2.markup = String.fromCharCode(d2), b2 = e2, O2 = false, D2 = t2.md.block.ruler.getRules("list"), v2 = t2.parentType, t2.parentType = "list"; b2 < n2; ) {
        for (A2 = C2, m2 = t2.eMarks[b2], l2 = y2 = t2.sCount[b2] + C2 - (t2.bMarks[e2] + t2.tShift[e2]); A2 < m2; ) {
          if ((i2 = t2.src.charCodeAt(A2)) === 9)
            y2 += 4 - (y2 + t2.bsCount[b2]) % 4;
          else {
            if (i2 !== 32)
              break;
            y2++;
          }
          A2++;
        }
        if ((u2 = (s2 = A2) >= m2 ? 1 : y2 - l2) > 4 && (u2 = 1), o2 = l2 + u2, (R2 = t2.push("list_item_open", "li", 1)).markup = String.fromCharCode(d2), R2.map = _2 = [e2, 0], c2 && (R2.info = t2.src.slice(S2, C2 - 1)), E2 = t2.tight, x2 = t2.tShift[e2], w2 = t2.sCount[e2], k2 = t2.listIndent, t2.listIndent = t2.blkIndent, t2.blkIndent = o2, t2.tight = true, t2.tShift[e2] = s2 - t2.bMarks[e2], t2.sCount[e2] = y2, s2 >= m2 && t2.isEmpty(e2 + 1) ? t2.line = Math.min(t2.line + 2, n2) : t2.md.block.tokenize(t2, e2, n2, true), t2.tight && !O2 || (N2 = false), O2 = t2.line - e2 > 1 && t2.isEmpty(t2.line - 1), t2.blkIndent = t2.listIndent, t2.listIndent = k2, t2.tShift[e2] = x2, t2.sCount[e2] = w2, t2.tight = E2, (R2 = t2.push("list_item_close", "li", -1)).markup = String.fromCharCode(d2), b2 = e2 = t2.line, _2[1] = b2, s2 = t2.bMarks[e2], b2 >= n2)
          break;
        if (t2.sCount[b2] < t2.blkIndent)
          break;
        if (t2.sCount[e2] - t2.blkIndent >= 4)
          break;
        for (T2 = false, a2 = 0, h2 = D2.length; a2 < h2; a2++)
          if (D2[a2](t2, b2, n2, true)) {
            T2 = true;
            break;
          }
        if (T2)
          break;
        if (c2) {
          if ((C2 = fi(t2, b2)) < 0)
            break;
          S2 = t2.bMarks[b2] + t2.tShift[b2];
        } else if ((C2 = pi(t2, b2)) < 0)
          break;
        if (d2 !== t2.src.charCodeAt(C2 - 1))
          break;
      }
      return (R2 = c2 ? t2.push("ordered_list_close", "ol", -1) : t2.push("bullet_list_close", "ul", -1)).markup = String.fromCharCode(d2), p2[1] = b2, t2.line = b2, t2.parentType = v2, N2 && function(t3, e3) {
        var n3, r3, i3 = t3.level + 2;
        for (n3 = e3 + 2, r3 = t3.tokens.length - 2; n3 < r3; n3++)
          t3.tokens[n3].level === i3 && t3.tokens[n3].type === "paragraph_open" && (t3.tokens[n3 + 2].hidden = true, t3.tokens[n3].hidden = true, n3 += 2);
      }(t2, f2), true;
    }, ["paragraph", "reference", "blockquote"]], ["reference", function(t2, e2, n2, r2) {
      var i2, s2, a2, o2, u2, l2, c2, _2, h2, p2, f2, d2, g2, m2, b2, y2, k2 = 0, v2 = t2.bMarks[e2] + t2.tShift[e2], w2 = t2.eMarks[e2], x2 = e2 + 1;
      if (t2.sCount[e2] - t2.blkIndent >= 4)
        return false;
      if (t2.src.charCodeAt(v2) !== 91)
        return false;
      for (; ++v2 < w2; )
        if (t2.src.charCodeAt(v2) === 93 && t2.src.charCodeAt(v2 - 1) !== 92) {
          if (v2 + 1 === w2)
            return false;
          if (t2.src.charCodeAt(v2 + 1) !== 58)
            return false;
          break;
        }
      for (o2 = t2.lineMax, b2 = t2.md.block.ruler.getRules("reference"), p2 = t2.parentType, t2.parentType = "reference"; x2 < o2 && !t2.isEmpty(x2); x2++)
        if (!(t2.sCount[x2] - t2.blkIndent > 3 || t2.sCount[x2] < 0)) {
          for (m2 = false, l2 = 0, c2 = b2.length; l2 < c2; l2++)
            if (b2[l2](t2, x2, o2, true)) {
              m2 = true;
              break;
            }
          if (m2)
            break;
        }
      for (w2 = (g2 = t2.getLines(e2, x2, t2.blkIndent, false).trim()).length, v2 = 1; v2 < w2; v2++) {
        if ((i2 = g2.charCodeAt(v2)) === 91)
          return false;
        if (i2 === 93) {
          h2 = v2;
          break;
        }
        (i2 === 10 || i2 === 92 && ++v2 < w2 && g2.charCodeAt(v2) === 10) && k2++;
      }
      if (h2 < 0 || g2.charCodeAt(h2 + 1) !== 58)
        return false;
      for (v2 = h2 + 2; v2 < w2; v2++)
        if ((i2 = g2.charCodeAt(v2)) === 10)
          k2++;
        else if (!gi(i2))
          break;
      if (!(f2 = t2.md.helpers.parseLinkDestination(g2, v2, w2)).ok)
        return false;
      if (u2 = t2.md.normalizeLink(f2.str), !t2.md.validateLink(u2))
        return false;
      for (s2 = v2 = f2.pos, a2 = k2 += f2.lines, d2 = v2; v2 < w2; v2++)
        if ((i2 = g2.charCodeAt(v2)) === 10)
          k2++;
        else if (!gi(i2))
          break;
      for (f2 = t2.md.helpers.parseLinkTitle(g2, v2, w2), v2 < w2 && d2 !== v2 && f2.ok ? (y2 = f2.str, v2 = f2.pos, k2 += f2.lines) : (y2 = "", v2 = s2, k2 = a2); v2 < w2 && (i2 = g2.charCodeAt(v2), gi(i2)); )
        v2++;
      if (v2 < w2 && g2.charCodeAt(v2) !== 10 && y2)
        for (y2 = "", v2 = s2, k2 = a2; v2 < w2 && (i2 = g2.charCodeAt(v2), gi(i2)); )
          v2++;
      return !(v2 < w2 && g2.charCodeAt(v2) !== 10) && (!!(_2 = di(g2.slice(1, h2))) && (r2 || (t2.env.references === void 0 && (t2.env.references = {}), t2.env.references[_2] === void 0 && (t2.env.references[_2] = { title: y2, href: u2 }), t2.parentType = p2, t2.line = e2 + k2 + 1), true));
    }], ["html_block", function(t2, e2, n2, r2) {
      var i2, s2, a2, o2, u2 = t2.bMarks[e2] + t2.tShift[e2], l2 = t2.eMarks[e2];
      if (t2.sCount[e2] - t2.blkIndent >= 4)
        return false;
      if (!t2.md.options.html)
        return false;
      if (t2.src.charCodeAt(u2) !== 60)
        return false;
      for (o2 = t2.src.slice(u2, l2), i2 = 0; i2 < Ei.length && !Ei[i2][0].test(o2); i2++)
        ;
      if (i2 === Ei.length)
        return false;
      if (r2)
        return Ei[i2][2];
      if (s2 = e2 + 1, !Ei[i2][1].test(o2)) {
        for (; s2 < n2 && !(t2.sCount[s2] < t2.blkIndent); s2++)
          if (u2 = t2.bMarks[s2] + t2.tShift[s2], l2 = t2.eMarks[s2], o2 = t2.src.slice(u2, l2), Ei[i2][1].test(o2)) {
            o2.length !== 0 && s2++;
            break;
          }
      }
      return t2.line = s2, (a2 = t2.push("html_block", "", 0)).map = [e2, s2], a2.content = t2.getLines(e2, s2, t2.blkIndent, true), true;
    }, ["paragraph", "reference", "blockquote"]], ["heading", function(t2, e2, n2, r2) {
      var i2, s2, a2, o2, u2 = t2.bMarks[e2] + t2.tShift[e2], l2 = t2.eMarks[e2];
      if (t2.sCount[e2] - t2.blkIndent >= 4)
        return false;
      if ((i2 = t2.src.charCodeAt(u2)) !== 35 || u2 >= l2)
        return false;
      for (s2 = 1, i2 = t2.src.charCodeAt(++u2); i2 === 35 && u2 < l2 && s2 <= 6; )
        s2++, i2 = t2.src.charCodeAt(++u2);
      return !(s2 > 6 || u2 < l2 && !Ai(i2)) && (r2 || (l2 = t2.skipSpacesBack(l2, u2), (a2 = t2.skipCharsBack(l2, 35, u2)) > u2 && Ai(t2.src.charCodeAt(a2 - 1)) && (l2 = a2), t2.line = e2 + 1, (o2 = t2.push("heading_open", "h" + String(s2), 1)).markup = "########".slice(0, s2), o2.map = [e2, t2.line], (o2 = t2.push("inline", "", 0)).content = t2.src.slice(u2, l2).trim(), o2.map = [e2, t2.line], o2.children = [], (o2 = t2.push("heading_close", "h" + String(s2), -1)).markup = "########".slice(0, s2)), true);
    }, ["paragraph", "reference", "blockquote"]], ["lheading", function(t2, e2, n2) {
      var r2, i2, s2, a2, o2, u2, l2, c2, _2, h2, p2 = e2 + 1, f2 = t2.md.block.ruler.getRules("paragraph");
      if (t2.sCount[e2] - t2.blkIndent >= 4)
        return false;
      for (h2 = t2.parentType, t2.parentType = "paragraph"; p2 < n2 && !t2.isEmpty(p2); p2++)
        if (!(t2.sCount[p2] - t2.blkIndent > 3)) {
          if (t2.sCount[p2] >= t2.blkIndent && (u2 = t2.bMarks[p2] + t2.tShift[p2]) < (l2 = t2.eMarks[p2]) && ((_2 = t2.src.charCodeAt(u2)) === 45 || _2 === 61) && (u2 = t2.skipChars(u2, _2), (u2 = t2.skipSpaces(u2)) >= l2)) {
            c2 = _2 === 61 ? 1 : 2;
            break;
          }
          if (!(t2.sCount[p2] < 0)) {
            for (i2 = false, s2 = 0, a2 = f2.length; s2 < a2; s2++)
              if (f2[s2](t2, p2, n2, true)) {
                i2 = true;
                break;
              }
            if (i2)
              break;
          }
        }
      return !!c2 && (r2 = t2.getLines(e2, p2, t2.blkIndent, false).trim(), t2.line = p2 + 1, (o2 = t2.push("heading_open", "h" + String(c2), 1)).markup = String.fromCharCode(_2), o2.map = [e2, t2.line], (o2 = t2.push("inline", "", 0)).content = r2, o2.map = [e2, t2.line - 1], o2.children = [], (o2 = t2.push("heading_close", "h" + String(c2), -1)).markup = String.fromCharCode(_2), t2.parentType = h2, true);
    }], ["paragraph", function(t2, e2) {
      var n2, r2, i2, s2, a2, o2, u2 = e2 + 1, l2 = t2.md.block.ruler.getRules("paragraph"), c2 = t2.lineMax;
      for (o2 = t2.parentType, t2.parentType = "paragraph"; u2 < c2 && !t2.isEmpty(u2); u2++)
        if (!(t2.sCount[u2] - t2.blkIndent > 3 || t2.sCount[u2] < 0)) {
          for (r2 = false, i2 = 0, s2 = l2.length; i2 < s2; i2++)
            if (l2[i2](t2, u2, c2, true)) {
              r2 = true;
              break;
            }
          if (r2)
            break;
        }
      return n2 = t2.getLines(e2, u2, t2.blkIndent, false).trim(), t2.line = u2, (a2 = t2.push("paragraph_open", "p", 1)).map = [e2, t2.line], (a2 = t2.push("inline", "", 0)).content = n2, a2.map = [e2, t2.line], a2.children = [], a2 = t2.push("paragraph_close", "p", -1), t2.parentType = o2, true;
    }]];
    function Li() {
      this.ruler = new Di();
      for (var t2 = 0; t2 < Ri.length; t2++)
        this.ruler.push(Ri[t2][0], Ri[t2][1], { alt: (Ri[t2][2] || []).slice() });
    }
    Li.prototype.tokenize = function(t2, e2, n2) {
      for (var r2, i2 = this.ruler.getRules(""), s2 = i2.length, a2 = e2, o2 = false, u2 = t2.md.options.maxNesting; a2 < n2 && (t2.line = a2 = t2.skipEmptyLines(a2), !(a2 >= n2)) && !(t2.sCount[a2] < t2.blkIndent); ) {
        if (t2.level >= u2) {
          t2.line = n2;
          break;
        }
        for (r2 = 0; r2 < s2 && !i2[r2](t2, a2, n2, false); r2++)
          ;
        t2.tight = !o2, t2.isEmpty(t2.line - 1) && (o2 = true), (a2 = t2.line) < n2 && t2.isEmpty(a2) && (o2 = true, a2++, t2.line = a2);
      }
    }, Li.prototype.parse = function(t2, e2, n2, r2) {
      var i2;
      t2 && (i2 = new this.State(t2, e2, n2, r2), this.tokenize(i2, i2.line, i2.lineMax));
    }, Li.prototype.State = Ti;
    var Ni = Li;
    function ji(t2) {
      switch (t2) {
        case 10:
        case 33:
        case 35:
        case 36:
        case 37:
        case 38:
        case 42:
        case 43:
        case 45:
        case 58:
        case 60:
        case 61:
        case 62:
        case 64:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 123:
        case 125:
        case 126:
          return true;
        default:
          return false;
      }
    }
    for (qi = /(?:^|[^a-z0-9.+-])([a-z][a-z0-9.+-]*)$/i, Mi = zn.isSpace, Fi = zn.isSpace, zi = [], Ii = 0; Ii < 256; Ii++)
      zi.push(0);
    var qi;
    var Mi;
    var Fi;
    var zi;
    var Ii;
    "\\!\"#$%&'()*+,./:;<=>?@[]^_`{|}~-".split("").forEach(function(t2) {
      zi[t2.charCodeAt(0)] = 1;
    });
    var Pi = {};
    function Bi(t2, e2) {
      var n2, r2, i2, s2, a2, o2 = [], u2 = e2.length;
      for (n2 = 0; n2 < u2; n2++)
        (i2 = e2[n2]).marker === 126 && i2.end !== -1 && (s2 = e2[i2.end], (a2 = t2.tokens[i2.token]).type = "s_open", a2.tag = "s", a2.nesting = 1, a2.markup = "~~", a2.content = "", (a2 = t2.tokens[s2.token]).type = "s_close", a2.tag = "s", a2.nesting = -1, a2.markup = "~~", a2.content = "", t2.tokens[s2.token - 1].type === "text" && t2.tokens[s2.token - 1].content === "~" && o2.push(s2.token - 1));
      for (; o2.length; ) {
        for (r2 = (n2 = o2.pop()) + 1; r2 < t2.tokens.length && t2.tokens[r2].type === "s_close"; )
          r2++;
        n2 !== --r2 && (a2 = t2.tokens[r2], t2.tokens[r2] = t2.tokens[n2], t2.tokens[n2] = a2);
      }
    }
    Pi.tokenize = function(t2, e2) {
      var n2, r2, i2, s2, a2 = t2.pos, o2 = t2.src.charCodeAt(a2);
      if (e2)
        return false;
      if (o2 !== 126)
        return false;
      if (i2 = (r2 = t2.scanDelims(t2.pos, true)).length, s2 = String.fromCharCode(o2), i2 < 2)
        return false;
      for (i2 % 2 && (t2.push("text", "", 0).content = s2, i2--), n2 = 0; n2 < i2; n2 += 2)
        t2.push("text", "", 0).content = s2 + s2, t2.delimiters.push({ marker: o2, length: 0, token: t2.tokens.length - 1, end: -1, open: r2.can_open, close: r2.can_close });
      return t2.pos += r2.length, true;
    }, Pi.postProcess = function(t2) {
      var e2, n2 = t2.tokens_meta, r2 = t2.tokens_meta.length;
      for (Bi(t2, t2.delimiters), e2 = 0; e2 < r2; e2++)
        n2[e2] && n2[e2].delimiters && Bi(t2, n2[e2].delimiters);
    };
    var $i = {};
    function Ui(t2, e2) {
      var n2, r2, i2, s2, a2, o2;
      for (n2 = e2.length - 1; n2 >= 0; n2--)
        (r2 = e2[n2]).marker !== 95 && r2.marker !== 42 || r2.end !== -1 && (i2 = e2[r2.end], o2 = n2 > 0 && e2[n2 - 1].end === r2.end + 1 && e2[n2 - 1].marker === r2.marker && e2[n2 - 1].token === r2.token - 1 && e2[r2.end + 1].token === i2.token + 1, a2 = String.fromCharCode(r2.marker), (s2 = t2.tokens[r2.token]).type = o2 ? "strong_open" : "em_open", s2.tag = o2 ? "strong" : "em", s2.nesting = 1, s2.markup = o2 ? a2 + a2 : a2, s2.content = "", (s2 = t2.tokens[i2.token]).type = o2 ? "strong_close" : "em_close", s2.tag = o2 ? "strong" : "em", s2.nesting = -1, s2.markup = o2 ? a2 + a2 : a2, s2.content = "", o2 && (t2.tokens[e2[n2 - 1].token].content = "", t2.tokens[e2[r2.end + 1].token].content = "", n2--));
    }
    $i.tokenize = function(t2, e2) {
      var n2, r2, i2 = t2.pos, s2 = t2.src.charCodeAt(i2);
      if (e2)
        return false;
      if (s2 !== 95 && s2 !== 42)
        return false;
      for (r2 = t2.scanDelims(t2.pos, s2 === 42), n2 = 0; n2 < r2.length; n2++)
        t2.push("text", "", 0).content = String.fromCharCode(s2), t2.delimiters.push({ marker: s2, length: r2.length, token: t2.tokens.length - 1, end: -1, open: r2.can_open, close: r2.can_close });
      return t2.pos += r2.length, true;
    }, $i.postProcess = function(t2) {
      var e2, n2 = t2.tokens_meta, r2 = t2.tokens_meta.length;
      for (Ui(t2, t2.delimiters), e2 = 0; e2 < r2; e2++)
        n2[e2] && n2[e2].delimiters && Ui(t2, n2[e2].delimiters);
    };
    var Wi = zn.normalizeReference;
    var Gi = zn.isSpace;
    var Vi = zn.normalizeReference;
    var Ki = zn.isSpace;
    var Hi = /^([a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)$/;
    var Zi = /^([a-zA-Z][a-zA-Z0-9+.\-]{1,31}):([^<>\x00-\x20]*)$/;
    var Xi = mi.HTML_TAG_RE;
    var Qi = In;
    var Ji = zn.has;
    var Yi = zn.isValidEntityCode;
    var ts = zn.fromCodePoint;
    var es = /^&#((?:x[a-f0-9]{1,6}|[0-9]{1,7}));/i;
    var ns = /^&([a-z][a-z0-9]{1,31});/i;
    function rs(t2, e2) {
      var n2, r2, i2, s2, a2, o2, u2, l2, c2 = {}, _2 = e2.length;
      if (_2) {
        var h2 = 0, p2 = -2, f2 = [];
        for (n2 = 0; n2 < _2; n2++)
          if (i2 = e2[n2], f2.push(0), e2[h2].marker === i2.marker && p2 === i2.token - 1 || (h2 = n2), p2 = i2.token, i2.length = i2.length || 0, i2.close) {
            for (c2.hasOwnProperty(i2.marker) || (c2[i2.marker] = [-1, -1, -1, -1, -1, -1]), a2 = c2[i2.marker][(i2.open ? 3 : 0) + i2.length % 3], o2 = r2 = h2 - f2[h2] - 1; r2 > a2; r2 -= f2[r2] + 1)
              if ((s2 = e2[r2]).marker === i2.marker && s2.open && s2.end < 0 && (u2 = false, (s2.close || i2.open) && (s2.length + i2.length) % 3 == 0 && (s2.length % 3 == 0 && i2.length % 3 == 0 || (u2 = true)), !u2)) {
                l2 = r2 > 0 && !e2[r2 - 1].open ? f2[r2 - 1] + 1 : 0, f2[n2] = n2 - r2 + l2, f2[r2] = l2, i2.open = false, s2.end = n2, s2.close = false, o2 = -1, p2 = -2;
                break;
              }
            o2 !== -1 && (c2[i2.marker][(i2.open ? 3 : 0) + (i2.length || 0) % 3] = o2);
          }
      }
    }
    var is = Yr;
    var ss = zn.isWhiteSpace;
    var as = zn.isPunctChar;
    var os = zn.isMdAsciiPunct;
    function us(t2, e2, n2, r2) {
      this.src = t2, this.env = n2, this.md = e2, this.tokens = r2, this.tokens_meta = Array(r2.length), this.pos = 0, this.posMax = this.src.length, this.level = 0, this.pending = "", this.pendingLevel = 0, this.cache = {}, this.delimiters = [], this._prev_delimiters = [], this.backticks = {}, this.backticksScanned = false, this.linkLevel = 0;
    }
    us.prototype.pushPending = function() {
      var t2 = new is("text", "", 0);
      return t2.content = this.pending, t2.level = this.pendingLevel, this.tokens.push(t2), this.pending = "", t2;
    }, us.prototype.push = function(t2, e2, n2) {
      this.pending && this.pushPending();
      var r2 = new is(t2, e2, n2), i2 = null;
      return n2 < 0 && (this.level--, this.delimiters = this._prev_delimiters.pop()), r2.level = this.level, n2 > 0 && (this.level++, this._prev_delimiters.push(this.delimiters), this.delimiters = [], i2 = { delimiters: this.delimiters }), this.pendingLevel = this.level, this.tokens.push(r2), this.tokens_meta.push(i2), r2;
    }, us.prototype.scanDelims = function(t2, e2) {
      var n2, r2, i2, s2, a2, o2, u2, l2, c2, _2 = t2, h2 = true, p2 = true, f2 = this.posMax, d2 = this.src.charCodeAt(t2);
      for (n2 = t2 > 0 ? this.src.charCodeAt(t2 - 1) : 32; _2 < f2 && this.src.charCodeAt(_2) === d2; )
        _2++;
      return i2 = _2 - t2, r2 = _2 < f2 ? this.src.charCodeAt(_2) : 32, u2 = os(n2) || as(String.fromCharCode(n2)), c2 = os(r2) || as(String.fromCharCode(r2)), o2 = ss(n2), (l2 = ss(r2)) ? h2 = false : c2 && (o2 || u2 || (h2 = false)), o2 ? p2 = false : u2 && (l2 || c2 || (p2 = false)), e2 ? (s2 = h2, a2 = p2) : (s2 = h2 && (!p2 || u2), a2 = p2 && (!h2 || c2)), { can_open: s2, can_close: a2, length: i2 };
    }, us.prototype.Token = is;
    var ls = us;
    var cs = Nr;
    var _s = [["text", function(t2, e2) {
      for (var n2 = t2.pos; n2 < t2.posMax && !ji(t2.src.charCodeAt(n2)); )
        n2++;
      return n2 !== t2.pos && (e2 || (t2.pending += t2.src.slice(t2.pos, n2)), t2.pos = n2, true);
    }], ["linkify", function(t2, e2) {
      var n2, r2, i2, s2, a2, o2, u2;
      return !!t2.md.options.linkify && (!(t2.linkLevel > 0) && (!((n2 = t2.pos) + 3 > t2.posMax) && (t2.src.charCodeAt(n2) === 58 && (t2.src.charCodeAt(n2 + 1) === 47 && (t2.src.charCodeAt(n2 + 2) === 47 && (!!(r2 = t2.pending.match(qi)) && (i2 = r2[1], !!(s2 = t2.md.linkify.matchAtStart(t2.src.slice(n2 - i2.length))) && (a2 = (a2 = s2.url).replace(/\*+$/, ""), o2 = t2.md.normalizeLink(a2), !!t2.md.validateLink(o2) && (e2 || (t2.pending = t2.pending.slice(0, -i2.length), (u2 = t2.push("link_open", "a", 1)).attrs = [["href", o2]], u2.markup = "linkify", u2.info = "auto", (u2 = t2.push("text", "", 0)).content = t2.md.normalizeLinkText(a2), (u2 = t2.push("link_close", "a", -1)).markup = "linkify", u2.info = "auto"), t2.pos += a2.length - i2.length, true)))))))));
    }], ["newline", function(t2, e2) {
      var n2, r2, i2, s2 = t2.pos;
      if (t2.src.charCodeAt(s2) !== 10)
        return false;
      if (n2 = t2.pending.length - 1, r2 = t2.posMax, !e2)
        if (n2 >= 0 && t2.pending.charCodeAt(n2) === 32)
          if (n2 >= 1 && t2.pending.charCodeAt(n2 - 1) === 32) {
            for (i2 = n2 - 1; i2 >= 1 && t2.pending.charCodeAt(i2 - 1) === 32; )
              i2--;
            t2.pending = t2.pending.slice(0, i2), t2.push("hardbreak", "br", 0);
          } else
            t2.pending = t2.pending.slice(0, -1), t2.push("softbreak", "br", 0);
        else
          t2.push("softbreak", "br", 0);
      for (s2++; s2 < r2 && Mi(t2.src.charCodeAt(s2)); )
        s2++;
      return t2.pos = s2, true;
    }], ["escape", function(t2, e2) {
      var n2, r2, i2, s2, a2, o2 = t2.pos, u2 = t2.posMax;
      if (t2.src.charCodeAt(o2) !== 92)
        return false;
      if (++o2 >= u2)
        return false;
      if ((n2 = t2.src.charCodeAt(o2)) === 10) {
        for (e2 || t2.push("hardbreak", "br", 0), o2++; o2 < u2 && (n2 = t2.src.charCodeAt(o2), Fi(n2)); )
          o2++;
        return t2.pos = o2, true;
      }
      return s2 = t2.src[o2], n2 >= 55296 && n2 <= 56319 && o2 + 1 < u2 && (r2 = t2.src.charCodeAt(o2 + 1)) >= 56320 && r2 <= 57343 && (s2 += t2.src[o2 + 1], o2++), i2 = "\\" + s2, e2 || (a2 = t2.push("text_special", "", 0), n2 < 256 && zi[n2] !== 0 ? a2.content = s2 : a2.content = i2, a2.markup = i2, a2.info = "escape"), t2.pos = o2 + 1, true;
    }], ["backticks", function(t2, e2) {
      var n2, r2, i2, s2, a2, o2, u2, l2, c2 = t2.pos;
      if (t2.src.charCodeAt(c2) !== 96)
        return false;
      for (n2 = c2, c2++, r2 = t2.posMax; c2 < r2 && t2.src.charCodeAt(c2) === 96; )
        c2++;
      if (u2 = (i2 = t2.src.slice(n2, c2)).length, t2.backticksScanned && (t2.backticks[u2] || 0) <= n2)
        return e2 || (t2.pending += i2), t2.pos += u2, true;
      for (a2 = o2 = c2; (a2 = t2.src.indexOf("`", o2)) !== -1; ) {
        for (o2 = a2 + 1; o2 < r2 && t2.src.charCodeAt(o2) === 96; )
          o2++;
        if ((l2 = o2 - a2) === u2)
          return e2 || ((s2 = t2.push("code_inline", "code", 0)).markup = i2, s2.content = t2.src.slice(c2, a2).replace(/\n/g, " ").replace(/^ (.+) $/, "$1")), t2.pos = o2, true;
        t2.backticks[l2] = a2;
      }
      return t2.backticksScanned = true, e2 || (t2.pending += i2), t2.pos += u2, true;
    }], ["strikethrough", Pi.tokenize], ["emphasis", $i.tokenize], ["link", function(t2, e2) {
      var n2, r2, i2, s2, a2, o2, u2, l2, c2 = "", _2 = "", h2 = t2.pos, p2 = t2.posMax, f2 = t2.pos, d2 = true;
      if (t2.src.charCodeAt(t2.pos) !== 91)
        return false;
      if (a2 = t2.pos + 1, (s2 = t2.md.helpers.parseLinkLabel(t2, t2.pos, true)) < 0)
        return false;
      if ((o2 = s2 + 1) < p2 && t2.src.charCodeAt(o2) === 40) {
        for (d2 = false, o2++; o2 < p2 && (r2 = t2.src.charCodeAt(o2), Gi(r2) || r2 === 10); o2++)
          ;
        if (o2 >= p2)
          return false;
        if (f2 = o2, (u2 = t2.md.helpers.parseLinkDestination(t2.src, o2, t2.posMax)).ok) {
          for (c2 = t2.md.normalizeLink(u2.str), t2.md.validateLink(c2) ? o2 = u2.pos : c2 = "", f2 = o2; o2 < p2 && (r2 = t2.src.charCodeAt(o2), Gi(r2) || r2 === 10); o2++)
            ;
          if (u2 = t2.md.helpers.parseLinkTitle(t2.src, o2, t2.posMax), o2 < p2 && f2 !== o2 && u2.ok)
            for (_2 = u2.str, o2 = u2.pos; o2 < p2 && (r2 = t2.src.charCodeAt(o2), Gi(r2) || r2 === 10); o2++)
              ;
        }
        (o2 >= p2 || t2.src.charCodeAt(o2) !== 41) && (d2 = true), o2++;
      }
      if (d2) {
        if (t2.env.references === void 0)
          return false;
        if (o2 < p2 && t2.src.charCodeAt(o2) === 91 ? (f2 = o2 + 1, (o2 = t2.md.helpers.parseLinkLabel(t2, o2)) >= 0 ? i2 = t2.src.slice(f2, o2++) : o2 = s2 + 1) : o2 = s2 + 1, i2 || (i2 = t2.src.slice(a2, s2)), !(l2 = t2.env.references[Wi(i2)]))
          return t2.pos = h2, false;
        c2 = l2.href, _2 = l2.title;
      }
      return e2 || (t2.pos = a2, t2.posMax = s2, t2.push("link_open", "a", 1).attrs = n2 = [["href", c2]], _2 && n2.push(["title", _2]), t2.linkLevel++, t2.md.inline.tokenize(t2), t2.linkLevel--, t2.push("link_close", "a", -1)), t2.pos = o2, t2.posMax = p2, true;
    }], ["image", function(t2, e2) {
      var n2, r2, i2, s2, a2, o2, u2, l2, c2, _2, h2, p2, f2, d2 = "", g2 = t2.pos, m2 = t2.posMax;
      if (t2.src.charCodeAt(t2.pos) !== 33)
        return false;
      if (t2.src.charCodeAt(t2.pos + 1) !== 91)
        return false;
      if (o2 = t2.pos + 2, (a2 = t2.md.helpers.parseLinkLabel(t2, t2.pos + 1, false)) < 0)
        return false;
      if ((u2 = a2 + 1) < m2 && t2.src.charCodeAt(u2) === 40) {
        for (u2++; u2 < m2 && (r2 = t2.src.charCodeAt(u2), Ki(r2) || r2 === 10); u2++)
          ;
        if (u2 >= m2)
          return false;
        for (f2 = u2, (c2 = t2.md.helpers.parseLinkDestination(t2.src, u2, t2.posMax)).ok && (d2 = t2.md.normalizeLink(c2.str), t2.md.validateLink(d2) ? u2 = c2.pos : d2 = ""), f2 = u2; u2 < m2 && (r2 = t2.src.charCodeAt(u2), Ki(r2) || r2 === 10); u2++)
          ;
        if (c2 = t2.md.helpers.parseLinkTitle(t2.src, u2, t2.posMax), u2 < m2 && f2 !== u2 && c2.ok)
          for (_2 = c2.str, u2 = c2.pos; u2 < m2 && (r2 = t2.src.charCodeAt(u2), Ki(r2) || r2 === 10); u2++)
            ;
        else
          _2 = "";
        if (u2 >= m2 || t2.src.charCodeAt(u2) !== 41)
          return t2.pos = g2, false;
        u2++;
      } else {
        if (t2.env.references === void 0)
          return false;
        if (u2 < m2 && t2.src.charCodeAt(u2) === 91 ? (f2 = u2 + 1, (u2 = t2.md.helpers.parseLinkLabel(t2, u2)) >= 0 ? s2 = t2.src.slice(f2, u2++) : u2 = a2 + 1) : u2 = a2 + 1, s2 || (s2 = t2.src.slice(o2, a2)), !(l2 = t2.env.references[Vi(s2)]))
          return t2.pos = g2, false;
        d2 = l2.href, _2 = l2.title;
      }
      return e2 || (i2 = t2.src.slice(o2, a2), t2.md.inline.parse(i2, t2.md, t2.env, p2 = []), (h2 = t2.push("image", "img", 0)).attrs = n2 = [["src", d2], ["alt", ""]], h2.children = p2, h2.content = i2, _2 && n2.push(["title", _2])), t2.pos = u2, t2.posMax = m2, true;
    }], ["autolink", function(t2, e2) {
      var n2, r2, i2, s2, a2, o2, u2 = t2.pos;
      if (t2.src.charCodeAt(u2) !== 60)
        return false;
      for (a2 = t2.pos, o2 = t2.posMax; ; ) {
        if (++u2 >= o2)
          return false;
        if ((s2 = t2.src.charCodeAt(u2)) === 60)
          return false;
        if (s2 === 62)
          break;
      }
      return n2 = t2.src.slice(a2 + 1, u2), Zi.test(n2) ? (r2 = t2.md.normalizeLink(n2), !!t2.md.validateLink(r2) && (e2 || ((i2 = t2.push("link_open", "a", 1)).attrs = [["href", r2]], i2.markup = "autolink", i2.info = "auto", (i2 = t2.push("text", "", 0)).content = t2.md.normalizeLinkText(n2), (i2 = t2.push("link_close", "a", -1)).markup = "autolink", i2.info = "auto"), t2.pos += n2.length + 2, true)) : !!Hi.test(n2) && (r2 = t2.md.normalizeLink("mailto:" + n2), !!t2.md.validateLink(r2) && (e2 || ((i2 = t2.push("link_open", "a", 1)).attrs = [["href", r2]], i2.markup = "autolink", i2.info = "auto", (i2 = t2.push("text", "", 0)).content = t2.md.normalizeLinkText(n2), (i2 = t2.push("link_close", "a", -1)).markup = "autolink", i2.info = "auto"), t2.pos += n2.length + 2, true));
    }], ["html_inline", function(t2, e2) {
      var n2, r2, i2, s2, a2, o2 = t2.pos;
      return !!t2.md.options.html && (i2 = t2.posMax, !(t2.src.charCodeAt(o2) !== 60 || o2 + 2 >= i2) && (!((n2 = t2.src.charCodeAt(o2 + 1)) !== 33 && n2 !== 63 && n2 !== 47 && !function(t3) {
        var e3 = 32 | t3;
        return e3 >= 97 && e3 <= 122;
      }(n2)) && (!!(r2 = t2.src.slice(o2).match(Xi)) && (e2 || ((s2 = t2.push("html_inline", "", 0)).content = t2.src.slice(o2, o2 + r2[0].length), a2 = s2.content, /^<a[>\s]/i.test(a2) && t2.linkLevel++, function(t3) {
        return /^<\/a\s*>/i.test(t3);
      }(s2.content) && t2.linkLevel--), t2.pos += r2[0].length, true))));
    }], ["entity", function(t2, e2) {
      var n2, r2, i2, s2 = t2.pos, a2 = t2.posMax;
      if (t2.src.charCodeAt(s2) !== 38)
        return false;
      if (s2 + 1 >= a2)
        return false;
      if (t2.src.charCodeAt(s2 + 1) === 35) {
        if (r2 = t2.src.slice(s2).match(es))
          return e2 || (n2 = r2[1][0].toLowerCase() === "x" ? parseInt(r2[1].slice(1), 16) : parseInt(r2[1], 10), (i2 = t2.push("text_special", "", 0)).content = Yi(n2) ? ts(n2) : ts(65533), i2.markup = r2[0], i2.info = "entity"), t2.pos += r2[0].length, true;
      } else if ((r2 = t2.src.slice(s2).match(ns)) && Ji(Qi, r2[1]))
        return e2 || ((i2 = t2.push("text_special", "", 0)).content = Qi[r2[1]], i2.markup = r2[0], i2.info = "entity"), t2.pos += r2[0].length, true;
      return false;
    }]];
    var hs = [["balance_pairs", function(t2) {
      var e2, n2 = t2.tokens_meta, r2 = t2.tokens_meta.length;
      for (rs(0, t2.delimiters), e2 = 0; e2 < r2; e2++)
        n2[e2] && n2[e2].delimiters && rs(0, n2[e2].delimiters);
    }], ["strikethrough", Pi.postProcess], ["emphasis", $i.postProcess], ["fragments_join", function(t2) {
      var e2, n2, r2 = 0, i2 = t2.tokens, s2 = t2.tokens.length;
      for (e2 = n2 = 0; e2 < s2; e2++)
        i2[e2].nesting < 0 && r2--, i2[e2].level = r2, i2[e2].nesting > 0 && r2++, i2[e2].type === "text" && e2 + 1 < s2 && i2[e2 + 1].type === "text" ? i2[e2 + 1].content = i2[e2].content + i2[e2 + 1].content : (e2 !== n2 && (i2[n2] = i2[e2]), n2++);
      e2 !== n2 && (i2.length = n2);
    }]];
    function ps() {
      var t2;
      for (this.ruler = new cs(), t2 = 0; t2 < _s.length; t2++)
        this.ruler.push(_s[t2][0], _s[t2][1]);
      for (this.ruler2 = new cs(), t2 = 0; t2 < hs.length; t2++)
        this.ruler2.push(hs[t2][0], hs[t2][1]);
    }
    ps.prototype.skipToken = function(t2) {
      var e2, n2, r2 = t2.pos, i2 = this.ruler.getRules(""), s2 = i2.length, a2 = t2.md.options.maxNesting, o2 = t2.cache;
      if (o2[r2] === void 0) {
        if (t2.level < a2)
          for (n2 = 0; n2 < s2 && (t2.level++, e2 = i2[n2](t2, true), t2.level--, !e2); n2++)
            ;
        else
          t2.pos = t2.posMax;
        e2 || t2.pos++, o2[r2] = t2.pos;
      } else
        t2.pos = o2[r2];
    }, ps.prototype.tokenize = function(t2) {
      for (var e2, n2, r2 = this.ruler.getRules(""), i2 = r2.length, s2 = t2.posMax, a2 = t2.md.options.maxNesting; t2.pos < s2; ) {
        if (t2.level < a2)
          for (n2 = 0; n2 < i2 && !(e2 = r2[n2](t2, false)); n2++)
            ;
        if (e2) {
          if (t2.pos >= s2)
            break;
        } else
          t2.pending += t2.src[t2.pos++];
      }
      t2.pending && t2.pushPending();
    }, ps.prototype.parse = function(t2, e2, n2, r2) {
      var i2, s2, a2, o2 = new this.State(t2, e2, n2, r2);
      for (this.tokenize(o2), a2 = (s2 = this.ruler2.getRules("")).length, i2 = 0; i2 < a2; i2++)
        s2[i2](o2);
    }, ps.prototype.State = ls;
    var fs;
    var ds;
    var gs = ps;
    function ms() {
      return ds ? fs : (ds = 1, fs = function(t2) {
        var e2 = {};
        t2 = t2 || {}, e2.src_Any = yr().source, e2.src_Cc = kr().source, e2.src_Z = vr().source, e2.src_P = $n.source, e2.src_ZPCc = [e2.src_Z, e2.src_P, e2.src_Cc].join("|"), e2.src_ZCc = [e2.src_Z, e2.src_Cc].join("|");
        var n2 = "[><\uFF5C]";
        return e2.src_pseudo_letter = "(?:(?![><\uFF5C]|" + e2.src_ZPCc + ")" + e2.src_Any + ")", e2.src_ip4 = "(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)", e2.src_auth = "(?:(?:(?!" + e2.src_ZCc + "|[@/\\[\\]()]).)+@)?", e2.src_port = "(?::(?:6(?:[0-4]\\d{3}|5(?:[0-4]\\d{2}|5(?:[0-2]\\d|3[0-5])))|[1-5]?\\d{1,4}))?", e2.src_host_terminator = "(?=$|[><\uFF5C]|" + e2.src_ZPCc + ")(?!" + (t2["---"] ? "-(?!--)|" : "-|") + "_|:\\d|\\.-|\\.(?!$|" + e2.src_ZPCc + "))", e2.src_path = "(?:[/?#](?:(?!" + e2.src_ZCc + "|" + n2 + `|[()[\\]{}.,"'?!\\-;]).|\\[(?:(?!` + e2.src_ZCc + "|\\]).)*\\]|\\((?:(?!" + e2.src_ZCc + "|[)]).)*\\)|\\{(?:(?!" + e2.src_ZCc + '|[}]).)*\\}|\\"(?:(?!' + e2.src_ZCc + `|["]).)+\\"|\\'(?:(?!` + e2.src_ZCc + "|[']).)+\\'|\\'(?=" + e2.src_pseudo_letter + "|[-])|\\.{2,}[a-zA-Z0-9%/&]|\\.(?!" + e2.src_ZCc + "|[.]|$)|" + (t2["---"] ? "\\-(?!--(?:[^-]|$))(?:-*)|" : "\\-+|") + ",(?!" + e2.src_ZCc + "|$)|;(?!" + e2.src_ZCc + "|$)|\\!+(?!" + e2.src_ZCc + "|[!]|$)|\\?(?!" + e2.src_ZCc + "|[?]|$))+|\\/)?", e2.src_email_name = '[\\-;:&=\\+\\$,\\.a-zA-Z0-9_][\\-;:&=\\+\\$,\\"\\.a-zA-Z0-9_]*', e2.src_xn = "xn--[a-z0-9\\-]{1,59}", e2.src_domain_root = "(?:" + e2.src_xn + "|" + e2.src_pseudo_letter + "{1,63})", e2.src_domain = "(?:" + e2.src_xn + "|(?:" + e2.src_pseudo_letter + ")|(?:" + e2.src_pseudo_letter + "(?:-|" + e2.src_pseudo_letter + "){0,61}" + e2.src_pseudo_letter + "))", e2.src_host = "(?:(?:(?:(?:" + e2.src_domain + ")\\.)*" + e2.src_domain + "))", e2.tpl_host_fuzzy = "(?:" + e2.src_ip4 + "|(?:(?:(?:" + e2.src_domain + ")\\.)+(?:%TLDS%)))", e2.tpl_host_no_ip_fuzzy = "(?:(?:(?:" + e2.src_domain + ")\\.)+(?:%TLDS%))", e2.src_host_strict = e2.src_host + e2.src_host_terminator, e2.tpl_host_fuzzy_strict = e2.tpl_host_fuzzy + e2.src_host_terminator, e2.src_host_port_strict = e2.src_host + e2.src_port + e2.src_host_terminator, e2.tpl_host_port_fuzzy_strict = e2.tpl_host_fuzzy + e2.src_port + e2.src_host_terminator, e2.tpl_host_port_no_ip_fuzzy_strict = e2.tpl_host_no_ip_fuzzy + e2.src_port + e2.src_host_terminator, e2.tpl_host_fuzzy_test = "localhost|www\\.|\\.\\d{1,3}\\.|(?:\\.(?:%TLDS%)(?:" + e2.src_ZPCc + "|>|$))", e2.tpl_email_fuzzy = '(^|[><\uFF5C]|"|\\(|' + e2.src_ZCc + ")(" + e2.src_email_name + "@" + e2.tpl_host_fuzzy_strict + ")", e2.tpl_link_fuzzy = "(^|(?![.:/\\-_@])(?:[$+<=>^`|\uFF5C]|" + e2.src_ZPCc + "))((?![$+<=>^`|\uFF5C])" + e2.tpl_host_port_fuzzy_strict + e2.src_path + ")", e2.tpl_link_no_ip_fuzzy = "(^|(?![.:/\\-_@])(?:[$+<=>^`|\uFF5C]|" + e2.src_ZPCc + "))((?![$+<=>^`|\uFF5C])" + e2.tpl_host_port_no_ip_fuzzy_strict + e2.src_path + ")", e2;
      });
    }
    function bs(t2) {
      var e2 = Array.prototype.slice.call(arguments, 1);
      return e2.forEach(function(e3) {
        e3 && Object.keys(e3).forEach(function(n2) {
          t2[n2] = e3[n2];
        });
      }), t2;
    }
    function ys(t2) {
      return Object.prototype.toString.call(t2);
    }
    function ks(t2) {
      return ys(t2) === "[object Function]";
    }
    function vs(t2) {
      return t2.replace(/[.?*+^$[\]\\(){}|-]/g, "\\$&");
    }
    var ws = { fuzzyLink: true, fuzzyEmail: true, fuzzyIP: false };
    var xs = { "http:": { validate: function(t2, e2, n2) {
      var r2 = t2.slice(e2);
      return n2.re.http || (n2.re.http = new RegExp("^\\/\\/" + n2.re.src_auth + n2.re.src_host_port_strict + n2.re.src_path, "i")), n2.re.http.test(r2) ? r2.match(n2.re.http)[0].length : 0;
    } }, "https:": "http:", "ftp:": "http:", "//": { validate: function(t2, e2, n2) {
      var r2 = t2.slice(e2);
      return n2.re.no_http || (n2.re.no_http = new RegExp("^" + n2.re.src_auth + "(?:localhost|(?:(?:" + n2.re.src_domain + ")\\.)+" + n2.re.src_domain_root + ")" + n2.re.src_port + n2.re.src_host_terminator + n2.re.src_path, "i")), n2.re.no_http.test(r2) ? e2 >= 3 && t2[e2 - 3] === ":" || e2 >= 3 && t2[e2 - 3] === "/" ? 0 : r2.match(n2.re.no_http)[0].length : 0;
    } }, "mailto:": { validate: function(t2, e2, n2) {
      var r2 = t2.slice(e2);
      return n2.re.mailto || (n2.re.mailto = new RegExp("^" + n2.re.src_email_name + "@" + n2.re.src_host_strict, "i")), n2.re.mailto.test(r2) ? r2.match(n2.re.mailto)[0].length : 0;
    } } };
    var Es = "biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|\u0440\u0444".split("|");
    function As(t2) {
      var e2 = t2.re = ms()(t2.__opts__), n2 = t2.__tlds__.slice();
      function r2(t3) {
        return t3.replace("%TLDS%", e2.src_tlds);
      }
      t2.onCompile(), t2.__tlds_replaced__ || n2.push("a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]"), n2.push(e2.src_xn), e2.src_tlds = n2.join("|"), e2.email_fuzzy = RegExp(r2(e2.tpl_email_fuzzy), "i"), e2.link_fuzzy = RegExp(r2(e2.tpl_link_fuzzy), "i"), e2.link_no_ip_fuzzy = RegExp(r2(e2.tpl_link_no_ip_fuzzy), "i"), e2.host_fuzzy_test = RegExp(r2(e2.tpl_host_fuzzy_test), "i");
      var i2 = [];
      function s2(t3, e3) {
        throw new Error('(LinkifyIt) Invalid schema "' + t3 + '": ' + e3);
      }
      t2.__compiled__ = {}, Object.keys(t2.__schemas__).forEach(function(e3) {
        var n3 = t2.__schemas__[e3];
        if (n3 !== null) {
          var r3 = { validate: null, link: null };
          if (t2.__compiled__[e3] = r3, ys(n3) === "[object Object]")
            return !function(t3) {
              return ys(t3) === "[object RegExp]";
            }(n3.validate) ? ks(n3.validate) ? r3.validate = n3.validate : s2(e3, n3) : r3.validate = function(t3) {
              return function(e4, n4) {
                var r4 = e4.slice(n4);
                return t3.test(r4) ? r4.match(t3)[0].length : 0;
              };
            }(n3.validate), void (ks(n3.normalize) ? r3.normalize = n3.normalize : n3.normalize ? s2(e3, n3) : r3.normalize = function(t3, e4) {
              e4.normalize(t3);
            });
          !function(t3) {
            return ys(t3) === "[object String]";
          }(n3) ? s2(e3, n3) : i2.push(e3);
        }
      }), i2.forEach(function(e3) {
        t2.__compiled__[t2.__schemas__[e3]] && (t2.__compiled__[e3].validate = t2.__compiled__[t2.__schemas__[e3]].validate, t2.__compiled__[e3].normalize = t2.__compiled__[t2.__schemas__[e3]].normalize);
      }), t2.__compiled__[""] = { validate: null, normalize: function(t3, e3) {
        e3.normalize(t3);
      } };
      var a2 = Object.keys(t2.__compiled__).filter(function(e3) {
        return e3.length > 0 && t2.__compiled__[e3];
      }).map(vs).join("|");
      t2.re.schema_test = RegExp("(^|(?!_)(?:[><\uFF5C]|" + e2.src_ZPCc + "))(" + a2 + ")", "i"), t2.re.schema_search = RegExp("(^|(?!_)(?:[><\uFF5C]|" + e2.src_ZPCc + "))(" + a2 + ")", "ig"), t2.re.schema_at_start = RegExp("^" + t2.re.schema_search.source, "i"), t2.re.pretest = RegExp("(" + t2.re.schema_test.source + ")|(" + t2.re.host_fuzzy_test.source + ")|@", "i"), function(t3) {
        t3.__index__ = -1, t3.__text_cache__ = "";
      }(t2);
    }
    function Cs(t2, e2) {
      var n2 = t2.__index__, r2 = t2.__last_index__, i2 = t2.__text_cache__.slice(n2, r2);
      this.schema = t2.__schema__.toLowerCase(), this.index = n2 + e2, this.lastIndex = r2 + e2, this.raw = i2, this.text = i2, this.url = i2;
    }
    function Os(t2, e2) {
      var n2 = new Cs(t2, e2);
      return t2.__compiled__[n2.schema].normalize(n2, t2), n2;
    }
    function Ss(t2, e2) {
      if (!(this instanceof Ss))
        return new Ss(t2, e2);
      var n2;
      e2 || (n2 = t2, Object.keys(n2 || {}).reduce(function(t3, e3) {
        return t3 || ws.hasOwnProperty(e3);
      }, false) && (e2 = t2, t2 = {})), this.__opts__ = bs({}, ws, e2), this.__index__ = -1, this.__last_index__ = -1, this.__schema__ = "", this.__text_cache__ = "", this.__schemas__ = bs({}, xs, t2), this.__compiled__ = {}, this.__tlds__ = Es, this.__tlds_replaced__ = false, this.re = {}, As(this);
    }
    Ss.prototype.add = function(t2, e2) {
      return this.__schemas__[t2] = e2, As(this), this;
    }, Ss.prototype.set = function(t2) {
      return this.__opts__ = bs(this.__opts__, t2), this;
    }, Ss.prototype.test = function(t2) {
      if (this.__text_cache__ = t2, this.__index__ = -1, !t2.length)
        return false;
      var e2, n2, r2, i2, s2, a2, o2, u2;
      if (this.re.schema_test.test(t2)) {
        for ((o2 = this.re.schema_search).lastIndex = 0; (e2 = o2.exec(t2)) !== null; )
          if (i2 = this.testSchemaAt(t2, e2[2], o2.lastIndex)) {
            this.__schema__ = e2[2], this.__index__ = e2.index + e2[1].length, this.__last_index__ = e2.index + e2[0].length + i2;
            break;
          }
      }
      return this.__opts__.fuzzyLink && this.__compiled__["http:"] && (u2 = t2.search(this.re.host_fuzzy_test)) >= 0 && (this.__index__ < 0 || u2 < this.__index__) && (n2 = t2.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) !== null && (s2 = n2.index + n2[1].length, (this.__index__ < 0 || s2 < this.__index__) && (this.__schema__ = "", this.__index__ = s2, this.__last_index__ = n2.index + n2[0].length)), this.__opts__.fuzzyEmail && this.__compiled__["mailto:"] && t2.indexOf("@") >= 0 && (r2 = t2.match(this.re.email_fuzzy)) !== null && (s2 = r2.index + r2[1].length, a2 = r2.index + r2[0].length, (this.__index__ < 0 || s2 < this.__index__ || s2 === this.__index__ && a2 > this.__last_index__) && (this.__schema__ = "mailto:", this.__index__ = s2, this.__last_index__ = a2)), this.__index__ >= 0;
    }, Ss.prototype.pretest = function(t2) {
      return this.re.pretest.test(t2);
    }, Ss.prototype.testSchemaAt = function(t2, e2, n2) {
      return this.__compiled__[e2.toLowerCase()] ? this.__compiled__[e2.toLowerCase()].validate(t2, n2, this) : 0;
    }, Ss.prototype.match = function(t2) {
      var e2 = 0, n2 = [];
      this.__index__ >= 0 && this.__text_cache__ === t2 && (n2.push(Os(this, e2)), e2 = this.__last_index__);
      for (var r2 = e2 ? t2.slice(e2) : t2; this.test(r2); )
        n2.push(Os(this, e2)), r2 = r2.slice(this.__last_index__), e2 += this.__last_index__;
      return n2.length ? n2 : null;
    }, Ss.prototype.matchAtStart = function(t2) {
      if (this.__text_cache__ = t2, this.__index__ = -1, !t2.length)
        return null;
      var e2 = this.re.schema_at_start.exec(t2);
      if (!e2)
        return null;
      var n2 = this.testSchemaAt(t2, e2[2], e2[0].length);
      return n2 ? (this.__schema__ = e2[2], this.__index__ = e2.index + e2[1].length, this.__last_index__ = e2.index + e2[0].length + n2, Os(this, 0)) : null;
    }, Ss.prototype.tlds = function(t2, e2) {
      return t2 = Array.isArray(t2) ? t2 : [t2], e2 ? (this.__tlds__ = this.__tlds__.concat(t2).sort().filter(function(t3, e3, n2) {
        return t3 !== n2[e3 - 1];
      }).reverse(), As(this), this) : (this.__tlds__ = t2.slice(), this.__tlds_replaced__ = true, As(this), this);
    }, Ss.prototype.normalize = function(t2) {
      t2.schema || (t2.url = "http://" + t2.url), t2.schema !== "mailto:" || /^mailto:/i.test(t2.url) || (t2.url = "mailto:" + t2.url);
    }, Ss.prototype.onCompile = function() {
    };
    var Ts = zn;
    var Ds = xr;
    var Rs = Rr;
    var Ls = ai;
    var Ns = Ni;
    var js = gs;
    var qs = Ss;
    var Ms = Un;
    var Fs = o;
    var zs = { default: { options: { html: false, xhtmlOut: false, breaks: false, langPrefix: "language-", linkify: false, typographer: false, quotes: "\u201C\u201D\u2018\u2019", highlight: null, maxNesting: 100 }, components: { core: {}, block: {}, inline: {} } }, zero: { options: { html: false, xhtmlOut: false, breaks: false, langPrefix: "language-", linkify: false, typographer: false, quotes: "\u201C\u201D\u2018\u2019", highlight: null, maxNesting: 20 }, components: { core: { rules: ["normalize", "block", "inline", "text_join"] }, block: { rules: ["paragraph"] }, inline: { rules: ["text"], rules2: ["balance_pairs", "fragments_join"] } } }, commonmark: { options: { html: true, xhtmlOut: true, breaks: false, langPrefix: "language-", linkify: false, typographer: false, quotes: "\u201C\u201D\u2018\u2019", highlight: null, maxNesting: 20 }, components: { core: { rules: ["normalize", "block", "inline", "text_join"] }, block: { rules: ["blockquote", "code", "fence", "heading", "hr", "html_block", "lheading", "list", "reference", "paragraph"] }, inline: { rules: ["autolink", "backticks", "emphasis", "entity", "escape", "html_inline", "image", "link", "newline", "text"], rules2: ["balance_pairs", "emphasis", "fragments_join"] } } } };
    var Is = /^(vbscript|javascript|file|data):/;
    var Ps = /^data:image\/(gif|png|jpeg|webp);/;
    function Bs(t2) {
      var e2 = t2.trim().toLowerCase();
      return !Is.test(e2) || !!Ps.test(e2);
    }
    var $s = ["http:", "https:", "mailto:"];
    function Us(t2) {
      var e2 = Ms.parse(t2, true);
      if (e2.hostname && (!e2.protocol || $s.indexOf(e2.protocol) >= 0))
        try {
          e2.hostname = Fs.toASCII(e2.hostname);
        } catch (t3) {
        }
      return Ms.encode(Ms.format(e2));
    }
    function Ws(t2) {
      var e2 = Ms.parse(t2, true);
      if (e2.hostname && (!e2.protocol || $s.indexOf(e2.protocol) >= 0))
        try {
          e2.hostname = Fs.toUnicode(e2.hostname);
        } catch (t3) {
        }
      return Ms.decode(Ms.format(e2), Ms.decode.defaultChars + "%");
    }
    function Gs(t2, e2) {
      if (!(this instanceof Gs))
        return new Gs(t2, e2);
      e2 || Ts.isString(t2) || (e2 = t2 || {}, t2 = "default"), this.inline = new js(), this.block = new Ns(), this.core = new Ls(), this.renderer = new Rs(), this.linkify = new qs(), this.validateLink = Bs, this.normalizeLink = Us, this.normalizeLinkText = Ws, this.utils = Ts, this.helpers = Ts.assign({}, Ds), this.options = {}, this.configure(t2), e2 && this.set(e2);
    }
    Gs.prototype.set = function(t2) {
      return Ts.assign(this.options, t2), this;
    }, Gs.prototype.configure = function(t2) {
      var e2, n2 = this;
      if (Ts.isString(t2) && !(t2 = zs[e2 = t2]))
        throw new Error('Wrong `markdown-it` preset "' + e2 + '", check name');
      if (!t2)
        throw new Error("Wrong `markdown-it` preset, can't be empty");
      return t2.options && n2.set(t2.options), t2.components && Object.keys(t2.components).forEach(function(e3) {
        t2.components[e3].rules && n2[e3].ruler.enableOnly(t2.components[e3].rules), t2.components[e3].rules2 && n2[e3].ruler2.enableOnly(t2.components[e3].rules2);
      }), this;
    }, Gs.prototype.enable = function(t2, e2) {
      var n2 = [];
      Array.isArray(t2) || (t2 = [t2]), ["core", "block", "inline"].forEach(function(e3) {
        n2 = n2.concat(this[e3].ruler.enable(t2, true));
      }, this), n2 = n2.concat(this.inline.ruler2.enable(t2, true));
      var r2 = t2.filter(function(t3) {
        return n2.indexOf(t3) < 0;
      });
      if (r2.length && !e2)
        throw new Error("MarkdownIt. Failed to enable unknown rule(s): " + r2);
      return this;
    }, Gs.prototype.disable = function(t2, e2) {
      var n2 = [];
      Array.isArray(t2) || (t2 = [t2]), ["core", "block", "inline"].forEach(function(e3) {
        n2 = n2.concat(this[e3].ruler.disable(t2, true));
      }, this), n2 = n2.concat(this.inline.ruler2.disable(t2, true));
      var r2 = t2.filter(function(t3) {
        return n2.indexOf(t3) < 0;
      });
      if (r2.length && !e2)
        throw new Error("MarkdownIt. Failed to disable unknown rule(s): " + r2);
      return this;
    }, Gs.prototype.use = function(t2) {
      var e2 = [this].concat(Array.prototype.slice.call(arguments, 1));
      return t2.apply(t2, e2), this;
    }, Gs.prototype.parse = function(t2, e2) {
      if (typeof t2 != "string")
        throw new Error("Input data should be a String");
      var n2 = new this.core.State(t2, this, e2);
      return this.core.process(n2), n2.tokens;
    }, Gs.prototype.render = function(t2, e2) {
      return e2 = e2 || {}, this.renderer.render(this.parse(t2, e2), this.options, e2);
    }, Gs.prototype.parseInline = function(t2, e2) {
      var n2 = new this.core.State(t2, this, e2);
      return n2.inlineMode = true, this.core.process(n2), n2.tokens;
    }, Gs.prototype.renderInline = function(t2, e2) {
      return e2 = e2 || {}, this.renderer.render(this.parseInline(t2, e2), this.options, e2);
    };
    var Vs = Gs;
    Fn.exports = Vs;
    var Ks;
    var Hs;
    var Zs = A(Mn);
    var Xs = {};
    ({ get exports() {
      return Xs;
    }, set exports(t2) {
      Xs = t2;
    } }).exports = function() {
      var t2 = "1.13.6", e2 = typeof self == "object" && self.self === self && self || typeof E == "object" && E.global === E && E || Function("return this")() || {}, n2 = Array.prototype, r2 = Object.prototype, i2 = typeof Symbol != "undefined" ? Symbol.prototype : null, s2 = n2.push, a2 = n2.slice, o2 = r2.toString, u2 = r2.hasOwnProperty, l2 = typeof ArrayBuffer != "undefined", c2 = typeof DataView != "undefined", _2 = Array.isArray, h2 = Object.keys, p2 = Object.create, f2 = l2 && ArrayBuffer.isView, d2 = isNaN, g2 = isFinite, m2 = !{ toString: null }.propertyIsEnumerable("toString"), b2 = ["valueOf", "isPrototypeOf", "toString", "propertyIsEnumerable", "hasOwnProperty", "toLocaleString"], y2 = Math.pow(2, 53) - 1;
      function k2(t3, e3) {
        return e3 = e3 == null ? t3.length - 1 : +e3, function() {
          for (var n3 = Math.max(arguments.length - e3, 0), r3 = Array(n3), i3 = 0; i3 < n3; i3++)
            r3[i3] = arguments[i3 + e3];
          switch (e3) {
            case 0:
              return t3.call(this, r3);
            case 1:
              return t3.call(this, arguments[0], r3);
            case 2:
              return t3.call(this, arguments[0], arguments[1], r3);
          }
          var s3 = Array(e3 + 1);
          for (i3 = 0; i3 < e3; i3++)
            s3[i3] = arguments[i3];
          return s3[e3] = r3, t3.apply(this, s3);
        };
      }
      function v2(t3) {
        var e3 = typeof t3;
        return e3 === "function" || e3 === "object" && !!t3;
      }
      function w2(t3) {
        return t3 === null;
      }
      function x2(t3) {
        return t3 === void 0;
      }
      function A2(t3) {
        return t3 === true || t3 === false || o2.call(t3) === "[object Boolean]";
      }
      function C2(t3) {
        return !(!t3 || t3.nodeType !== 1);
      }
      function O2(t3) {
        var e3 = "[object " + t3 + "]";
        return function(t4) {
          return o2.call(t4) === e3;
        };
      }
      var S2 = O2("String"), T2 = O2("Number"), D2 = O2("Date"), R2 = O2("RegExp"), L2 = O2("Error"), N2 = O2("Symbol"), j2 = O2("ArrayBuffer"), q2 = O2("Function"), M2 = e2.document && e2.document.childNodes;
      typeof /./ != "function" && typeof Int8Array != "object" && typeof M2 != "function" && (q2 = function(t3) {
        return typeof t3 == "function" || false;
      });
      var F2 = q2, z2 = O2("Object"), I2 = c2 && z2(new DataView(new ArrayBuffer(8))), P2 = typeof Map != "undefined" && z2(/* @__PURE__ */ new Map()), B2 = O2("DataView");
      function $2(t3) {
        return t3 != null && F2(t3.getInt8) && j2(t3.buffer);
      }
      var U2 = I2 ? $2 : B2, W2 = _2 || O2("Array");
      function G2(t3, e3) {
        return t3 != null && u2.call(t3, e3);
      }
      var V2 = O2("Arguments");
      !function() {
        V2(arguments) || (V2 = function(t3) {
          return G2(t3, "callee");
        });
      }();
      var K2 = V2;
      function H2(t3) {
        return !N2(t3) && g2(t3) && !isNaN(parseFloat(t3));
      }
      function Z2(t3) {
        return T2(t3) && d2(t3);
      }
      function X2(t3) {
        return function() {
          return t3;
        };
      }
      function Q2(t3) {
        return function(e3) {
          var n3 = t3(e3);
          return typeof n3 == "number" && n3 >= 0 && n3 <= y2;
        };
      }
      function J2(t3) {
        return function(e3) {
          return e3 == null ? void 0 : e3[t3];
        };
      }
      var Y2 = J2("byteLength"), tt2 = Q2(Y2), et2 = /\[object ((I|Ui)nt(8|16|32)|Float(32|64)|Uint8Clamped|Big(I|Ui)nt64)Array\]/;
      function nt2(t3) {
        return f2 ? f2(t3) && !U2(t3) : tt2(t3) && et2.test(o2.call(t3));
      }
      var rt2 = l2 ? nt2 : X2(false), it2 = J2("length");
      function st2(t3) {
        for (var e3 = {}, n3 = t3.length, r3 = 0; r3 < n3; ++r3)
          e3[t3[r3]] = true;
        return { contains: function(t4) {
          return e3[t4] === true;
        }, push: function(n4) {
          return e3[n4] = true, t3.push(n4);
        } };
      }
      function at2(t3, e3) {
        e3 = st2(e3);
        var n3 = b2.length, i3 = t3.constructor, s3 = F2(i3) && i3.prototype || r2, a3 = "constructor";
        for (G2(t3, a3) && !e3.contains(a3) && e3.push(a3); n3--; )
          (a3 = b2[n3]) in t3 && t3[a3] !== s3[a3] && !e3.contains(a3) && e3.push(a3);
      }
      function ot2(t3) {
        if (!v2(t3))
          return [];
        if (h2)
          return h2(t3);
        var e3 = [];
        for (var n3 in t3)
          G2(t3, n3) && e3.push(n3);
        return m2 && at2(t3, e3), e3;
      }
      function ut2(t3) {
        if (t3 == null)
          return true;
        var e3 = it2(t3);
        return typeof e3 == "number" && (W2(t3) || S2(t3) || K2(t3)) ? e3 === 0 : it2(ot2(t3)) === 0;
      }
      function lt2(t3, e3) {
        var n3 = ot2(e3), r3 = n3.length;
        if (t3 == null)
          return !r3;
        for (var i3 = Object(t3), s3 = 0; s3 < r3; s3++) {
          var a3 = n3[s3];
          if (e3[a3] !== i3[a3] || !(a3 in i3))
            return false;
        }
        return true;
      }
      function ct2(t3) {
        return t3 instanceof ct2 ? t3 : this instanceof ct2 ? void (this._wrapped = t3) : new ct2(t3);
      }
      function _t3(t3) {
        return new Uint8Array(t3.buffer || t3, t3.byteOffset || 0, Y2(t3));
      }
      ct2.VERSION = t2, ct2.prototype.value = function() {
        return this._wrapped;
      }, ct2.prototype.valueOf = ct2.prototype.toJSON = ct2.prototype.value, ct2.prototype.toString = function() {
        return String(this._wrapped);
      };
      var ht2 = "[object DataView]";
      function pt2(t3, e3, n3, r3) {
        if (t3 === e3)
          return t3 !== 0 || 1 / t3 == 1 / e3;
        if (t3 == null || e3 == null)
          return false;
        if (t3 != t3)
          return e3 != e3;
        var i3 = typeof t3;
        return (i3 === "function" || i3 === "object" || typeof e3 == "object") && ft2(t3, e3, n3, r3);
      }
      function ft2(t3, e3, n3, r3) {
        t3 instanceof ct2 && (t3 = t3._wrapped), e3 instanceof ct2 && (e3 = e3._wrapped);
        var s3 = o2.call(t3);
        if (s3 !== o2.call(e3))
          return false;
        if (I2 && s3 == "[object Object]" && U2(t3)) {
          if (!U2(e3))
            return false;
          s3 = ht2;
        }
        switch (s3) {
          case "[object RegExp]":
          case "[object String]":
            return "" + t3 == "" + e3;
          case "[object Number]":
            return +t3 != +t3 ? +e3 != +e3 : +t3 == 0 ? 1 / +t3 == 1 / e3 : +t3 == +e3;
          case "[object Date]":
          case "[object Boolean]":
            return +t3 == +e3;
          case "[object Symbol]":
            return i2.valueOf.call(t3) === i2.valueOf.call(e3);
          case "[object ArrayBuffer]":
          case ht2:
            return ft2(_t3(t3), _t3(e3), n3, r3);
        }
        var a3 = s3 === "[object Array]";
        if (!a3 && rt2(t3)) {
          if (Y2(t3) !== Y2(e3))
            return false;
          if (t3.buffer === e3.buffer && t3.byteOffset === e3.byteOffset)
            return true;
          a3 = true;
        }
        if (!a3) {
          if (typeof t3 != "object" || typeof e3 != "object")
            return false;
          var u3 = t3.constructor, l3 = e3.constructor;
          if (u3 !== l3 && !(F2(u3) && u3 instanceof u3 && F2(l3) && l3 instanceof l3) && "constructor" in t3 && "constructor" in e3)
            return false;
        }
        r3 = r3 || [];
        for (var c3 = (n3 = n3 || []).length; c3--; )
          if (n3[c3] === t3)
            return r3[c3] === e3;
        if (n3.push(t3), r3.push(e3), a3) {
          if ((c3 = t3.length) !== e3.length)
            return false;
          for (; c3--; )
            if (!pt2(t3[c3], e3[c3], n3, r3))
              return false;
        } else {
          var _3, h3 = ot2(t3);
          if (c3 = h3.length, ot2(e3).length !== c3)
            return false;
          for (; c3--; )
            if (!G2(e3, _3 = h3[c3]) || !pt2(t3[_3], e3[_3], n3, r3))
              return false;
        }
        return n3.pop(), r3.pop(), true;
      }
      function dt2(t3, e3) {
        return pt2(t3, e3);
      }
      function gt2(t3) {
        if (!v2(t3))
          return [];
        var e3 = [];
        for (var n3 in t3)
          e3.push(n3);
        return m2 && at2(t3, e3), e3;
      }
      function mt2(t3) {
        var e3 = it2(t3);
        return function(n3) {
          if (n3 == null)
            return false;
          var r3 = gt2(n3);
          if (it2(r3))
            return false;
          for (var i3 = 0; i3 < e3; i3++)
            if (!F2(n3[t3[i3]]))
              return false;
          return t3 !== xt2 || !F2(n3[bt2]);
        };
      }
      var bt2 = "forEach", yt2 = "has", kt2 = ["clear", "delete"], vt2 = ["get", yt2, "set"], wt2 = kt2.concat(bt2, vt2), xt2 = kt2.concat(vt2), Et2 = ["add"].concat(kt2, bt2, yt2), At2 = P2 ? mt2(wt2) : O2("Map"), Ct2 = P2 ? mt2(xt2) : O2("WeakMap"), Ot2 = P2 ? mt2(Et2) : O2("Set"), St2 = O2("WeakSet");
      function Tt2(t3) {
        for (var e3 = ot2(t3), n3 = e3.length, r3 = Array(n3), i3 = 0; i3 < n3; i3++)
          r3[i3] = t3[e3[i3]];
        return r3;
      }
      function Dt2(t3) {
        for (var e3 = ot2(t3), n3 = e3.length, r3 = Array(n3), i3 = 0; i3 < n3; i3++)
          r3[i3] = [e3[i3], t3[e3[i3]]];
        return r3;
      }
      function Rt2(t3) {
        for (var e3 = {}, n3 = ot2(t3), r3 = 0, i3 = n3.length; r3 < i3; r3++)
          e3[t3[n3[r3]]] = n3[r3];
        return e3;
      }
      function Lt2(t3) {
        var e3 = [];
        for (var n3 in t3)
          F2(t3[n3]) && e3.push(n3);
        return e3.sort();
      }
      function Nt2(t3, e3) {
        return function(n3) {
          var r3 = arguments.length;
          if (e3 && (n3 = Object(n3)), r3 < 2 || n3 == null)
            return n3;
          for (var i3 = 1; i3 < r3; i3++)
            for (var s3 = arguments[i3], a3 = t3(s3), o3 = a3.length, u3 = 0; u3 < o3; u3++) {
              var l3 = a3[u3];
              e3 && n3[l3] !== void 0 || (n3[l3] = s3[l3]);
            }
          return n3;
        };
      }
      var jt2 = Nt2(gt2), qt2 = Nt2(ot2), Mt2 = Nt2(gt2, true);
      function Ft2() {
        return function() {
        };
      }
      function zt2(t3) {
        if (!v2(t3))
          return {};
        if (p2)
          return p2(t3);
        var e3 = Ft2();
        e3.prototype = t3;
        var n3 = new e3();
        return e3.prototype = null, n3;
      }
      function It2(t3, e3) {
        var n3 = zt2(t3);
        return e3 && qt2(n3, e3), n3;
      }
      function Pt2(t3) {
        return v2(t3) ? W2(t3) ? t3.slice() : jt2({}, t3) : t3;
      }
      function Bt2(t3, e3) {
        return e3(t3), t3;
      }
      function $t2(t3) {
        return W2(t3) ? t3 : [t3];
      }
      function Ut2(t3) {
        return ct2.toPath(t3);
      }
      function Wt2(t3, e3) {
        for (var n3 = e3.length, r3 = 0; r3 < n3; r3++) {
          if (t3 == null)
            return;
          t3 = t3[e3[r3]];
        }
        return n3 ? t3 : void 0;
      }
      function Gt2(t3, e3, n3) {
        var r3 = Wt2(t3, Ut2(e3));
        return x2(r3) ? n3 : r3;
      }
      function Vt2(t3, e3) {
        for (var n3 = (e3 = Ut2(e3)).length, r3 = 0; r3 < n3; r3++) {
          var i3 = e3[r3];
          if (!G2(t3, i3))
            return false;
          t3 = t3[i3];
        }
        return !!n3;
      }
      function Kt2(t3) {
        return t3;
      }
      function Ht2(t3) {
        return t3 = qt2({}, t3), function(e3) {
          return lt2(e3, t3);
        };
      }
      function Zt2(t3) {
        return t3 = Ut2(t3), function(e3) {
          return Wt2(e3, t3);
        };
      }
      function Xt2(t3, e3, n3) {
        if (e3 === void 0)
          return t3;
        switch (n3 == null ? 3 : n3) {
          case 1:
            return function(n4) {
              return t3.call(e3, n4);
            };
          case 3:
            return function(n4, r3, i3) {
              return t3.call(e3, n4, r3, i3);
            };
          case 4:
            return function(n4, r3, i3, s3) {
              return t3.call(e3, n4, r3, i3, s3);
            };
        }
        return function() {
          return t3.apply(e3, arguments);
        };
      }
      function Qt2(t3, e3, n3) {
        return t3 == null ? Kt2 : F2(t3) ? Xt2(t3, e3, n3) : v2(t3) && !W2(t3) ? Ht2(t3) : Zt2(t3);
      }
      function Jt2(t3, e3) {
        return Qt2(t3, e3, 1 / 0);
      }
      function Yt2(t3, e3, n3) {
        return ct2.iteratee !== Jt2 ? ct2.iteratee(t3, e3) : Qt2(t3, e3, n3);
      }
      function te2(t3, e3, n3) {
        e3 = Yt2(e3, n3);
        for (var r3 = ot2(t3), i3 = r3.length, s3 = {}, a3 = 0; a3 < i3; a3++) {
          var o3 = r3[a3];
          s3[o3] = e3(t3[o3], o3, t3);
        }
        return s3;
      }
      function ee2() {
      }
      function ne2(t3) {
        return t3 == null ? ee2 : function(e3) {
          return Gt2(t3, e3);
        };
      }
      function re2(t3, e3, n3) {
        var r3 = Array(Math.max(0, t3));
        e3 = Xt2(e3, n3, 1);
        for (var i3 = 0; i3 < t3; i3++)
          r3[i3] = e3(i3);
        return r3;
      }
      function ie2(t3, e3) {
        return e3 == null && (e3 = t3, t3 = 0), t3 + Math.floor(Math.random() * (e3 - t3 + 1));
      }
      ct2.toPath = $t2, ct2.iteratee = Jt2;
      var se2 = Date.now || function() {
        return new Date().getTime();
      };
      function ae2(t3) {
        var e3 = function(e4) {
          return t3[e4];
        }, n3 = "(?:" + ot2(t3).join("|") + ")", r3 = RegExp(n3), i3 = RegExp(n3, "g");
        return function(t4) {
          return t4 = t4 == null ? "" : "" + t4, r3.test(t4) ? t4.replace(i3, e3) : t4;
        };
      }
      var oe2 = { "&": "&amp;", "<": "&lt;", ">": "&gt;", '"': "&quot;", "'": "&#x27;", "`": "&#x60;" }, ue2 = ae2(oe2), le2 = ae2(Rt2(oe2)), ce2 = ct2.templateSettings = { evaluate: /<%([\s\S]+?)%>/g, interpolate: /<%=([\s\S]+?)%>/g, escape: /<%-([\s\S]+?)%>/g }, _e2 = /(.)^/, he2 = { "'": "'", "\\": "\\", "\r": "r", "\n": "n", "\u2028": "u2028", "\u2029": "u2029" }, pe2 = /\\|'|\r|\n|\u2028|\u2029/g;
      function fe2(t3) {
        return "\\" + he2[t3];
      }
      var de2 = /^\s*(\w|\$)+\s*$/;
      function ge2(t3, e3, n3) {
        !e3 && n3 && (e3 = n3), e3 = Mt2({}, e3, ct2.templateSettings);
        var r3 = RegExp([(e3.escape || _e2).source, (e3.interpolate || _e2).source, (e3.evaluate || _e2).source].join("|") + "|$", "g"), i3 = 0, s3 = "__p+='";
        t3.replace(r3, function(e4, n4, r4, a4, o4) {
          return s3 += t3.slice(i3, o4).replace(pe2, fe2), i3 = o4 + e4.length, n4 ? s3 += "'+\n((__t=(" + n4 + "))==null?'':_.escape(__t))+\n'" : r4 ? s3 += "'+\n((__t=(" + r4 + "))==null?'':__t)+\n'" : a4 && (s3 += "';\n" + a4 + "\n__p+='"), e4;
        }), s3 += "';\n";
        var a3, o3 = e3.variable;
        if (o3) {
          if (!de2.test(o3))
            throw new Error("variable is not a bare identifier: " + o3);
        } else
          s3 = "with(obj||{}){\n" + s3 + "}\n", o3 = "obj";
        s3 = "var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n" + s3 + "return __p;\n";
        try {
          a3 = new Function(o3, "_", s3);
        } catch (t4) {
          throw t4.source = s3, t4;
        }
        var u3 = function(t4) {
          return a3.call(this, t4, ct2);
        };
        return u3.source = "function(" + o3 + "){\n" + s3 + "}", u3;
      }
      function me2(t3, e3, n3) {
        var r3 = (e3 = Ut2(e3)).length;
        if (!r3)
          return F2(n3) ? n3.call(t3) : n3;
        for (var i3 = 0; i3 < r3; i3++) {
          var s3 = t3 == null ? void 0 : t3[e3[i3]];
          s3 === void 0 && (s3 = n3, i3 = r3), t3 = F2(s3) ? s3.call(t3) : s3;
        }
        return t3;
      }
      var be2 = 0;
      function ye2(t3) {
        var e3 = ++be2 + "";
        return t3 ? t3 + e3 : e3;
      }
      function ke2(t3) {
        var e3 = ct2(t3);
        return e3._chain = true, e3;
      }
      function ve2(t3, e3, n3, r3, i3) {
        if (!(r3 instanceof e3))
          return t3.apply(n3, i3);
        var s3 = zt2(t3.prototype), a3 = t3.apply(s3, i3);
        return v2(a3) ? a3 : s3;
      }
      var we2 = k2(function(t3, e3) {
        var n3 = we2.placeholder, r3 = function() {
          for (var i3 = 0, s3 = e3.length, a3 = Array(s3), o3 = 0; o3 < s3; o3++)
            a3[o3] = e3[o3] === n3 ? arguments[i3++] : e3[o3];
          for (; i3 < arguments.length; )
            a3.push(arguments[i3++]);
          return ve2(t3, r3, this, this, a3);
        };
        return r3;
      });
      we2.placeholder = ct2;
      var xe2 = k2(function(t3, e3, n3) {
        if (!F2(t3))
          throw new TypeError("Bind must be called on a function");
        var r3 = k2(function(i3) {
          return ve2(t3, r3, e3, this, n3.concat(i3));
        });
        return r3;
      }), Ee2 = Q2(it2);
      function Ae2(t3, e3, n3, r3) {
        if (r3 = r3 || [], e3 || e3 === 0) {
          if (e3 <= 0)
            return r3.concat(t3);
        } else
          e3 = 1 / 0;
        for (var i3 = r3.length, s3 = 0, a3 = it2(t3); s3 < a3; s3++) {
          var o3 = t3[s3];
          if (Ee2(o3) && (W2(o3) || K2(o3)))
            if (e3 > 1)
              Ae2(o3, e3 - 1, n3, r3), i3 = r3.length;
            else
              for (var u3 = 0, l3 = o3.length; u3 < l3; )
                r3[i3++] = o3[u3++];
          else
            n3 || (r3[i3++] = o3);
        }
        return r3;
      }
      var Ce2 = k2(function(t3, e3) {
        var n3 = (e3 = Ae2(e3, false, false)).length;
        if (n3 < 1)
          throw new Error("bindAll must be passed function names");
        for (; n3--; ) {
          var r3 = e3[n3];
          t3[r3] = xe2(t3[r3], t3);
        }
        return t3;
      });
      function Oe2(t3, e3) {
        var n3 = function(r3) {
          var i3 = n3.cache, s3 = "" + (e3 ? e3.apply(this, arguments) : r3);
          return G2(i3, s3) || (i3[s3] = t3.apply(this, arguments)), i3[s3];
        };
        return n3.cache = {}, n3;
      }
      var Se2 = k2(function(t3, e3, n3) {
        return setTimeout(function() {
          return t3.apply(null, n3);
        }, e3);
      }), Te2 = we2(Se2, ct2, 1);
      function De2(t3, e3, n3) {
        var r3, i3, s3, a3, o3 = 0;
        n3 || (n3 = {});
        var u3 = function() {
          o3 = n3.leading === false ? 0 : se2(), r3 = null, a3 = t3.apply(i3, s3), r3 || (i3 = s3 = null);
        }, l3 = function() {
          var l4 = se2();
          o3 || n3.leading !== false || (o3 = l4);
          var c3 = e3 - (l4 - o3);
          return i3 = this, s3 = arguments, c3 <= 0 || c3 > e3 ? (r3 && (clearTimeout(r3), r3 = null), o3 = l4, a3 = t3.apply(i3, s3), r3 || (i3 = s3 = null)) : r3 || n3.trailing === false || (r3 = setTimeout(u3, c3)), a3;
        };
        return l3.cancel = function() {
          clearTimeout(r3), o3 = 0, r3 = i3 = s3 = null;
        }, l3;
      }
      function Re2(t3, e3, n3) {
        var r3, i3, s3, a3, o3, u3 = function() {
          var l4 = se2() - i3;
          e3 > l4 ? r3 = setTimeout(u3, e3 - l4) : (r3 = null, n3 || (a3 = t3.apply(o3, s3)), r3 || (s3 = o3 = null));
        }, l3 = k2(function(l4) {
          return o3 = this, s3 = l4, i3 = se2(), r3 || (r3 = setTimeout(u3, e3), n3 && (a3 = t3.apply(o3, s3))), a3;
        });
        return l3.cancel = function() {
          clearTimeout(r3), r3 = s3 = o3 = null;
        }, l3;
      }
      function Le2(t3, e3) {
        return we2(e3, t3);
      }
      function Ne2(t3) {
        return function() {
          return !t3.apply(this, arguments);
        };
      }
      function je2() {
        var t3 = arguments, e3 = t3.length - 1;
        return function() {
          for (var n3 = e3, r3 = t3[e3].apply(this, arguments); n3--; )
            r3 = t3[n3].call(this, r3);
          return r3;
        };
      }
      function qe2(t3, e3) {
        return function() {
          if (--t3 < 1)
            return e3.apply(this, arguments);
        };
      }
      function Me2(t3, e3) {
        var n3;
        return function() {
          return --t3 > 0 && (n3 = e3.apply(this, arguments)), t3 <= 1 && (e3 = null), n3;
        };
      }
      var Fe2 = we2(Me2, 2);
      function ze2(t3, e3, n3) {
        e3 = Yt2(e3, n3);
        for (var r3, i3 = ot2(t3), s3 = 0, a3 = i3.length; s3 < a3; s3++)
          if (e3(t3[r3 = i3[s3]], r3, t3))
            return r3;
      }
      function Ie2(t3) {
        return function(e3, n3, r3) {
          n3 = Yt2(n3, r3);
          for (var i3 = it2(e3), s3 = t3 > 0 ? 0 : i3 - 1; s3 >= 0 && s3 < i3; s3 += t3)
            if (n3(e3[s3], s3, e3))
              return s3;
          return -1;
        };
      }
      var Pe2 = Ie2(1), Be2 = Ie2(-1);
      function $e2(t3, e3, n3, r3) {
        for (var i3 = (n3 = Yt2(n3, r3, 1))(e3), s3 = 0, a3 = it2(t3); s3 < a3; ) {
          var o3 = Math.floor((s3 + a3) / 2);
          n3(t3[o3]) < i3 ? s3 = o3 + 1 : a3 = o3;
        }
        return s3;
      }
      function Ue2(t3, e3, n3) {
        return function(r3, i3, s3) {
          var o3 = 0, u3 = it2(r3);
          if (typeof s3 == "number")
            t3 > 0 ? o3 = s3 >= 0 ? s3 : Math.max(s3 + u3, o3) : u3 = s3 >= 0 ? Math.min(s3 + 1, u3) : s3 + u3 + 1;
          else if (n3 && s3 && u3)
            return r3[s3 = n3(r3, i3)] === i3 ? s3 : -1;
          if (i3 != i3)
            return (s3 = e3(a2.call(r3, o3, u3), Z2)) >= 0 ? s3 + o3 : -1;
          for (s3 = t3 > 0 ? o3 : u3 - 1; s3 >= 0 && s3 < u3; s3 += t3)
            if (r3[s3] === i3)
              return s3;
          return -1;
        };
      }
      var We2 = Ue2(1, Pe2, $e2), Ge2 = Ue2(-1, Be2);
      function Ve2(t3, e3, n3) {
        var r3 = (Ee2(t3) ? Pe2 : ze2)(t3, e3, n3);
        if (r3 !== void 0 && r3 !== -1)
          return t3[r3];
      }
      function Ke2(t3, e3) {
        return Ve2(t3, Ht2(e3));
      }
      function He2(t3, e3, n3) {
        var r3, i3;
        if (e3 = Xt2(e3, n3), Ee2(t3))
          for (r3 = 0, i3 = t3.length; r3 < i3; r3++)
            e3(t3[r3], r3, t3);
        else {
          var s3 = ot2(t3);
          for (r3 = 0, i3 = s3.length; r3 < i3; r3++)
            e3(t3[s3[r3]], s3[r3], t3);
        }
        return t3;
      }
      function Ze2(t3, e3, n3) {
        e3 = Yt2(e3, n3);
        for (var r3 = !Ee2(t3) && ot2(t3), i3 = (r3 || t3).length, s3 = Array(i3), a3 = 0; a3 < i3; a3++) {
          var o3 = r3 ? r3[a3] : a3;
          s3[a3] = e3(t3[o3], o3, t3);
        }
        return s3;
      }
      function Xe2(t3) {
        var e3 = function(e4, n3, r3, i3) {
          var s3 = !Ee2(e4) && ot2(e4), a3 = (s3 || e4).length, o3 = t3 > 0 ? 0 : a3 - 1;
          for (i3 || (r3 = e4[s3 ? s3[o3] : o3], o3 += t3); o3 >= 0 && o3 < a3; o3 += t3) {
            var u3 = s3 ? s3[o3] : o3;
            r3 = n3(r3, e4[u3], u3, e4);
          }
          return r3;
        };
        return function(t4, n3, r3, i3) {
          var s3 = arguments.length >= 3;
          return e3(t4, Xt2(n3, i3, 4), r3, s3);
        };
      }
      var Qe2 = Xe2(1), Je2 = Xe2(-1);
      function Ye2(t3, e3, n3) {
        var r3 = [];
        return e3 = Yt2(e3, n3), He2(t3, function(t4, n4, i3) {
          e3(t4, n4, i3) && r3.push(t4);
        }), r3;
      }
      function tn2(t3, e3, n3) {
        return Ye2(t3, Ne2(Yt2(e3)), n3);
      }
      function en2(t3, e3, n3) {
        e3 = Yt2(e3, n3);
        for (var r3 = !Ee2(t3) && ot2(t3), i3 = (r3 || t3).length, s3 = 0; s3 < i3; s3++) {
          var a3 = r3 ? r3[s3] : s3;
          if (!e3(t3[a3], a3, t3))
            return false;
        }
        return true;
      }
      function nn2(t3, e3, n3) {
        e3 = Yt2(e3, n3);
        for (var r3 = !Ee2(t3) && ot2(t3), i3 = (r3 || t3).length, s3 = 0; s3 < i3; s3++) {
          var a3 = r3 ? r3[s3] : s3;
          if (e3(t3[a3], a3, t3))
            return true;
        }
        return false;
      }
      function rn2(t3, e3, n3, r3) {
        return Ee2(t3) || (t3 = Tt2(t3)), (typeof n3 != "number" || r3) && (n3 = 0), We2(t3, e3, n3) >= 0;
      }
      var sn2 = k2(function(t3, e3, n3) {
        var r3, i3;
        return F2(e3) ? i3 = e3 : (e3 = Ut2(e3), r3 = e3.slice(0, -1), e3 = e3[e3.length - 1]), Ze2(t3, function(t4) {
          var s3 = i3;
          if (!s3) {
            if (r3 && r3.length && (t4 = Wt2(t4, r3)), t4 == null)
              return;
            s3 = t4[e3];
          }
          return s3 == null ? s3 : s3.apply(t4, n3);
        });
      });
      function an2(t3, e3) {
        return Ze2(t3, Zt2(e3));
      }
      function on2(t3, e3) {
        return Ye2(t3, Ht2(e3));
      }
      function un2(t3, e3, n3) {
        var r3, i3, s3 = -1 / 0, a3 = -1 / 0;
        if (e3 == null || typeof e3 == "number" && typeof t3[0] != "object" && t3 != null)
          for (var o3 = 0, u3 = (t3 = Ee2(t3) ? t3 : Tt2(t3)).length; o3 < u3; o3++)
            (r3 = t3[o3]) != null && r3 > s3 && (s3 = r3);
        else
          e3 = Yt2(e3, n3), He2(t3, function(t4, n4, r4) {
            ((i3 = e3(t4, n4, r4)) > a3 || i3 === -1 / 0 && s3 === -1 / 0) && (s3 = t4, a3 = i3);
          });
        return s3;
      }
      function ln2(t3, e3, n3) {
        var r3, i3, s3 = 1 / 0, a3 = 1 / 0;
        if (e3 == null || typeof e3 == "number" && typeof t3[0] != "object" && t3 != null)
          for (var o3 = 0, u3 = (t3 = Ee2(t3) ? t3 : Tt2(t3)).length; o3 < u3; o3++)
            (r3 = t3[o3]) != null && r3 < s3 && (s3 = r3);
        else
          e3 = Yt2(e3, n3), He2(t3, function(t4, n4, r4) {
            ((i3 = e3(t4, n4, r4)) < a3 || i3 === 1 / 0 && s3 === 1 / 0) && (s3 = t4, a3 = i3);
          });
        return s3;
      }
      var cn2 = /[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;
      function _n2(t3) {
        return t3 ? W2(t3) ? a2.call(t3) : S2(t3) ? t3.match(cn2) : Ee2(t3) ? Ze2(t3, Kt2) : Tt2(t3) : [];
      }
      function hn2(t3, e3, n3) {
        if (e3 == null || n3)
          return Ee2(t3) || (t3 = Tt2(t3)), t3[ie2(t3.length - 1)];
        var r3 = _n2(t3), i3 = it2(r3);
        e3 = Math.max(Math.min(e3, i3), 0);
        for (var s3 = i3 - 1, a3 = 0; a3 < e3; a3++) {
          var o3 = ie2(a3, s3), u3 = r3[a3];
          r3[a3] = r3[o3], r3[o3] = u3;
        }
        return r3.slice(0, e3);
      }
      function pn2(t3) {
        return hn2(t3, 1 / 0);
      }
      function fn2(t3, e3, n3) {
        var r3 = 0;
        return e3 = Yt2(e3, n3), an2(Ze2(t3, function(t4, n4, i3) {
          return { value: t4, index: r3++, criteria: e3(t4, n4, i3) };
        }).sort(function(t4, e4) {
          var n4 = t4.criteria, r4 = e4.criteria;
          if (n4 !== r4) {
            if (n4 > r4 || n4 === void 0)
              return 1;
            if (n4 < r4 || r4 === void 0)
              return -1;
          }
          return t4.index - e4.index;
        }), "value");
      }
      function dn2(t3, e3) {
        return function(n3, r3, i3) {
          var s3 = e3 ? [[], []] : {};
          return r3 = Yt2(r3, i3), He2(n3, function(e4, i4) {
            var a3 = r3(e4, i4, n3);
            t3(s3, e4, a3);
          }), s3;
        };
      }
      var gn2 = dn2(function(t3, e3, n3) {
        G2(t3, n3) ? t3[n3].push(e3) : t3[n3] = [e3];
      }), mn2 = dn2(function(t3, e3, n3) {
        t3[n3] = e3;
      }), bn2 = dn2(function(t3, e3, n3) {
        G2(t3, n3) ? t3[n3]++ : t3[n3] = 1;
      }), yn2 = dn2(function(t3, e3, n3) {
        t3[n3 ? 0 : 1].push(e3);
      }, true);
      function kn2(t3) {
        return t3 == null ? 0 : Ee2(t3) ? t3.length : ot2(t3).length;
      }
      function vn2(t3, e3, n3) {
        return e3 in n3;
      }
      var wn2 = k2(function(t3, e3) {
        var n3 = {}, r3 = e3[0];
        if (t3 == null)
          return n3;
        F2(r3) ? (e3.length > 1 && (r3 = Xt2(r3, e3[1])), e3 = gt2(t3)) : (r3 = vn2, e3 = Ae2(e3, false, false), t3 = Object(t3));
        for (var i3 = 0, s3 = e3.length; i3 < s3; i3++) {
          var a3 = e3[i3], o3 = t3[a3];
          r3(o3, a3, t3) && (n3[a3] = o3);
        }
        return n3;
      }), xn2 = k2(function(t3, e3) {
        var n3, r3 = e3[0];
        return F2(r3) ? (r3 = Ne2(r3), e3.length > 1 && (n3 = e3[1])) : (e3 = Ze2(Ae2(e3, false, false), String), r3 = function(t4, n4) {
          return !rn2(e3, n4);
        }), wn2(t3, r3, n3);
      });
      function En2(t3, e3, n3) {
        return a2.call(t3, 0, Math.max(0, t3.length - (e3 == null || n3 ? 1 : e3)));
      }
      function An2(t3, e3, n3) {
        return t3 == null || t3.length < 1 ? e3 == null || n3 ? void 0 : [] : e3 == null || n3 ? t3[0] : En2(t3, t3.length - e3);
      }
      function Cn2(t3, e3, n3) {
        return a2.call(t3, e3 == null || n3 ? 1 : e3);
      }
      function On2(t3, e3, n3) {
        return t3 == null || t3.length < 1 ? e3 == null || n3 ? void 0 : [] : e3 == null || n3 ? t3[t3.length - 1] : Cn2(t3, Math.max(0, t3.length - e3));
      }
      function Sn2(t3) {
        return Ye2(t3, Boolean);
      }
      function Tn2(t3, e3) {
        return Ae2(t3, e3, false);
      }
      var Dn2 = k2(function(t3, e3) {
        return e3 = Ae2(e3, true, true), Ye2(t3, function(t4) {
          return !rn2(e3, t4);
        });
      }), Rn2 = k2(function(t3, e3) {
        return Dn2(t3, e3);
      });
      function Ln2(t3, e3, n3, r3) {
        A2(e3) || (r3 = n3, n3 = e3, e3 = false), n3 != null && (n3 = Yt2(n3, r3));
        for (var i3 = [], s3 = [], a3 = 0, o3 = it2(t3); a3 < o3; a3++) {
          var u3 = t3[a3], l3 = n3 ? n3(u3, a3, t3) : u3;
          e3 && !n3 ? (a3 && s3 === l3 || i3.push(u3), s3 = l3) : n3 ? rn2(s3, l3) || (s3.push(l3), i3.push(u3)) : rn2(i3, u3) || i3.push(u3);
        }
        return i3;
      }
      var Nn2 = k2(function(t3) {
        return Ln2(Ae2(t3, true, true));
      });
      function jn2(t3) {
        for (var e3 = [], n3 = arguments.length, r3 = 0, i3 = it2(t3); r3 < i3; r3++) {
          var s3 = t3[r3];
          if (!rn2(e3, s3)) {
            var a3;
            for (a3 = 1; a3 < n3 && rn2(arguments[a3], s3); a3++)
              ;
            a3 === n3 && e3.push(s3);
          }
        }
        return e3;
      }
      function qn2(t3) {
        for (var e3 = t3 && un2(t3, it2).length || 0, n3 = Array(e3), r3 = 0; r3 < e3; r3++)
          n3[r3] = an2(t3, r3);
        return n3;
      }
      var Mn2 = k2(qn2);
      function Fn2(t3, e3) {
        for (var n3 = {}, r3 = 0, i3 = it2(t3); r3 < i3; r3++)
          e3 ? n3[t3[r3]] = e3[r3] : n3[t3[r3][0]] = t3[r3][1];
        return n3;
      }
      function zn2(t3, e3, n3) {
        e3 == null && (e3 = t3 || 0, t3 = 0), n3 || (n3 = e3 < t3 ? -1 : 1);
        for (var r3 = Math.max(Math.ceil((e3 - t3) / n3), 0), i3 = Array(r3), s3 = 0; s3 < r3; s3++, t3 += n3)
          i3[s3] = t3;
        return i3;
      }
      function In2(t3, e3) {
        if (e3 == null || e3 < 1)
          return [];
        for (var n3 = [], r3 = 0, i3 = t3.length; r3 < i3; )
          n3.push(a2.call(t3, r3, r3 += e3));
        return n3;
      }
      function Pn2(t3, e3) {
        return t3._chain ? ct2(e3).chain() : e3;
      }
      function Bn2(t3) {
        return He2(Lt2(t3), function(e3) {
          var n3 = ct2[e3] = t3[e3];
          ct2.prototype[e3] = function() {
            var t4 = [this._wrapped];
            return s2.apply(t4, arguments), Pn2(this, n3.apply(ct2, t4));
          };
        }), ct2;
      }
      He2(["pop", "push", "reverse", "shift", "sort", "splice", "unshift"], function(t3) {
        var e3 = n2[t3];
        ct2.prototype[t3] = function() {
          var n3 = this._wrapped;
          return n3 != null && (e3.apply(n3, arguments), t3 !== "shift" && t3 !== "splice" || n3.length !== 0 || delete n3[0]), Pn2(this, n3);
        };
      }), He2(["concat", "join", "slice"], function(t3) {
        var e3 = n2[t3];
        ct2.prototype[t3] = function() {
          var t4 = this._wrapped;
          return t4 != null && (t4 = e3.apply(t4, arguments)), Pn2(this, t4);
        };
      });
      var $n2 = { __proto__: null, VERSION: t2, restArguments: k2, isObject: v2, isNull: w2, isUndefined: x2, isBoolean: A2, isElement: C2, isString: S2, isNumber: T2, isDate: D2, isRegExp: R2, isError: L2, isSymbol: N2, isArrayBuffer: j2, isDataView: U2, isArray: W2, isFunction: F2, isArguments: K2, isFinite: H2, isNaN: Z2, isTypedArray: rt2, isEmpty: ut2, isMatch: lt2, isEqual: dt2, isMap: At2, isWeakMap: Ct2, isSet: Ot2, isWeakSet: St2, keys: ot2, allKeys: gt2, values: Tt2, pairs: Dt2, invert: Rt2, functions: Lt2, methods: Lt2, extend: jt2, extendOwn: qt2, assign: qt2, defaults: Mt2, create: It2, clone: Pt2, tap: Bt2, get: Gt2, has: Vt2, mapObject: te2, identity: Kt2, constant: X2, noop: ee2, toPath: $t2, property: Zt2, propertyOf: ne2, matcher: Ht2, matches: Ht2, times: re2, random: ie2, now: se2, escape: ue2, unescape: le2, templateSettings: ce2, template: ge2, result: me2, uniqueId: ye2, chain: ke2, iteratee: Jt2, partial: we2, bind: xe2, bindAll: Ce2, memoize: Oe2, delay: Se2, defer: Te2, throttle: De2, debounce: Re2, wrap: Le2, negate: Ne2, compose: je2, after: qe2, before: Me2, once: Fe2, findKey: ze2, findIndex: Pe2, findLastIndex: Be2, sortedIndex: $e2, indexOf: We2, lastIndexOf: Ge2, find: Ve2, detect: Ve2, findWhere: Ke2, each: He2, forEach: He2, map: Ze2, collect: Ze2, reduce: Qe2, foldl: Qe2, inject: Qe2, reduceRight: Je2, foldr: Je2, filter: Ye2, select: Ye2, reject: tn2, every: en2, all: en2, some: nn2, any: nn2, contains: rn2, includes: rn2, include: rn2, invoke: sn2, pluck: an2, where: on2, max: un2, min: ln2, shuffle: pn2, sample: hn2, sortBy: fn2, groupBy: gn2, indexBy: mn2, countBy: bn2, partition: yn2, toArray: _n2, size: kn2, pick: wn2, omit: xn2, first: An2, head: An2, take: An2, initial: En2, last: On2, rest: Cn2, tail: Cn2, drop: Cn2, compact: Sn2, flatten: Tn2, without: Rn2, uniq: Ln2, unique: Ln2, union: Nn2, intersection: jn2, difference: Dn2, unzip: qn2, transpose: qn2, zip: Mn2, object: Fn2, range: zn2, chunk: In2, mixin: Bn2, default: ct2 }, Un2 = Bn2($n2);
      return Un2._ = Un2, Un2;
    }(), Ks = Xs, Hs = function(t2, e2, n2) {
      var r2, i2, s2, a2, o2, u2;
      return r2 = t2.utils.arrayReplaceAt, a2 = 0, s2 = { divWrap: false, divClass: "checkbox", idPrefix: "checkbox" }, e2 = Ks.extend(s2, e2), o2 = /\[(X|\s|\_|\-)\]\s(.*)/i, i2 = function(t3, n3, r3) {
        var i3, s3, o3;
        return s3 = [], e2.divWrap && ((o3 = new r3("checkbox_open", "div", 1)).attrs = [["class", e2.divClass]], s3.push(o3)), i3 = e2.idPrefix + a2, a2 += 1, (o3 = new r3("checkbox_input", "input", 0)).attrs = [["type", "checkbox"], ["id", i3]], t3 === true && o3.attrs.push(["checked", "true"]), s3.push(o3), (o3 = new r3("label_open", "label", 1)).attrs = [["for", i3]], s3.push(o3), (o3 = new r3("text", "", 0)).content = n3, s3.push(o3), s3.push(new r3("label_close", "label", -1)), e2.divWrap && s3.push(new r3("checkbox_close", "div", -1)), s3;
      }, u2 = function(t3, e3) {
        var n3, r3, s3, a3;
        return (s3 = t3.content.match(o2)) === null ? t3 : (n3 = false, a3 = s3[1], r3 = s3[2], a3 !== "X" && a3 !== "x" || (n3 = true), i2(n3, r3, e3));
      }, function(t3) {
        var e3, n3, i3, s3, a3, o3;
        for (i3 = 0, s3 = (e3 = t3.tokens).length; i3 < s3; )
          if (e3[i3].type === "inline") {
            for (n3 = (o3 = e3[i3].children).length - 1; n3 >= 0; )
              a3 = o3[n3], e3[i3].children = o3 = r2(o3, n3, u2(a3, t3.Token)), n3--;
            i3++;
          } else
            i3++;
      };
    };
    var Qs = function(t2, e2) {
      t2.core.ruler.push("checkbox", Hs(t2, e2));
    };
    var Js = function(t2, e2) {
      let n2 = typeof (e2 = e2 || {}).externalClassName == "string" || e2.externalClassName === null ? e2.externalClassName : "external-link", r2 = typeof e2.internalClassName == "string" || e2.internalClassName === null ? e2.internalClassName : null, i2 = Array.isArray(e2.internalDomains) ? e2.internalDomains.map((t3) => t3.toLowerCase()) : [], s2 = e2.externalTarget || "_self", a2 = e2.internalTarget || "_self", o2 = e2.externalRel || null, u2 = e2.internalRel || null;
      n2 === null && r2 === null && s2 === "_self" && a2 === "_self" && o2 === null && u2 === null || t2.core.ruler.push("external_links", function(t3) {
        t3.tokens.map(function t4(e3) {
          if (e3.children && e3.children.map(t4), e3.type === "link_open") {
            let t5 = function(t6) {
              let e4 = function(t7) {
                let e5 = t7.split("//")[1];
                if (e5)
                  return e5 = e5.split("/")[0].toLowerCase(), e5 || null;
                return null;
              }(t6);
              return e4 === null || i2.indexOf(e4) !== -1;
            }(e3.attrGet("href")), l2 = t5 ? r2 : n2;
            if (l2) {
              let t6 = e3.attrGet("class") || "";
              t6 !== "" && (l2 = t6 + " " + l2), e3.attrSet("class", l2);
            }
            let c2 = t5 ? a2 : s2;
            c2 !== "_self" && e3.attrSet("target", c2);
            let _2 = t5 ? u2 : o2;
            if (_2) {
              let t6 = e3.attrGet("rel") || "";
              t6 !== "" && (_2 = t6 + " " + _2), e3.attrSet("rel", _2);
            }
          }
        });
      });
    };
    var Ys = class {
      constructor(t2) {
        __publicField(this, "pklib");
        __publicField(this, "mdParser");
        __publicField(this, "mdParserOptions");
        __publicField(this, "jsdom");
        __publicField(this, "cache");
        __publicField(this, "transformer");
        __publicField(this, "removers");
        __publicField(this, "customParseMD");
        __publicField(this, "resetIndex", () => {
          this.cache = { md: {}, image: {}, pdf: {}, note: {}, json: {}, error: {} };
        });
        __publicField(this, "index", (t2) => {
          const { cache: e2 } = this, { hash: n2, type: r2 } = t2, i2 = `${r2}.${n2}`;
          v(e2, i2) || (t2.eat = new Date().toISOString(), w(e2, i2, t2));
        });
        __publicField(this, "setTransformer", (t2) => {
          this.transformer = t2;
        });
        __publicField(this, "setRemovers", (t2) => {
          this.removers = t2;
        });
        __publicField(this, "getMDParser", () => {
          if (this.mdParser)
            return this.mdParser;
          const t2 = new Zs(this.mdParserOptions);
          return t2.use(Qs), t2.use(Js), this.mdParser = t2, t2;
        });
        __publicField(this, "setMDParserOptions", (t2 = {}) => (this.mdParser = false, this.mdParserOptions = t2));
        __publicField(this, "setCustomParseMD", (t2) => {
          this.customParseMD = t2;
        });
        __publicField(this, "parseMD", async (t2) => {
          if (this.customParseMD)
            return this.customParseMD(t2);
          const e2 = await this.pklib.vault.read(t2, { encoding: "utf-8" }), { frontmatter: n2, body: r2 } = Rn(e2), i2 = this.pklib.utils.a.asArray(n2.tags);
          return { frontmatter: n2, html: this.getMDParser().render(r2), tags: i2 };
        });
        __publicField(this, "processHtml", async (t2) => {
          const { utils: e2 } = this.pklib, n2 = await this.getWindowFromString(t2), { document: r2 } = n2, i2 = [];
          this.transformer && (await this.transformer(n2, i2, this.pklib), await ta(i2, n2));
          return Object.keys(this.removers).forEach((t3) => {
            (0, e2.dom.remove[t3])(this.removers[t3], r2.body);
          }), n2;
        });
        __publicField(this, "getWindowFromString", async (t2) => {
          if (this.jsdom) {
            const e2 = new this.jsdom.JSDOM(t2);
            return u(e2.window, true), e2.window;
          }
          {
            const e2 = {};
            return e2.document = new window.DOMParser().parseFromString(t2, "text/html"), e2.$ = u, e2;
          }
        });
        __publicField(this, "getTextFromElement", async (t2, e2) => {
          if (!e2 || !e2.innerHTML)
            return "";
          const n2 = t2.createElement("div");
          n2.insertAdjacentHTML("beforeend", e2.innerHTML);
          return Array.from(n2.querySelectorAll("h1,h2,h3,p")).map((t3) => (t3.textContent || "").replace(/\s\s+/g, " ")).filter((t3) => !!t3).join(" ");
        });
        __publicField(this, "print", (t2) => {
          t2 = t2 || this.cache;
          return [{ key: "note", icon: "\u{1F4C4}" }, { key: "image", icon: "\u{1F3DE}\uFE0F" }, { key: "pdf", icon: "\u{1F517}" }, { key: "json", icon: "\u{1F4C1}" }, { key: "error", icon: "\u{1F4A5}" }].map((e2) => this.printCategory(e2, t2)).filter(Boolean).join("\n\n");
        });
        __publicField(this, "printCategory", (t2, e2) => {
          const n2 = Object.values(e2[t2.key]), r2 = n2.length;
          return !(r2 <= 0) && `${t2.icon}  ${r2} ${t2.key}${r2 > 1 ? "s" : ""} 
-------------------
${n2.map((e3) => {
            const n3 = t2.key == "error" ? ` [${e3.err}]` : "";
            return `\u2794 ${e3.url} ${n3}`;
          }).join("\n")}`;
        });
        this.pklib = t2, this.setMDParserOptions({ html: true }), this.setTransformer(na), this.setRemovers({}), this.mdParserOptions = { linkify: true };
      }
    };
    var ta = async (t2, e2) => {
      const n2 = {};
      for (const r2 of t2)
        n2[r2[0]] = await ea(r2[0], r2[1], e2);
      return n2;
    };
    var ea = async (t2, e2, n2) => {
      const { document: r2 } = n2, i2 = [...r2.querySelectorAll(t2)];
      return await Promise.allSettled(i2.map((t3) => e2(t3))), i2.length;
    };
    var na = async (t2, e2, n2) => {
      const { document: r2, $: i2 } = t2;
      if (!r2.querySelector("body"))
        return;
      const { fileToAsset: s2, parser: a2 } = n2;
      e2.push(["img", async (t3) => {
        const e3 = ((t4) => {
          if (t4 && !t4.includes("//"))
            return t4.startsWith("/") ? t4.slice(1) : t4;
        })(t3.getAttribute("src")), n3 = e3 && await s2(e3);
        n3 && (t3.setAttribute("src", n3.url), a2.index(n3));
      }]);
    };
    var ra = class {
      constructor(t2) {
        __publicField(this, "name");
        __publicField(this, "data");
        __publicField(this, "base");
        this.name = t2, this.data = {};
      }
      setBase(t2) {
        this.base = t2 || this.base;
      }
      toPath() {
        if (!this.base)
          throw new Error("db has no base");
        return `${this.base}/${this.name}.json`;
      }
      get(t2, e2) {
        const n2 = this.data[t2] || {};
        return e2 && n2[e2], n2;
      }
      set(t2, e2, n2) {
        const r2 = this.data[t2] || {};
        r2[e2] = n2, this.data[t2] = r2;
      }
      unset(t2, e2) {
        const n2 = this.data[t2] || {};
        delete n2[e2], this.data[t2] = n2;
      }
      async save() {
        const e2 = JSON.stringify(this.data);
        await t.outputFile(this.toPath(), e2);
      }
      async load() {
        const e2 = this.toPath();
        await t.existsSync(e2) || await t.outputFile(e2, "{}");
        try {
          this.data = JSON.parse(await t.readFile(e2, "utf8"));
        } catch (t2) {
          throw new Error("db.load failed");
        }
      }
    };
    var _t2, _a;
    module2.exports = (_a = class {
      constructor(t2 = {}) {
        __publicField(this, "utils");
        __publicField(this, "env");
        __publicField(this, "pkrc");
        __publicField(this, "pkrcfly");
        __publicField(this, "vault");
        __publicField(this, "kit");
        __publicField(this, "db");
        __publicField(this, "cfg");
        __publicField(this, "preExport");
        __publicField(this, "postExport");
        __publicField(this, "version");
        __publicField(this, "verbose");
        __publicField(this, "parser");
        __publicField(this, "isProcessing");
        __publicField(this, "error");
        __privateAdd(this, _t2, (...t2) => {
          this.verbose && console.log("pklib \u2794", ...t2);
        });
        __publicField(this, "init", async () => {
          __privateGet(this, _t2).call(this, "init");
        });
        __publicField(this, "loadDirsConfig", async (t2) => {
          var _a2;
          const { vault: e2, utils: n2, pkrc: r2 } = this;
          if (!((_a2 = r2.pk) == null ? void 0 : _a2.dirs))
            return [];
          const i2 = t2.path.split("/").slice(0, -1).filter(Boolean), s2 = i2.map((t3, e3) => {
            if (e3 == 0)
              return t3;
            return [i2[e3 - 1], t3].join("/");
          }), a2 = await Promise.allSettled(s2.map(async (t3) => {
            try {
              const r3 = await e2.read(`${t3}/dirrc.md`, { encoding: "utf-8" }), { frontmatter: i3 } = n2.md.parseFrontmatter(r3);
              return !!Object.keys(i3).length && i3;
            } catch (t4) {
              return false;
            }
          }));
          return a2.map((t3) => t3.value).filter(Boolean);
        });
        __publicField(this, "exportFile", async (t2, e2) => {
          this.isProcessing = true;
          const { parser: n2, utils: r2, cfg: i2 } = this;
          e2 = e2 || {}, t2 = r2.a.asArray(t2), n2.resetIndex();
          const s2 = await (this.preExport || (() => {
          }))();
          await (async (t3) => {
            for (const e3 of t3) {
              if (!e3)
                continue;
              if (e3.split(".").pop() != "md")
                continue;
              const t4 = await this.fileToAsset(e3);
              try {
                const s3 = await n2.parseMD(e3);
                if (t4.path == "pkrc.md") {
                  const e4 = r2.o.clone(s3.frontmatter, "obsidian,vault,password");
                  t4.content = JSON.stringify(e4, null, 2), t4.url = "pkrc.json", t4.type = "json", n2.index(t4);
                  continue;
                }
                if (t4.path.split("/").pop() == "dirrc.md") {
                  const e4 = r2.o.clone(s3.frontmatter, "obsidian,vault,password");
                  t4.content = JSON.stringify(e4, null, 2), t4.url = t4.path.replace(".md", ".json"), t4.type = "json", n2.index(t4);
                  continue;
                }
                let a3 = await n2.processHtml(s3.html), o2 = a3.document;
                if (t4.path == "navbar.md") {
                  const e4 = this.utils.dom.parseUl(a3, o2.querySelector("ul"));
                  t4.content = JSON.stringify(e4, null, 2), t4.url = "navbar.json", t4.type = "json", n2.index(t4);
                  continue;
                }
                const u2 = await this.loadDirsConfig(t4);
                this.pkrcfly = r2.o.merge({}, this.pkrc, ...u2, s3.frontmatter);
                const l2 = i2("title") || i2("og.title") || t4.filename.replace(".md", "");
                i2.set("title", l2), await this.encryptFile(o2);
                const c2 = await this.buildHTML(o2.body.innerHTML, s3);
                a3 = c2.window, o2 = a3.document, t4.type = "note", t4.content = c2.html, t4.title = o2.title, t4.tags = s3.tags, t4.text = await n2.getTextFromElement(o2, o2.getElementById("content"));
              } catch (e4) {
                t4.type = "error", t4.err = e4.message || e4;
              }
              n2.index(t4);
            }
          })(t2), e2.dry || await this.dumpFiles(), e2.dry || await this.dbSave(), e2.inspect && console.log("cache", n2.cache);
          const a2 = n2.print();
          return await (this.postExport || (() => {
          }))({ files: t2, preExport: s2 }), this.isProcessing = false, { cache: n2.cache, summary: a2 };
        });
        __publicField(this, "dbSave", async () => {
          const { db: t2, parser: e2, utils: n2 } = this;
          await t2.load();
          const r2 = async (r3) => {
            const i2 = `${r3}s`, s2 = e2.cache[r3];
            if (Object.keys(s2).forEach((e3) => {
              e3 = n2.o.clone(s2[e3], "content"), t2.set(i2, e3.hash, e3);
            }), i2 == "notes") {
              const e3 = await this.kit.lsFiles("html"), r4 = t2.get(i2), s3 = await Promise.all(e3.map(async (t3) => n2.c.getHash(t3)));
              Object.keys(r4).filter((t3) => !s3.includes(t3)).map((e4) => {
                t2.unset(i2, e4);
              });
            }
          };
          await r2("note"), await r2("image"), await r2("pdf"), await t2.save();
        });
        __publicField(this, "dumpFiles", async () => {
          const { cache: t2 } = this.parser;
          return await Promise.all([this.kit.dumpNotes(t2.json), this.kit.dumpNotes(t2.note), this.kit.dumpAssets(t2.image, "base64"), this.kit.dumpAssets(t2.pdf)]);
        });
        __publicField(this, "buildHTML", async (t2, e2 = {}) => {
          const { utils: n2 } = this, r2 = ((t3 = {}) => {
            const { cfg: e3 } = t3, n3 = (t4) => typeof t4 == "string" ? t4.replace(/"/g, "'") : t4, r3 = (t4) => n3(e3(t4));
            return `
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>${e3("title")}</title>
<meta name="description" content="${r3("description") || r3("site.description") || r3("og.description") || ""}" />
<meta property="og:title" content="${r3("og.title") || r3("title")}" />
<meta property="og:description" content="${r3("og.description") || r3("description") || r3("site.description") || ""}" />${Object.entries(e3("og", {})).reduce((t4, [e4, r4]) => ["title", "description"].includes(e4) ? t4 : t4 + `
<meta property="og:${e4}" content="${n3(r4)}" />`, "")}
<script type="text/javascript" src="https://cdn.jsdelivr.net/gh/publishkit/sdk@latest/sdk.js"><\/script>
`;
          })({ cfg: this.cfg }), i2 = e2.tags, s2 = n2.o.clone(e2.frontmatter, "password"), a2 = n2.s.beautify(((t3 = {}) => `
<template id="frontmatter">
${JSON.stringify(t3.frontmatter)}
</template>
<template id="content">
${t3.body}
</template>`)({ tags: i2, frontmatter: s2, body: t2 })), o2 = n2.s.beautify(((t3 = {}) => `<!DOCTYPE html>
<html>
    <head>${t3.head}</head>
    <body>
${t3.body}
</body>
</html>`)({ head: r2, body: a2 }));
          return { html: o2, body: a2, window: await this.parser.getWindowFromString(o2) };
        });
        __publicField(this, "encryptFile", async (t2) => {
          const e2 = this.cfg("password");
          if (!e2)
            return;
          const n2 = await this.utils.c.encrypt(t2.body.innerHTML, e2);
          t2.body.innerHTML = "_crypted_" + n2;
        });
        __publicField(this, "fileToAsset", async (t2) => {
          var _a2;
          const e2 = t2.split("/").pop() || "", n2 = ((_a2 = e2.split(".").pop()) == null ? void 0 : _a2.toLowerCase()) || "";
          let r2 = "", i2 = "";
          n2 == "md" && (r2 = t2.replace(".md", ".html"), i2 = "md"), "jpg,jpeg,gif,png,pdf".split(",").includes(n2) && (r2 = t2, i2 = n2 == "pdf" ? "pdf" : "image");
          return { path: t2, filename: e2, ext: n2, hash: await this.utils.c.getHash(r2), url: r2, type: i2 };
        });
        __publicField(this, "setPkrc", (t2) => {
          var _a2, _b;
          if (t2 = t2 || {}, !Object.keys(t2).length)
            throw new Error("inavalid pkrc data");
          __privateGet(this, _t2).call(this, "set:pkrc"), this.pkrc = t2, this.pkrcfly = {};
          const e2 = ((_a2 = t2.vault) == null ? void 0 : _a2.export_folder) || this.env.kit;
          this.kit.setBase(e2), this.db.setBase(e2), this.version = ((_b = t2.pk) == null ? void 0 : _b.version) || "latest";
        });
        __publicField(this, "getPkrc", (t2, e2 = "md") => {
          const n2 = `${t2 || this.env.cwd}/pkrc.${e2}`;
          if (!jn.fs.existsSync(n2))
            return false;
          const r2 = jn.fs.readFileSync(n2, "utf8");
          return e2 == "md" ? jn.md.parseFrontmatter(r2).frontmatter : JSON.parse(r2);
        });
        __publicField(this, "reloadPkrc", () => {
          const t2 = this.getPkrc();
          this.setPkrc(t2);
        });
        __publicField(this, "guessEnv", () => {
          var _a2;
          let t2, e2, n2, r2, i2 = "", s2 = false;
          try {
            t2 = app == null ? void 0 : app.vault.adapter.basePath, i2 = "vault", s2 = true;
          } catch (e3) {
            t2 = process.cwd(), (jn.fs.existsSync(`${t2}/.obsidian`) || jn.fs.existsSync(`${t2}/pkrc.md`)) && (i2 = "vault");
          }
          try {
            i2 == "vault" ? (e2 = t2, r2 = this.getPkrc(t2), n2 = ((_a2 = r2.vault) == null ? void 0 : _a2.export_folder) || `${t2}/kit`) : jn.fs.existsSync(`${t2}/pkrc.json`) ? (i2 = "kit", r2 = this.getPkrc(t2, "json"), n2 = t2) : (e2 = t2, i2 = "vault"), this.env = { cwd: t2, type: i2, vault: e2, kit: n2, isObsidian: s2 }, e2 && this.vault.setBase(e2), r2 && this.setPkrc(r2);
          } catch (t3) {
            this.error = this.betterError(t3), __privateGet(this, _t2).call(this, "error", this.error);
          }
        });
        __publicField(this, "betterError", (t2) => {
          let e2;
          return e2 = t2.name == "YAMLException" ? `Invalid Yaml in pkrc.md file. Fix & restart !

${t2.message}` : t2, e2;
        });
        this.utils = jn, this.vault = new qn(this, "vault"), this.kit = new qn(this, "kit"), this.parser = new Ys(this), this.db = new ra("pkdb"), t2.verbose && (this.verbose = true), this.guessEnv(), this.cfg = (t3, e2) => jn.o.get(this.pkrcfly, t3) || jn.o.get(this.pkrc, t3) || e2, this.cfg.set = (t3, e2) => jn.o.put(this.pkrcfly, t3, e2);
      }
      async createPkrc(t2 = {}) {
        var _a2, _b, _c, _d;
        if (this.env.type == "kit")
          throw new Error('cannot init a "kit" folder');
        if (await ((_a2 = this.vault) == null ? void 0 : _a2.fileExist("pkrc.md")))
          throw new Error("pkrc.md already exist");
        t2.vault = t2.vault || {}, t2.vault.export_folder = t2.vault.export_folder || ((_c = (_b = this.pkrc) == null ? void 0 : _b.vault) == null ? void 0 : _c.export_folder) || `${this.env.vault}/kit`, t2.site = t2.site || {}, t2.site.name = t2.site.name || this.utils.s.capitalize((_d = this.env.vault.split("/").pop()) == null ? void 0 : _d.replace(/-/g, " ")), t2.site.id = t2.site.id || "";
        const e2 = ((t3 = {}) => `---

# \u{1F4C2} Vault

vault:
    export_folder: ${t3.vault.export_folder}
    exclude: 
      - '^kit/'
      - '^templates/'
      - '^test/'

# \u{1F680} PublishKit

pk:
  version: latest
  dirs: true


# \u{1F531} Site

site:
  id: ${t3.site.id}
  name: ${t3.site.name}
  description: Welcome to ${t3.site.name}
  url: https://publishkit.dev
  theme: default


# \u{1F4E6} Plugins

plugins: 
  header: true
  modal: true
  fonts: true
  darkmode: true
  navbar: true
  toc: true
  search: true
  social: true
  highlight: true


# \u2699\uFE0F  Plugins settings

header:
  fluid: true
  contrast: true

fonts:
  font: Marcher
  headings: Marcher

highlight:
  theme: arta

social:
  github: https://publishkit.dev
  discord: https://publishkit.dev

search:
  chars: 3
  fuzzy: 0.2
  padding: 40
  max_results: 5

---

# PublishKit Global Settings


To change some settings, just edit the frontmatter variables on top of this file and export it.

You can find more about settings [here](https://publishkit.dev/settings).`)(t2);
        return this.vault.write("pkrc.md", e2);
      }
    }, _t2 = new WeakMap(), _a);
  }
});

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => main_default
});
module.exports = __toCommonJS(main_exports);
var import_obsidian5 = require("obsidian");

// src/obs.ts
var import_obsidian = require("obsidian");
var Obs = class {
  constructor(pkplugin) {
    this.switchMode = async (mode) => {
      const leaf = this.pkplugin.app.workspace.activeLeaf;
      if (!leaf)
        return;
      const viewState = leaf.getViewState();
      const needSwitch = viewState.state.mode != mode;
      if (needSwitch) {
        viewState.state.mode = mode;
        await leaf.setViewState(viewState);
        await this.utils.g.timeout(200);
      }
      return needSwitch;
    };
    this.getAllNotes = () => {
      console.log("getall");
    };
    this.pkplugin = pkplugin;
    this.utils = pkplugin.pklib.utils;
  }
  async write(path, content) {
    const { vault } = this.pkplugin.app;
    const tfile = vault.getAbstractFileByPath(path);
    if (tfile instanceof import_obsidian.TFile)
      vault.delete(tfile);
    if (tfile instanceof import_obsidian.TFolder)
      return false;
    await vault.create(path, content);
  }
  async openFile(file, {
    mode,
    focus = true,
    newPane,
    direction = "vertical" /* default */
  } = {}) {
    const leaf = newPane ? window.app.workspace.splitActiveLeaf(direction) : window.app.workspace.getUnpinnedLeaf();
    if (mode) {
      const viewState = leaf.getViewState();
      viewState.state.mode = mode;
      await leaf.setViewState(viewState, { focus });
    }
    await leaf.openFile(file);
    return leaf;
  }
  getFile(path) {
    if (path instanceof import_obsidian.TFile)
      return path;
    const tfile = this.pkplugin.app.vault.getAbstractFileByPath(path);
    if (tfile instanceof import_obsidian.TFile)
      return tfile;
    return false;
  }
  getFrontmatter(path) {
    var _a;
    const file = this.getFile(path);
    const fm = file ? {
      ...(_a = this.pkplugin.app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter
    } : {};
    delete fm.position;
    return fm;
  }
  getTags(path) {
    const file = this.getFile(path);
    if (!file)
      return [];
    const metafile = this.pkplugin.app.metadataCache.getFileCache(file);
    const tags = metafile ? this.utils.a.unique((0, import_obsidian.getAllTags)(metafile)) : [];
    tags.forEach((tag, index) => {
      tags[index] = tag.replace("#", "");
    });
    return tags;
  }
  updateFrontmatter(contents, field, value) {
    const f = contents.match(/^---\r?\n(.*?)\n---\r?\n(.*)$/s), v = `${field}: ${value}`, x = new RegExp(`^${field}:.*$`, "m"), [s, e] = f ? [`${f[1]}
`, f[2]] : ["", contents];
    return f && f[1].match(x) ? contents.replace(x, v) : `---
${s}${v}
---
${e}`;
  }
};
var obs_default = Obs;

// src/setup.ts
var import_obsidian2 = require("obsidian");
var SetupModal = class extends import_obsidian2.Modal {
  constructor(pkplugin, callback) {
    super(app);
    this.pkplugin = pkplugin;
    this.callback = callback;
  }
  onSubmit() {
    this.callback(this.data);
  }
  onOpen() {
    var _a;
    const { contentEl, pkplugin } = this;
    const { pklib } = pkplugin;
    const data = this.data = {
      vault: { export_folder: pklib.env.vault + "/kit" },
      site: { id: "", name: "" }
    };
    this.data.site.name = pklib.utils.s.capitalize((_a = pklib.env.vault.split("/").pop()) == null ? void 0 : _a.replace(/-/g, " "));
    contentEl.createEl("h1", { text: "Publish Kit Setup" });
    new import_obsidian2.Setting(contentEl).setName("Export Folder").setDesc("absolute path - ex: /Users/batman/mywebsite").addText((text) => {
      return text.setValue(data.vault.export_folder).onChange((value) => {
        data.vault.export_folder = value;
      });
    });
    new import_obsidian2.Setting(contentEl).setName("Site ID").setDesc("ex: rec_xxxxxxx").addText((text) => {
      return text.setValue(data.site.id).onChange((value) => {
        data.site.id = value;
      });
    });
    new import_obsidian2.Setting(contentEl).setName("Site Name").addText((text) => {
      return text.setValue(data.site.name).onChange((value) => {
        data.site.name = value;
      });
    });
    new import_obsidian2.Setting(contentEl).addButton((btn) => btn.setButtonText("Submit").setCta().onClick(() => {
      this.close();
      this.onSubmit();
    }));
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/launcher.ts
var import_obsidian3 = require("obsidian");

// src/commands.ts
var Commands = [
  {
    id: "exportCurrentNote",
    name: "\u{1F4C4}  Export active note",
    desc: ""
  },
  {
    id: "exportAllNotes",
    name: "\u{1F4C1}  Export vault",
    desc: ""
  }
];

// src/launcher.ts
var Launcher = class extends import_obsidian3.SuggestModal {
  constructor(pkplugin) {
    super(app);
    this.pkplugin = pkplugin;
    this.utils = pkplugin.pklib.utils;
  }
  getSuggestions(query) {
    return Commands.filter((item) => item.name.toLowerCase().includes(query.toLowerCase()));
  }
  renderSuggestion(item, el) {
    el.createEl("div", { text: item.name });
  }
  onChooseSuggestion(item, evt) {
    this.pkplugin.runCommand(item.id);
  }
};

// src/report.ts
var import_obsidian4 = require("obsidian");
var ReportModal = class extends import_obsidian4.Modal {
  constructor(pkplugin, callback) {
    super(app);
    this.pkplugin = pkplugin;
    this.callback = callback || (() => {
    });
  }
  onSubmit() {
    this.callback(this.data);
  }
  async onOpen() {
    const { contentEl, pkplugin } = this;
    const { pklib } = pkplugin;
    const cache = pklib.parser.cache;
    const data = this.data = Object.values(cache.note);
    const summary = pklib.parser.print();
    console.log("preview cache", cache);
    contentEl.createEl("h1", { text: "Export preview" });
    new import_obsidian4.Setting(contentEl).setName(`About to export ${data.length} notes in "${pklib.pkrc.vault.export_folder}"`);
    data.forEach((asset) => {
      const row = new import_obsidian4.Setting(contentEl);
      row.setName(asset.path);
    });
    new import_obsidian4.Setting(contentEl).addButton((btn) => btn.setButtonText("Export").setCta().onClick(async () => {
      await pklib.dumpFiles();
      await pklib.dbSave();
      pkplugin.notice(summary);
      this.close();
    }));
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// main.ts
var import_pklib = __toESM(require_pklib());
var _log;
var PKPlugin = class extends import_obsidian5.Plugin {
  constructor() {
    super(...arguments);
    __privateAdd(this, _log, (...args) => {
      this.verbose && console.log(`publishkit \u2794`, ...args);
    });
    this.notice = (str, time = 4e3) => {
      new import_obsidian5.Notice(str, time);
    };
    this.init = () => {
      const { pklib } = this;
      window.pklib = pklib;
      if (pklib.error)
        return this.notice(pklib.error, 1e4);
      if (!pklib.pkrc)
        return this.initSetup();
      if (!pklib.cfg("vault.export_folder")) {
        const msg = '\u{1F4A5} missing "vault.export_folder" setting in pkrc.md';
        return this.notice(msg);
      }
      this.statusbar = this.addStatusBarItem();
      this.bindObsidian();
      this.initCommands();
      this.app.metadataCache.on("changed", async (file) => {
        try {
          if (file.path == "pkrc.md") {
            pklib.reloadPkrc();
          }
        } catch (e) {
          this.notice(pklib.betterError(e));
        }
      });
      this.app.workspace.on("file-open", (file) => {
        if (pklib.isProcessing)
          return;
        this.runCommand("displayStatus", file);
      });
      __privateGet(this, _log).call(this, "inited");
    };
    this.displayStatus = async (file) => {
      if (!file || this.pklib.isProcessing)
        return;
      const path = file.path.replace(".md", ".html");
      const exist = await this.pklib.kit.fileExist(path);
      const text = "\u{1F7E2}";
      this.statusbar.empty();
      exist && this.statusbar.createEl("span", { text });
    };
    this.initCommands = () => {
      Commands.forEach((c) => {
        this.addCommand({
          id: c.id,
          name: c.name,
          callback: () => {
            this.runCommand(c.id);
          }
        });
      });
    };
    this.initSetup = () => {
      return new SetupModal(this, async (data) => {
        await this.pklib.createPkrc(data);
        const file = this.obs.getFile("pkrc.md");
        file && this.obs.openFile(file, { newPane: true });
      }).open();
    };
    this.runCommand = async (key, ...args) => {
      if (!this.pklib.pkrc)
        return this.initSetup();
      this[key](...args);
    };
    this.startLauncher = () => {
      new Launcher(this).open();
    };
    this.startReport = () => {
      new ReportModal(this).open();
    };
    this.exportCurrentNote = async (options) => {
      const file = app.workspace.getActiveFile();
      if (!file)
        return this.notice("no active note to export !");
      options = options || { follow: false };
      const result = await this.pklib.exportFile(file.path, options);
      this.notice(result.summary);
      console.log(result.summary);
    };
    this.exportAllNotes = async () => {
      const files = await this.pklib.vault.lsFiles();
      const result = await this.pklib.exportFile(files, { dry: true });
      this.startReport();
    };
    this.bindObsidian = () => {
      const { pklib, obs } = this;
      const getHTML = async () => {
        const leaf = this.app.workspace.activeLeaf;
        if (!leaf)
          throw new Error("no active leaf");
        const html = leaf.view.modes.preview.renderer.sections.reduce((p, c) => p + c.el.innerHTML, "");
        return html;
      };
      pklib.preExport = async () => {
        const needSwitch = await this.obs.switchMode("preview");
        return { needSwitch };
      };
      pklib.postExport = async ({ files, preExport }) => {
        const { needSwitch } = preExport;
        const [firstFile] = files;
        const lastFile = files[files.length - 1];
        if (firstFile != lastFile) {
          const file = this.obs.getFile(firstFile);
          file && await this.obs.openFile(file, {
            mode: needSwitch ? "source" : "preview"
          });
        } else
          needSwitch && await this.obs.switchMode("source");
      };
      pklib.parser.setCustomParseMD(async (file) => {
        file = obs.getFile(file);
        await obs.openFile(file, { mode: "preview" });
        await pklib.utils.g.timeout(pklib.cfg("obsidian.throttle") || 500);
        const frontmatter = obs.getFrontmatter(file);
        const tags = obs.getTags(file);
        const html = await getHTML();
        return { frontmatter, html, tags };
      });
      pklib.parser.setRemovers({
        el: ".collapse-indicator,.list-bullet,.inline-title,.embedded-backlinks,.copy-code-button,.frontmatter-container,.frontmatter,.markdown-preview-pusher,.mod-header,.markdown-embed-link,.markdown-embed,.embed-title",
        class: ".pdf-embed,.media-embed,.internal-embed,.has-list-bullet,.contains-task-list,.task-list-item,.task-list-item-checkbox,.is-checked,.dataview-inline-query,.image-embed,.is-loaded",
        attr: "rel,data-task,data-line,data-heading,data-href,aria-label,aria-label-position,referrerpolicy",
        emptyAttr: "class,data-callout-metadata,data-callout-fold",
        emptyTags: "div,p"
      });
      pklib.parser.setTransformer(async (win, txs, pklib2) => {
        const { document: doc, $: $2 } = win;
        const body = doc.querySelector("body");
        if (!body)
          return;
        const { fileToAsset, parser, vault } = pklib2;
        const isInternal = (path) => {
          if (!path.startsWith("app://"))
            return "";
          const local = window.decodeURIComponent(path.match(/app:\/\/local([^?#]+)/)[1]);
          return local.replace(vault.base + "/", "");
        };
        txs.push([
          "a",
          async (el) => {
            const href = el.getAttribute("href") || "";
            const file = app.metadataCache.getFirstLinkpathDest(href, "");
            el.removeAttribute("target");
            el.classList.remove("is-unresolved");
            el.classList.remove("internal-link");
            el.classList.remove("external-link");
            if (file) {
              el.classList.add("internal-link");
              const asset = await fileToAsset(file.path);
              el.setAttribute("href", asset.url);
              parser.index(asset);
            } else {
              if (href.startsWith("https://") || href.startsWith("//") || href.startsWith("http://"))
                el.classList.add("external-link");
              else
                el.classList.add("internal-link");
            }
            if (el.classList.contains("external-link"))
              el.setAttribute("target", "_blank");
          }
        ]);
        txs.push([
          "span",
          async (el) => {
            "alt,src".split(",").map((attr) => el.removeAttribute(attr));
          }
        ]);
        txs.push([
          "img",
          async (el) => {
            "alt,".split(",").map((attr) => el.removeAttribute(attr));
            const path = isInternal(el.getAttribute("src"));
            const asset = path && await fileToAsset(path);
            if (!asset)
              return;
            el.setAttribute("src", asset.url);
            parser.index(asset);
          }
        ]);
        txs.push([
          ".pdf-embed iframe",
          async (el) => {
            const path = isInternal(el.getAttribute("src"));
            const asset = path && await fileToAsset(path);
            if (!asset)
              return;
            el.setAttribute("src", asset.url);
            el.setAttribute("frameBorder", "no");
            el.removeAttribute("style");
            parser.index(asset);
            $2(el).parent().addClass("pdf");
          }
        ]);
        txs.push([
          "body > .markdown-embed-content",
          async (el) => {
            const loop = (el2, level = 0) => {
              const html = el2.innerHTML;
              if (!html)
                return false;
              level++;
              const root = $2(html);
              const childs = root.find("> .markdown-preview-sizer > div > .markdown-embed-content");
              if (childs.length)
                childs.toArray().map((el3) => loop(el3, level));
              try {
                const content = root.find("> .markdown-preview-sizer");
                const divs = content.find("> div");
                divs.each(function() {
                  const div = $2(this);
                  if (!div.find("> p")[0])
                    return;
                  div.after(div.html());
                  div.remove();
                });
                const final = content[0].innerHTML;
                if (!final)
                  return el2.remove();
                else {
                  el2.classList.remove("markdown-embed-content");
                  el2.classList.add("embed-content");
                  el2.innerHTML = final;
                }
              } catch (e) {
                console.log("err:flattening:embed", e);
              }
            };
            loop(el);
          }
        ]);
      });
    };
  }
  async onload() {
    this.verbose = true;
    this.pklib = new import_pklib.default({ verbose: true });
    this.obs = new obs_default(this);
    const iconCurrent = this.addRibbonIcon("paper-plane", "PublishKit", (evt) => {
      this.startLauncher();
    });
    if (!this.app.workspace.layoutReady)
      this.app.workspace.onLayoutReady(async () => {
        this.init();
      });
    else
      this.init();
  }
};
_log = new WeakMap();
var main_default = PKPlugin;
/*!
 * jQuery JavaScript Library v3.6.3
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright OpenJS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2022-12-20T21:28Z
 */
/**
 * filesize
 *
 * @copyright 2022 Jason Mulligan <jason.mulligan@avoidwork.com>
 * @license BSD-3-Clause
 * @version 10.0.6
 */
